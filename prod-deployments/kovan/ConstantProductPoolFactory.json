{
  "address": "0xBa006909bA3D273735D9223f7404Ff8c3Dc11183",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba4ff28a80541579a484c20ab496eb5e0461314ee8587e1875da56ec3c167f49",
  "receipt": {
    "to": null,
    "from": "0x04baA32217e7DcCA82ABb3a9CE1F5086B3741fF1",
    "contractAddress": "0xBa006909bA3D273735D9223f7404Ff8c3Dc11183",
    "transactionIndex": 1,
    "gasUsed": "4227133",
    "logsBloom": "0x
    "blockHash": "0x1f1d4f5fe79cd0514b7fb23caf46777a97062f93608f21ea14ec46671f482415",
    "transactionHash": "0xba4ff28a80541579a484c20ab496eb5e0461314ee8587e1875da56ec3c167f49",
    "logs": [],
    "blockNumber": 26832295,
    "cumulativeGasUsed": "4325415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x312b493E71EF0aECdAF7480523C114c68a298B17"
  ],
  "solcInputHash": "8a0b70ce299dd51a4139b0ba951a7dae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Gupta.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident exchange Constant Product Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/ConstantProductPoolFactory.sol\":\"ConstantProductPoolFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/deployer/MasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/TridentOwnable.sol\\\";\\n\\n/// @notice Trident pool deployer contract with template factory whitelist.\\n/// @author Mudit Gupta.\\ncontract MasterDeployer is TridentOwnable {\\n    event DeployPool(address indexed _factory, address indexed pool);\\n\\n    uint256 public barFee;\\n    address public migrator;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n\\n    address[] public pools;\\n\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    constructor(\\n        uint256 _barFee,\\n        address _barFeeTo,\\n        address _bento\\n    ) {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        require(_barFeeTo != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_bento != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        barFee = _barFee;\\n        barFeeTo = _barFeeTo;\\n        bento = _bento;\\n    }\\n\\n    function deployPool(address _factory, bytes calldata _deployData) external returns (address pool) {\\n        require(whitelistedFactories[_factory], \\\"FACTORY_NOT_WHITELISTED\\\");\\n        pool = IPoolFactory(_factory).deployPool(_deployData);\\n        pools.push(pool);\\n        emit DeployPool(_factory, pool);\\n    }\\n\\n    function addToWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = true;\\n    }\\n\\n    function removeFromWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = false;\\n    }\\n\\n    function setBarFee(uint256 _barFee) external onlyOwner {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        barFee = _barFee;\\n    }\\n\\n    function setMigrator(address _migrator) external onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    function poolsCount() external view returns (uint256 count) {\\n        count = pools.length;\\n    }\\n}\\n\",\"keccak256\":\"0x33c2d3101bb271d721b6ef1835631dba59e63444b1510f87a2b46575864f7270\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    \\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xabe7c92de39e405012bd89d614fe4107a7323f8ed4bdc9a8dad5c2429c14fbcb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x4310b83f8e22e0f9997f8deca08a921d961df64ac7c4ace4f7a00e9d188384fe\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool callback interface.\\ninterface ITridentCallee {\\n    function tridentSwapCallback(bytes calldata data) external;\\n\\n    function tridentMintCallback(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x256e838362a3064201b37b3b7c08bc1421b173a6fea633176123f0b827b868c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TridentMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident sqrt helper library.\\nlibrary TridentMath {\\n    /// @notice Calculate sqrt (x) rounding down, where `x` is unsigned 256-bit integer number.\\n    /// @dev Adapted from https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol, \\n    /// \\u00a9 2019 ABDK Consulting, License-Identifier: BSD-4-Clause.\\n    /// @param x Unsigned 256-bit integer number.\\n    /// @return result Sqrt result.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x == 0) result = 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x8) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // @dev Seven iterations should be enough.\\n                uint256 r1 = x / r;\\n                result = r < r1 ? r : r1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccbada517ace78149a4602ce782e6faf408404ee300569b8adf76e0eb7f0dd3b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ConstantProductPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"../libraries/TridentMath.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\nimport \\\"../workInProgress/IMigrator.sol\\\";\\nimport \\\"../deployer/MasterDeployer.sol\\\";\\n\\n/// @notice Trident exchange pool template with constant product formula for swapping between an ERC-20 token pair.\\n/// @dev The reserves are stored as bento shares.\\n///      The curve is applied to shares as well. This pool does not care about the underlying amounts.\\ncontract ConstantProductPool is IPool, TridentERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    uint256 internal constant MINIMUM_LIQUIDITY = 1000;\\n\\n    uint8 internal constant PRECISION = 112;\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n    uint256 internal constant MAX_FEE_SQUARE = 100000000;\\n    uint256 public immutable swapFee;\\n    uint256 internal immutable MAX_FEE_MINUS_SWAP_FEE;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n    address public immutable masterDeployer;\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast;\\n\\n    uint112 internal reserve0;\\n    uint112 internal reserve1;\\n    uint32 internal blockTimestampLast;\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:ConstantProduct\\\";\\n\\n    uint256 private unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    /// @dev Only set immutable variables here - state changes made here will not be used.\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address tokenA, address tokenB, uint256 _swapFee, bool _twapSupport) = abi.decode(\\n            _deployData,\\n            (address, address, uint256, bool)\\n        );\\n\\n        require(tokenA != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(tokenA != tokenB, \\\"IDENTICAL_ADDRESSES\\\");\\n        require(_swapFee <= MAX_FEE, \\\"INVALID_SWAP_FEE\\\");\\n\\n        (, bytes memory _bento) = _masterDeployer.staticcall(abi.encodeWithSelector(0x4da31827)); // @dev bento().\\n        (, bytes memory _barFeeTo) = _masterDeployer.staticcall(abi.encodeWithSelector(0x0c0a0cd2)); // @dev barFeeTo().\\n\\n        token0 = tokenA;\\n        token1 = tokenB;\\n        swapFee = _swapFee;\\n        MAX_FEE_MINUS_SWAP_FEE = MAX_FEE - _swapFee;\\n        bento = abi.decode(_bento, (address));\\n        barFeeTo = abi.decode(_barFeeTo, (address));\\n        masterDeployer = _masterDeployer;\\n        unlocked = 1;\\n        if (_twapSupport) {\\n            blockTimestampLast = 1;\\n        }\\n    }\\n\\n    function mint(bytes calldata data) public override lock returns (uint256 liquidity) {\\n        address to = abi.decode(data, (address));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n\\n        _mintFee(_reserve0, _reserve1, _totalSupply);\\n\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        uint256 computed = TridentMath.sqrt(balance0 * balance1);\\n        if (_totalSupply == 0) {\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            address migrator = MasterDeployer(masterDeployer).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != type(uint256).max, \\\"BAD_DESIRED_LIQUIDITY\\\");\\n            } else {\\n                require(migrator == address(0), \\\"ONLY_MIGRATOR\\\");\\n                liquidity = computed - MINIMUM_LIQUIDITY;\\n            }\\n        } else {\\n            uint256 k = TridentMath.sqrt(uint256(_reserve0) * _reserve1);\\n            liquidity = ((computed - k) * _totalSupply) / k;\\n        }\\n        require(liquidity > 0, \\\"INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = computed;\\n        emit Mint(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function burn(bytes calldata data) public override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address to, bool unwrapBento) = abi.decode(data, (address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        _mintFee(_reserve0, _reserve1, _totalSupply);\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n\\n        _transfer(token0, amount0, to, unwrapBento);\\n        _transfer(token1, amount1, to, unwrapBento);\\n\\n        balance0 -= amount0;\\n        balance1 -= amount1;\\n\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = TridentMath.sqrt(balance0 * balance1);\\n\\n        withdrawnAmounts = new TokenAmount[](2);\\n        withdrawnAmounts[0] = TokenAmount({token: address(token0), amount: amount0});\\n        withdrawnAmounts[1] = TokenAmount({token: address(token1), amount: amount1});\\n\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function burnSingle(bytes calldata data) public override lock returns (uint256 amount) {\\n        (address tokenOut, address to, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        _mintFee(_reserve0, _reserve1, _totalSupply);\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n\\n        if (tokenOut == token1) {\\n            // @dev Swap token0 for token1.\\n            // Calculate amountOut as if the user first withdrew balanced liquidity and then swapped token0 for token1.\\n            amount1 += _getAmountOut(amount0, _reserve0 - amount0, _reserve1 - amount1);\\n            _transfer(token1, amount1, to, unwrapBento);\\n            balance1 -= amount1;\\n            amount = amount1;\\n            amount0 = 0;\\n        } else {\\n            // @dev Swap token1 for token0.\\n            require(tokenOut == token1, \\\"INVALID_OUTPUT_TOKEN\\\");\\n            amount0 += _getAmountOut(amount1, _reserve1 - amount1, _reserve0 - amount0);\\n            _transfer(token0, amount0, to, unwrapBento);\\n            balance0 -= amount0;\\n            amount = amount0;\\n            amount1 = 0;\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = TridentMath.sqrt(balance0 * balance1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function swap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amountIn;\\n        address tokenOut;\\n\\n        if (tokenIn == token0) {\\n            tokenOut = token1;\\n            amountIn = balance0 - _reserve0;\\n            amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n            balance1 -= amountOut;\\n        } else {\\n            require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n            tokenOut = token0;\\n            amountIn = balance1 - reserve1;\\n            amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n            balance0 -= amountOut;\\n        }\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n\\n    function flashSwap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento, uint256 amountIn, bytes memory context) = abi.decode(\\n            data,\\n            (address, address, bool, uint256, bytes)\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n\\n        if (tokenIn == token0) {\\n            amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n            _transfer(token1, amountOut, recipient, unwrapBento);\\n            ITridentCallee(msg.sender).tridentSwapCallback(context);\\n            (uint256 balance0, uint256 balance1) = _balance();\\n            require(balance0 - _reserve0 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n            _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n            emit Swap(recipient, tokenIn, token1, amountIn, amountOut);\\n        } else {\\n            require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n            amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n            _transfer(token0, amountOut, recipient, unwrapBento);\\n            ITridentCallee(msg.sender).tridentSwapCallback(context);\\n            (uint256 balance0, uint256 balance1) = _balance();\\n            require(balance1 - _reserve1 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n            _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n            emit Swap(recipient, tokenIn, token0, amountIn, amountOut);\\n        }\\n    }\\n\\n    function _getReserves()\\n        internal\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _balance() internal view returns (uint256 balance0, uint256 balance1) {\\n        // @dev balanceOf(address,address).\\n        (, bytes memory _balance0) = bento.staticcall(abi.encodeWithSelector(0xf7888aec, token0, address(this)));\\n        balance0 = abi.decode(_balance0, (uint256));\\n        // @dev balanceOf(address,address).\\n        (, bytes memory _balance1) = bento.staticcall(abi.encodeWithSelector(0xf7888aec, token1, address(this)));\\n        balance1 = abi.decode(_balance1, (uint256));\\n    }\\n\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _blockTimestampLast\\n    ) internal {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"OVERFLOW\\\");\\n\\n        if (blockTimestampLast == 0) {\\n            // @dev TWAP support is disabled for gas efficiency.\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n        } else {\\n            uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n            if (blockTimestamp != _blockTimestampLast && _reserve0 != 0) {\\n                unchecked {\\n                    uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\\n                    uint256 price0 = (uint256(_reserve1) << PRECISION) / _reserve0;\\n                    price0CumulativeLast += price0 * timeElapsed;\\n                    uint256 price1 = (uint256(_reserve0) << PRECISION) / _reserve1;\\n                    price1CumulativeLast += price1 * timeElapsed;\\n                }\\n            }\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n            blockTimestampLast = blockTimestamp;\\n        }\\n\\n        emit Sync(balance0, balance1);\\n    }\\n\\n    function _mintFee(\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint256 _totalSupply\\n    ) internal returns (uint256 computed) {\\n        uint256 _kLast = kLast;\\n        if (_kLast != 0) {\\n            computed = TridentMath.sqrt(uint256(_reserve0) * _reserve1);\\n            if (computed > _kLast) {\\n                // @dev 'barFee' % of increase in liquidity.\\n                // It's going to be slightly less than barFee % in reality due to the math.\\n                (, bytes memory _barFee) = masterDeployer.staticcall(abi.encodeWithSelector(0xc14ad802)); // @dev barFee().\\n                uint256 barFee = abi.decode(_barFee, (uint256));\\n                uint256 liquidity = (_totalSupply * (computed - _kLast) * barFee) / computed / MAX_FEE;\\n                if (liquidity != 0) {\\n                    _mint(barFeeTo, liquidity);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveAmountIn,\\n        uint256 reserveAmountOut\\n    ) internal view returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * MAX_FEE_MINUS_SWAP_FEE;\\n        amountOut = (amountInWithFee * reserveAmountOut) / (reserveAmountIn * MAX_FEE + amountInWithFee);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            // @dev withdraw(address,address,address,uint256,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0x97da6d30, token, address(this), to, 0, shares));\\n            require(success, \\\"WITHDRAW_FAILED\\\");\\n        } else {\\n            // @dev transfer(address,address,address,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0xf18d03cc, token, address(this), to, shares));\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = token0;\\n        assets[1] = token1;\\n    }\\n\\n    function getAmountOut(bytes calldata data) public view override returns (uint256 finalAmountOut) {\\n        (address tokenIn, uint256 amountIn) = abi.decode(data, (address, uint256));\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves();\\n        if (tokenIn == token0) {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n        } else {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n        }\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        return _getReserves();\\n    }\\n}\\n\",\"keccak256\":\"0xb9a6e0ca495f463fe18407d124d6ebd6be1e2c0738abefbd3757b7588c79bf09\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ConstantProductPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ConstantProductPool.sol\\\";\\nimport \\\"./PairPoolDeployer.sol\\\";\\n\\n/// @notice Contract for deploying Trident exchange Constant Product Pool with configurations.\\n/// @author Mudit Gupta.\\ncontract ConstantProductPoolFactory is PairPoolDeployer {\\n    constructor(address _masterDeployer) PairPoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address tokenA, address tokenB, uint256 swapFee, bool twapSupport) = abi.decode(\\n            _deployData,\\n            (address, address, uint256, bool)\\n        );\\n        if (tokenA > tokenB) {\\n            (tokenA, tokenB) = (tokenB, tokenA);\\n            _deployData = abi.encode(tokenA, tokenB, swapFee, twapSupport);\\n        }\\n        pool = _deployPool(tokenA, tokenB, type(ConstantProductPool).creationCode, _deployData);\\n    }\\n}\\n\",\"keccak256\":\"0xdaf82eb6929506041e234b1d4fc9eca2b4b71de47dd9dad12d56b8b5d60ad77b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/PairPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ConstantProductPool.sol\\\";\\n\\n/// @notice Trident exchange pool deployer for whitelisted pair template factories.\\n/// @author Mudit Gupta.\\ncontract PairPoolDeployer {\\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes => address) public configAddress;\\n    address public immutable masterDeployer;\\n\\n    constructor(address _masterDeployer) {\\n        require(_masterDeployer != address(0), \\\"PairPoolDeployer: ZERO_ADDRESS\\\");\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _deployPool(\\n        address token0,\\n        address token1,\\n        bytes memory creationCode,\\n        bytes memory deployData\\n    ) internal returns (address pair) {\\n        require(token0 < token1, \\\"PairPoolDeployer: INVALID_TOKEN_ORDER\\\");\\n        require(configAddress[deployData] == address(0), \\\"PairPoolDeployer: POOL_ALREADY_DEPLOYED\\\");\\n\\n        // NB Salt is not actually needed since creationCodeWithConfig already contains the salt.\\n        bytes32 salt = keccak256(deployData);\\n\\n        bytes memory creationCodeWithConfig = abi.encodePacked(creationCode, abi.encode(deployData, masterDeployer));\\n\\n        assembly {\\n            pair := create2(0, add(creationCodeWithConfig, 32), mload(creationCodeWithConfig), salt)\\n            if iszero(extcodesize(pair)) {\\n                revert(0, 0)\\n            }\\n        }\\n        pools[token0][token1].push(pair);\\n        configAddress[deployData] = pair;\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](endIndex - startIndex);\\n        for (uint256 i = 0; startIndex < endIndex; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex];\\n            startIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ae487233ff3bb156874e6c6ec882cd9bf33230cabb591ae8ee4b87ac1ca4693\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/TridentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Contract for Trident pool ERC20 with EIP-2612 extension.\\n/// @dev Adapted from RariCapital (https://github.com/Rari-Capital/solmate/blob/main/src/erc20/ERC20.sol).\\ncontract TridentERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    event Transfer(address indexed from, address indexed recipient, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    string public constant name = \\\"Sushi LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    uint256 public totalSupply;\\n    /// @notice owner -> balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner -> spender -> allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         PERMIT/EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice The EIP-712 typehash for the permit struct used by this contract.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /// @notice The EIP-712 typehash for this contract's domain.\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    /// @notice owner -> nonce mapping used in {permit}.\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Approves `amount` from msg.sender to be spent by `spender`.\\n    /// @param spender Address of the party that can draw tokens from msg.sender's account.\\n    /// @param amount The maximum collective `amount` that `spender` can draw.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n        // @dev This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `recipient`. Caller needs approval from `from`.\\n    /// @param from Address to draw tokens `from`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transferFrom(\\n        address from,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n        balanceOf[from] -= amount;\\n        // @dev This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(from, recipient, amount);\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          PERMIT/EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Triggers an approval from owner to spends.\\n    /// @param owner The address to approve from.\\n    /// @param spender The address to be approved.\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite).\\n    /// @param deadline The time at which to expire the signature.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"TridentERC20: PERMIT_DEADLINE_EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"TridentERC20: INVALID_PERMIT_SIGNATURE\\\");\\n        allowance[recoveredAddress][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n    function _mint(address recipient, uint256 amount) internal {\\n        totalSupply += amount;\\n        // @dev This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal {\\n        balanceOf[from] -= amount;\\n        // @dev This is safe because a user won't ever\\n        // have a balance larger than totalSupply\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xfe229b9e15b61a4ed9f588eefa5e86c6c9825a6adce7fe415001901d8a8d1007\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TridentOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident access control contract.\\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\\ncontract TridentOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event TransferOwner(address indexed from, address indexed recipient);\\n    event TransferOwnerClaim(address indexed from, address indexed recipient);\\n\\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\\n    constructor() {\\n        owner = msg.sender;\\n        emit TransferOwner(address(0), msg.sender);\\n    }\\n\\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    /// @notice `pendingOwner` can claim `owner` account.\\n    function claimOwner() external {\\n        require(msg.sender == pendingOwner, \\\"NOT_PENDING_OWNER\\\");\\n        emit TransferOwner(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Transfer `owner` account.\\n    /// @param recipient Account granted `owner` access control.\\n    /// @param direct If 'true', ownership is directly transferred.\\n    function transferOwner(address recipient, bool direct) external onlyOwner {\\n        if (direct) {\\n            owner = recipient;\\n            emit TransferOwner(msg.sender, recipient);\\n        } else {\\n            pendingOwner = recipient;\\n            emit TransferOwnerClaim(msg.sender, recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5c21e3db8f37367207f6ed6beef4b47f3c64f1a233cc8d7545c7415e527f77c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/workInProgress/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90784cbfa52a13cc4b29bb700adc9e6204199543edcf7adc61eb879dee19ac88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051614d1b380380614d1b83398101604081905261002f916100a0565b806001600160a01b03811661008a5760405162461bcd60e51b815260206004820152601e60248201527f50616972506f6f6c4465706c6f7965723a205a45524f5f414444524553530000604482015260640160405180910390fd5b60601b6001600160601b031916608052506100d0565b6000602082840312156100b257600080fd5b81516001600160a01b03811681146100c957600080fd5b9392505050565b60805160601c614c266100f56000396000818161019e01526106070152614c266000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c80635bc93d6c11620000565780635bc93d6c146200011c57806371a258121462000172578063cf58879a146200019857600080fd5b80630d617dfa1462000080578063169c4cef14620000ee57806327c3cae11462000105575b600080fd5b620000c462000091366004620008b7565b805160208183018101805160018252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000c4620000ff36600462000826565b620001c0565b620000c462000116366004620008b7565b62000213565b620001636200012d366004620007e8565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000e5565b62000189620001833660046200086c565b62000319565b604051620000e59190620009e1565b620000c47f000000000000000000000000000000000000000000000000000000000000000081565b60006020528260005260406000206020528160005260406000208181548110620001e957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60008060008060008580602001905181019062000231919062000788565b93509350935093508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115620002bf576040805173ffffffffffffffffffffffffffffffffffffffff808616602083015286169181019190915260608101839052811515608082015292939260a00160405160208183030381529060405295505b6200030f848460405180602001620002d7906200077a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040528962000453565b9695505050505050565b606062000327838362000aae565b67ffffffffffffffff81111562000342576200034262000b95565b6040519080825280602002602001820160405280156200036c578160200160208202803683370190505b50905060005b828410156200044a5773ffffffffffffffffffffffffffffffffffffffff808716600090815260208181526040808320938916835292905220805485908110620003c057620003c062000b66565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000400576200040062000b66565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620004318162000afb565b9450508080620004419062000afb565b91505062000372565b50949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161062000516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50616972506f6f6c4465706c6f7965723a20494e56414c49445f544f4b454e5f60448201527f4f5244455200000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660018360405162000540919062000990565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614620005f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f50616972506f6f6c4465706c6f7965723a20504f4f4c5f414c52454144595f4460448201527f45504c4f5945440000000000000000000000000000000000000000000000000060648201526084016200050d565b600082805190602001209050600084847f00000000000000000000000000000000000000000000000000000000000000006040516020016200063992919062000a3d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052620006779291602001620009ae565b6040516020818303038152906040529050818151602083016000f59250823b620006a057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8781166000908152602081815260408083208a8516845282528083208054600180820183559185529290932090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169387169390931790925590518491906200072490879062000990565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050949350505050565b6140068062000beb83390190565b600080600080608085870312156200079f57600080fd5b8451620007ac8162000bc4565b6020860151909450620007bf8162000bc4565b6040860151606087015191945092508015158114620007dd57600080fd5b939692955090935050565b60008060408385031215620007fc57600080fd5b8235620008098162000bc4565b915060208301356200081b8162000bc4565b809150509250929050565b6000806000606084860312156200083c57600080fd5b8335620008498162000bc4565b925060208401356200085b8162000bc4565b929592945050506040919091013590565b600080600080608085870312156200088357600080fd5b8435620008908162000bc4565b93506020850135620008a28162000bc4565b93969395505050506040820135916060013590565b600060208284031215620008ca57600080fd5b813567ffffffffffffffff80821115620008e357600080fd5b818401915084601f830112620008f857600080fd5b8135818111156200090d576200090d62000b95565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000956576200095662000b95565b816040528281528760208487010111156200097057600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008251620009a481846020870162000ac8565b9190910192915050565b60008351620009c281846020880162000ac8565b835190830190620009d881836020880162000ac8565b01949350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000a3157835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101620009fd565b50909695505050505050565b604081526000835180604084015262000a5e81606085016020880162000ac8565b73ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60008282101562000ac35762000ac362000b37565b500390565b60005b8381101562000ae557818101518382015260200162000acb565b8381111562000af5576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000b305762000b3062000b37565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000be757600080fd5b5056fe6101806040523480156200001257600080fd5b50604051620040063803806200400683398101604081905262000035916200049e565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c001604051602081830303815290604052805190602001206080818152505050600080600080858060200190518101906200013291906200043e565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b612710821115620002325760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b0316634da3182760e01b17905290516000916001600160a01b038816916200027691906200056b565b600060405180830381855afa9150503d8060008114620002b3576040519150601f19603f3d011682016040523d82523d6000602084013e620002b8565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b038916916200030191906200056b565b600060405180830381855afa9150503d80600081146200033e576040519150601f19603f3d011682016040523d82523d6000602084013e62000343565b606091505b506001600160601b0319606089811b82166101405288901b166101605260a086905291506200037790508461271062000589565b60c052815162000391908301602090810190840162000417565b60601b6001600160601b031916610100528051620003b9906020908301810190830162000417565b6001600160601b0319606091821b811660e0529088901b166101205260016008558215620003f757600780546001600160e01b0316600160e01b1790555b505050505050505062000611565b80516200041281620005f8565b919050565b6000602082840312156200042a57600080fd5b81516200043781620005f8565b9392505050565b600080600080608085870312156200045557600080fd5b84516200046281620005f8565b60208601519094506200047581620005f8565b60408601516060870151919450925080151581146200049357600080fd5b939692955090935050565b60008060408385031215620004b257600080fd5b82516001600160401b0380821115620004ca57600080fd5b818501915085601f830112620004df57600080fd5b815181811115620004f457620004f4620005e2565b604051601f8201601f19908116603f011681019083821181831017156200051f576200051f620005e2565b816040528281528860208487010111156200053957600080fd5b6200054c836020830160208801620005af565b8096505050505050620005626020840162000405565b90509250929050565b600082516200057f818460208701620005af565b9190910192915050565b600082821015620005aa57634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015620005cc578181015183820152602001620005b2565b83811115620005dc576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200060e57600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6138a76200075f6000396000818161057a0152818161075a015281816108910152818161093f01528181610fcc015281816110e20152818161131b01528181611396015281816115ff01528181611e8b01528181611f2b01528181611f6c015261297c015260008181610308015281816106d601528181610a2401528181610b5b01528181610fa001528181611079015281816112c60152818161144f0152818161159101528181611bef01528181612068015261287d015260008181610553015281816117d70152612e550152600081816103d3015281816125e50152818161275b015281816128410152612a250152600081816102bc0152612f22015260006124e7015260006103fa0152600081816103ac01526121e401526138a76000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a69840a8116100a2578063cf58879a11610071578063cf58879a1461054e578063d21220a714610575578063d505accf1461059c578063dd62ed3e146105b157600080fd5b8063a69840a8146104ee578063a8f1f52e14610515578063a9059cbb14610528578063af8c09bf1461053b57600080fd5b80637464fc3d116100de5780637464fc3d146104765780637ba0e2e71461047f5780637ecebe001461049257806395d89b41146104b257600080fd5b80635a3d549314610425578063627dd56a1461042e57806367e4ac2c1461044157806370a082311461045657600080fd5b806323b872dd116101875780633644e515116101565780633644e515146103a75780634da31827146103ce57806354cf2aeb146103f55780635909c0d51461041c57600080fd5b806323b872dd146103335780632a07b6c71461034657806330adf81f14610366578063313ce5671461038d57600080fd5b8063095ea7b3116101c3578063095ea7b3146102945780630c0a0cd2146102b75780630dfe16811461030357806318160ddd1461032a57600080fd5b8063053da1c8146101ea57806306fdde03146102105780630902f1ac14610259575b600080fd5b6101fd6101f83660046134d4565b6105dc565b6040519081526020015b60405180910390f35b61024c6040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b6040516102079190613684565b610261610c17565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff1690820152606001610207565b6102a76102a23660046133b7565b610c80565b6040519015158152602001610207565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610207565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd60005481565b6102a761034136600461341c565b610cf9565b6103596103543660046134d4565b610e45565b604051610207919061361f565b6101fd7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610395601281565b60405160ff9091168152602001610207565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd60045481565b6101fd60055481565b6101fd61043c3660046134d4565b6111c5565b61044961156f565b60405161020791906135c5565b6101fd6104643660046131eb565b60016020526000908152604090205481565b6101fd60065481565b6101fd61048d3660046134d4565b61166e565b6101fd6104a03660046131eb565b60036020526000908152604090205481565b61024c6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6101fd7f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b6101fd6105233660046134d4565b611b78565b6102a76105363660046133b7565b611cab565b6101fd6105493660046134d4565b611d30565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6105af6105aa36600461345d565b61212b565b005b6101fd6105bf3660046133e3565b600260209081526000928352604080842090915290825290205481565b600060085460011461064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260085560008080808061066687890189613273565b9450945094509450945060008060006106ce6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561093d5761075385846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166124df565b98506107817f00000000000000000000000000000000000000000000000000000000000000008a8989612542565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107bd908790600401613684565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506000806107fa61283a565b90925090508661081a6dffffffffffffffffffffffffffff871684613700565b1015610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610646565b61088f8282878787612ab2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161092e929190918252602082015260400190565b60405180910390a45050610c03565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610646565b610a1d85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166124df565b9850610a4b7f00000000000000000000000000000000000000000000000000000000000000008a8989612542565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610a87908790600401613684565b600060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b50505050600080610ac461283a565b909250905086610ae46dffffffffffffffffffffffffffff861683613700565b1015610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610646565b610b598282878787612ab2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610bf8929190918252602082015260400190565b60405180910390a450505b505060016008555094979650505050505050565b6000806000610c756007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ce89086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610d965773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610d90908490613700565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610dcb908490613700565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e339086815260200190565b60405180910390a35060019392505050565b6060600854600114610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b6002600855600080610ec784860186613382565b915091506000806000610f296007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f3a61283a565b60008054308252600160205260409091205492945090925090610f5e878784612dad565b50600082610f6c86846136c3565b610f7691906136af565b9050600083610f8586856136c3565b610f8f91906136af565b9050610f9b3084612f53565b610fc77f0000000000000000000000000000000000000000000000000000000000000000838d8d612542565b610ff37f0000000000000000000000000000000000000000000000000000000000000000828d8d612542565b610ffd8287613700565b95506110098186613700565b945061101886868b8b8b612ab2565b61102a61102586886136c3565b612fe6565b6006556040805160028082526060820190925290816020015b6040805180820190915260008082526020820152815260200190600190039081611043579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110ca576110ca6137ee565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c600181518110611133576111336137ee565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111a6929190918252602082015260400190565b60405180910390a35050600160085550979a9950505050505050505050565b6000600854600114611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b6002600855600080806112488587018761322c565b92509250925060008060006112ac6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112bd61283a565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561139457507f00000000000000000000000000000000000000000000000000000000000000006113546dffffffffffffffffffffffffffff881685613700565b915061138182886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff166124df565b9a5061138d8b84613700565b92506114d7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610646565b506007547f00000000000000000000000000000000000000000000000000000000000000009061149b906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1684613700565b91506114c882876dffffffffffffffffffffffffffff16896dffffffffffffffffffffffffffff166124df565b9a506114d48b85613700565b93505b6114e3818c8b8b612542565b6114f08484898989612ab2565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610bf8929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115c3576115c36137ee565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611631576116316137ee565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006008546001146116dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b600260085560006116ef838501856131eb565b9050600080600061174f6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b92509250925060008061176061283a565b6000549193509150611773868683612dad565b5060006117906dffffffffffffffffffffffffffff881685613700565b905060006117ae6dffffffffffffffffffffffffffff881685613700565b905060006117bf61102586886136c3565b905083611a41576117d360006103e861316b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561183b57600080fd5b505afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611873919061320f565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119ae578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190613546565b9b5060008c11801561194357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c14155b6119a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c495155494449545900000000000000000000006044820152606401610646565b611a3b565b73ffffffffffffffffffffffffffffffffffffffff811615611a2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f52000000000000000000000000000000000000006044820152606401610646565b611a386103e883613700565b9b505b50611a89565b6000611a636110256dffffffffffffffffffffffffffff808c16908d166136c3565b90508085611a718285613700565b611a7b91906136c3565b611a8591906136af565b9b50505b60008b11611af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610646565b611afd8a8c61316b565b611b0a86868b8b8b612ab2565b6006819055604080518481526020810184905273ffffffffffffffffffffffffffffffffffffffff8c169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a910160405180910390a35050600160085550969998505050505050505050565b60008080611b88848601866133b7565b91509150600080611be86007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611c7357611c6c83836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166124df565b9450611ca1565b611c9e83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166124df565b94505b5050505092915050565b33600090815260016020526040812080548391908390611ccc908490613700565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ce89086815260200190565b6000600854600114611d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b600260085560008080611db38587018761322c565b9250925092506000806000611e176007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611e2861283a565b60008054308252600160205260409091205492945090925090611e4c878784612dad565b50600082611e5a86846136c3565b611e6491906136af565b9050600083611e7386856136c3565b611e7d91906136af565b9050611e893084612f53565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611f6a57611f1a82611efb816dffffffffffffffffffffffffffff8d16613700565b611f15846dffffffffffffffffffffffffffff8d16613700565b6124df565b611f249082613697565b9050611f527f0000000000000000000000000000000000000000000000000000000000000000828d8d612542565b611f5c8186613700565b9450809c50600091506120a3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161461201f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610646565b6120578161203d816dffffffffffffffffffffffffffff8c16613700565b611f15856dffffffffffffffffffffffffffff8e16613700565b6120619083613697565b915061208f7f0000000000000000000000000000000000000000000000000000000000000000838d8d612542565b6120998287613700565b9550819c50600090505b6120b086868b8b8b612ab2565b6120bd61102586886136c3565b600655604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600160085550989b9a5050505050505050505050565b428410156121bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f54726964656e7445524332303a205045524d49545f444541444c494e455f455860448201527f50495245440000000000000000000000000000000000000000000000000000006064820152608401610646565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761223683613743565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016122d79291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612360573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906123db57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f54726964656e7445524332303a20494e56414c49445f5045524d49545f53494760448201527f4e415455524500000000000000000000000000000000000000000000000000006064820152608401610646565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b60008061250c7f0000000000000000000000000000000000000000000000000000000000000000866136c3565b90508061251b612710866136c3565b6125259190613697565b61252f84836136c3565b61253991906136af565b95945050505050565b80156126c4576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f000000000000000000000000000000000000000000000000000000000000000090911691612611916135a9565b6000604051808303816000865af19150503d806000811461264e576040519150601f19603f3d011682016040523d82523d6000602084013e612653565b606091505b50509050806126be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c454400000000000000000000000000000000006044820152606401610646565b50612834565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f00000000000000000000000000000000000000000000000000000000000000001691612785916135a9565b6000604051808303816000865af19150503d80600081146127c2576040519150601f19603f3d011682016040523d82523d6000602084013e6127c7565b606091505b5050905080612832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610646565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f0000000000000000000000000000000000000000000000000000000000000000306040516024016128d092919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161291e91906135a9565b600060405180830381855afa9150503d8060008114612959576040519150601f19603f3d011682016040523d82523d6000602084013e61295e565b606091505b50915050808060200190518101906129769190613546565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612a5291906135a9565b600060405180830381855afa9150503d8060008114612a8d576040519150601f19603f3d011682016040523d82523d6000602084013e612a92565b606091505b5091505080806020019051810190612aaa9190613546565b925050509091565b6dffffffffffffffffffffffffffff8511801590612ade57506dffffffffffffffffffffffffffff8411155b612b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610646565b6007547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612bc857600780546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612d6d565b6000612bd96401000000004261377c565b90508163ffffffff168163ffffffff1614158015612c0657506dffffffffffffffffffffffffffff841615155b15612ccb5781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612c5157612c516137bf565b600480549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612cac57612cac6137bf565b0490508263ffffffff1681026005600082825401925050819055505050505b6007805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6006546000908015612f4b57612dd96110256dffffffffffffffffffffffffffff8087169088166136c3565b915080821115612f4b5760408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691612e8091906135a9565b600060405180830381855afa9150503d8060008114612ebb576040519150601f19603f3d011682016040523d82523d6000602084013e612ec0565b606091505b50915050600081806020019051810190612eda9190613546565b905060006127108583612eed8783613700565b612ef7908a6136c3565b612f0191906136c3565b612f0b91906136af565b612f1591906136af565b90508015612f4757612f477f00000000000000000000000000000000000000000000000000000000000000008261316b565b5050505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f88908490613700565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612ff557506000919050565b816001700100000000000000000000000000000000821061301b5760809190911c9060401b5b6801000000000000000082106130365760409190911c9060201b5b640100000000821061304d5760209190911c9060101b5b6201000082106130625760109190911c9060081b5b61010082106130765760089190911c9060041b5b601082106130895760049190911c9060021b5b600882106130955760011b5b60018185816130a6576130a66137bf565b048201901c905060018185816130be576130be6137bf565b048201901c905060018185816130d6576130d66137bf565b048201901c905060018185816130ee576130ee6137bf565b048201901c90506001818581613106576131066137bf565b048201901c9050600181858161311e5761311e6137bf565b048201901c90506001818581613136576131366137bf565b048201901c9050600081858161314e5761314e6137bf565b04905080821061315e5780613160565b815b93505050505b919050565b8060008082825461317c9190613697565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612fda565b8035801515811461316657600080fd5b6000602082840312156131fd57600080fd5b81356132088161384c565b9392505050565b60006020828403121561322157600080fd5b81516132088161384c565b60008060006060848603121561324157600080fd5b833561324c8161384c565b9250602084013561325c8161384c565b915061326a604085016131db565b90509250925092565b600080600080600060a0868803121561328b57600080fd5b85356132968161384c565b945060208601356132a68161384c565b93506132b4604087016131db565b925060608601359150608086013567ffffffffffffffff808211156132d857600080fd5b818801915088601f8301126132ec57600080fd5b8135818111156132fe576132fe61381d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133445761334461381d565b816040528281528b602084870101111561335d57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561339557600080fd5b82356133a08161384c565b91506133ae602084016131db565b90509250929050565b600080604083850312156133ca57600080fd5b82356133d58161384c565b946020939093013593505050565b600080604083850312156133f657600080fd5b82356134018161384c565b915060208301356134118161384c565b809150509250929050565b60008060006060848603121561343157600080fd5b833561343c8161384c565b9250602084013561344c8161384c565b929592945050506040919091013590565b600080600080600080600060e0888a03121561347857600080fd5b87356134838161384c565b965060208801356134938161384c565b95506040880135945060608801359350608088013560ff811681146134b757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080602083850312156134e757600080fd5b823567ffffffffffffffff808211156134ff57600080fd5b818501915085601f83011261351357600080fd5b81358181111561352257600080fd5b86602082850101111561353457600080fd5b60209290920196919550909350505050565b60006020828403121561355857600080fd5b5051919050565b60008151808452613577816020860160208601613717565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516135bb818460208701613717565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561361357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016135e1565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613677578151805173ffffffffffffffffffffffffffffffffffffffff16855286015186850152928401929085019060010161363c565b5091979650505050505050565b602081526000613208602083018461355f565b600082198211156136aa576136aa613790565b500190565b6000826136be576136be6137bf565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136fb576136fb613790565b500290565b60008282101561371257613712613790565b500390565b60005b8381101561373257818101518382015260200161371a565b838111156128345750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561377557613775613790565b5060010190565b60008261378b5761378b6137bf565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461386e57600080fd5b5056fea26469706673582212207b60ff0000de759e9042cd9a3128942427896e2b352ae0dcfea1548140642af064736f6c63430008060033a26469706673582212201024cf1e52bdcd76c7a4cb603a2e8675923948e8060c4d3d670c5a69d208e46b64736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200007b5760003560e01c80635bc93d6c11620000565780635bc93d6c146200011c57806371a258121462000172578063cf58879a146200019857600080fd5b80630d617dfa1462000080578063169c4cef14620000ee57806327c3cae11462000105575b600080fd5b620000c462000091366004620008b7565b805160208183018101805160018252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620000c4620000ff36600462000826565b620001c0565b620000c462000116366004620008b7565b62000213565b620001636200012d366004620007e8565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000e5565b62000189620001833660046200086c565b62000319565b604051620000e59190620009e1565b620000c47f000000000000000000000000000000000000000000000000000000000000000081565b60006020528260005260406000206020528160005260406000208181548110620001e957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60008060008060008580602001905181019062000231919062000788565b93509350935093508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115620002bf576040805173ffffffffffffffffffffffffffffffffffffffff808616602083015286169181019190915260608101839052811515608082015292939260a00160405160208183030381529060405295505b6200030f848460405180602001620002d7906200077a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040528962000453565b9695505050505050565b606062000327838362000aae565b67ffffffffffffffff81111562000342576200034262000b95565b6040519080825280602002602001820160405280156200036c578160200160208202803683370190505b50905060005b828410156200044a5773ffffffffffffffffffffffffffffffffffffffff808716600090815260208181526040808320938916835292905220805485908110620003c057620003c062000b66565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000400576200040062000b66565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620004318162000afb565b9450508080620004419062000afb565b91505062000372565b50949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161062000516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f50616972506f6f6c4465706c6f7965723a20494e56414c49445f544f4b454e5f60448201527f4f5244455200000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660018360405162000540919062000990565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614620005f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f50616972506f6f6c4465706c6f7965723a20504f4f4c5f414c52454144595f4460448201527f45504c4f5945440000000000000000000000000000000000000000000000000060648201526084016200050d565b600082805190602001209050600084847f00000000000000000000000000000000000000000000000000000000000000006040516020016200063992919062000a3d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052620006779291602001620009ae565b6040516020818303038152906040529050818151602083016000f59250823b620006a057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8781166000908152602081815260408083208a8516845282528083208054600180820183559185529290932090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169387169390931790925590518491906200072490879062000990565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050949350505050565b6140068062000beb83390190565b600080600080608085870312156200079f57600080fd5b8451620007ac8162000bc4565b6020860151909450620007bf8162000bc4565b6040860151606087015191945092508015158114620007dd57600080fd5b939692955090935050565b60008060408385031215620007fc57600080fd5b8235620008098162000bc4565b915060208301356200081b8162000bc4565b809150509250929050565b6000806000606084860312156200083c57600080fd5b8335620008498162000bc4565b925060208401356200085b8162000bc4565b929592945050506040919091013590565b600080600080608085870312156200088357600080fd5b8435620008908162000bc4565b93506020850135620008a28162000bc4565b93969395505050506040820135916060013590565b600060208284031215620008ca57600080fd5b813567ffffffffffffffff80821115620008e357600080fd5b818401915084601f830112620008f857600080fd5b8135818111156200090d576200090d62000b95565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171562000956576200095662000b95565b816040528281528760208487010111156200097057600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008251620009a481846020870162000ac8565b9190910192915050565b60008351620009c281846020880162000ac8565b835190830190620009d881836020880162000ac8565b01949350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000a3157835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101620009fd565b50909695505050505050565b604081526000835180604084015262000a5e81606085016020880162000ac8565b73ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60008282101562000ac35762000ac362000b37565b500390565b60005b8381101562000ae557818101518382015260200162000acb565b8381111562000af5576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000b305762000b3062000b37565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000be757600080fd5b5056fe6101806040523480156200001257600080fd5b50604051620040063803806200400683398101604081905262000035916200049e565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c001604051602081830303815290604052805190602001206080818152505050600080600080858060200190518101906200013291906200043e565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b612710821115620002325760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b0316634da3182760e01b17905290516000916001600160a01b038816916200027691906200056b565b600060405180830381855afa9150503d8060008114620002b3576040519150601f19603f3d011682016040523d82523d6000602084013e620002b8565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b038916916200030191906200056b565b600060405180830381855afa9150503d80600081146200033e576040519150601f19603f3d011682016040523d82523d6000602084013e62000343565b606091505b506001600160601b0319606089811b82166101405288901b166101605260a086905291506200037790508461271062000589565b60c052815162000391908301602090810190840162000417565b60601b6001600160601b031916610100528051620003b9906020908301810190830162000417565b6001600160601b0319606091821b811660e0529088901b166101205260016008558215620003f757600780546001600160e01b0316600160e01b1790555b505050505050505062000611565b80516200041281620005f8565b919050565b6000602082840312156200042a57600080fd5b81516200043781620005f8565b9392505050565b600080600080608085870312156200045557600080fd5b84516200046281620005f8565b60208601519094506200047581620005f8565b60408601516060870151919450925080151581146200049357600080fd5b939692955090935050565b60008060408385031215620004b257600080fd5b82516001600160401b0380821115620004ca57600080fd5b818501915085601f830112620004df57600080fd5b815181811115620004f457620004f4620005e2565b604051601f8201601f19908116603f011681019083821181831017156200051f576200051f620005e2565b816040528281528860208487010111156200053957600080fd5b6200054c836020830160208801620005af565b8096505050505050620005626020840162000405565b90509250929050565b600082516200057f818460208701620005af565b9190910192915050565b600082821015620005aa57634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015620005cc578181015183820152602001620005b2565b83811115620005dc576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200060e57600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6138a76200075f6000396000818161057a0152818161075a015281816108910152818161093f01528181610fcc015281816110e20152818161131b01528181611396015281816115ff01528181611e8b01528181611f2b01528181611f6c015261297c015260008181610308015281816106d601528181610a2401528181610b5b01528181610fa001528181611079015281816112c60152818161144f0152818161159101528181611bef01528181612068015261287d015260008181610553015281816117d70152612e550152600081816103d3015281816125e50152818161275b015281816128410152612a250152600081816102bc0152612f22015260006124e7015260006103fa0152600081816103ac01526121e401526138a76000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a69840a8116100a2578063cf58879a11610071578063cf58879a1461054e578063d21220a714610575578063d505accf1461059c578063dd62ed3e146105b157600080fd5b8063a69840a8146104ee578063a8f1f52e14610515578063a9059cbb14610528578063af8c09bf1461053b57600080fd5b80637464fc3d116100de5780637464fc3d146104765780637ba0e2e71461047f5780637ecebe001461049257806395d89b41146104b257600080fd5b80635a3d549314610425578063627dd56a1461042e57806367e4ac2c1461044157806370a082311461045657600080fd5b806323b872dd116101875780633644e515116101565780633644e515146103a75780634da31827146103ce57806354cf2aeb146103f55780635909c0d51461041c57600080fd5b806323b872dd146103335780632a07b6c71461034657806330adf81f14610366578063313ce5671461038d57600080fd5b8063095ea7b3116101c3578063095ea7b3146102945780630c0a0cd2146102b75780630dfe16811461030357806318160ddd1461032a57600080fd5b8063053da1c8146101ea57806306fdde03146102105780630902f1ac14610259575b600080fd5b6101fd6101f83660046134d4565b6105dc565b6040519081526020015b60405180910390f35b61024c6040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b6040516102079190613684565b610261610c17565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff1690820152606001610207565b6102a76102a23660046133b7565b610c80565b6040519015158152602001610207565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610207565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd60005481565b6102a761034136600461341c565b610cf9565b6103596103543660046134d4565b610e45565b604051610207919061361f565b6101fd7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610395601281565b60405160ff9091168152602001610207565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6101fd60045481565b6101fd60055481565b6101fd61043c3660046134d4565b6111c5565b61044961156f565b60405161020791906135c5565b6101fd6104643660046131eb565b60016020526000908152604090205481565b6101fd60065481565b6101fd61048d3660046134d4565b61166e565b6101fd6104a03660046131eb565b60036020526000908152604090205481565b61024c6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6101fd7f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b6101fd6105233660046134d4565b611b78565b6102a76105363660046133b7565b611cab565b6101fd6105493660046134d4565b611d30565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6105af6105aa36600461345d565b61212b565b005b6101fd6105bf3660046133e3565b600260209081526000928352604080842090915290825290205481565b600060085460011461064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260085560008080808061066687890189613273565b9450945094509450945060008060006106ce6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561093d5761075385846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166124df565b98506107817f00000000000000000000000000000000000000000000000000000000000000008a8989612542565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107bd908790600401613684565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506000806107fa61283a565b90925090508661081a6dffffffffffffffffffffffffffff871684613700565b1015610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610646565b61088f8282878787612ab2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161092e929190918252602082015260400190565b60405180910390a45050610c03565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610646565b610a1d85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166124df565b9850610a4b7f00000000000000000000000000000000000000000000000000000000000000008a8989612542565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610a87908790600401613684565b600060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b50505050600080610ac461283a565b909250905086610ae46dffffffffffffffffffffffffffff861683613700565b1015610b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e000000000000000000006044820152606401610646565b610b598282878787612ab2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610bf8929190918252602082015260400190565b60405180910390a450505b505060016008555094979650505050505050565b6000806000610c756007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ce89086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610d965773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610d90908490613700565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610dcb908490613700565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e339086815260200190565b60405180910390a35060019392505050565b6060600854600114610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b6002600855600080610ec784860186613382565b915091506000806000610f296007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f3a61283a565b60008054308252600160205260409091205492945090925090610f5e878784612dad565b50600082610f6c86846136c3565b610f7691906136af565b9050600083610f8586856136c3565b610f8f91906136af565b9050610f9b3084612f53565b610fc77f0000000000000000000000000000000000000000000000000000000000000000838d8d612542565b610ff37f0000000000000000000000000000000000000000000000000000000000000000828d8d612542565b610ffd8287613700565b95506110098186613700565b945061101886868b8b8b612ab2565b61102a61102586886136c3565b612fe6565b6006556040805160028082526060820190925290816020015b6040805180820190915260008082526020820152815260200190600190039081611043579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110ca576110ca6137ee565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c600181518110611133576111336137ee565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111a6929190918252602082015260400190565b60405180910390a35050600160085550979a9950505050505050505050565b6000600854600114611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b6002600855600080806112488587018761322c565b92509250925060008060006112ac6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112bd61283a565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561139457507f00000000000000000000000000000000000000000000000000000000000000006113546dffffffffffffffffffffffffffff881685613700565b915061138182886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff166124df565b9a5061138d8b84613700565b92506114d7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e000000000000000000000000006044820152606401610646565b506007547f00000000000000000000000000000000000000000000000000000000000000009061149b906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1684613700565b91506114c882876dffffffffffffffffffffffffffff16896dffffffffffffffffffffffffffff166124df565b9a506114d48b85613700565b93505b6114e3818c8b8b612542565b6114f08484898989612ab2565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610bf8929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115c3576115c36137ee565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110611631576116316137ee565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006008546001146116dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b600260085560006116ef838501856131eb565b9050600080600061174f6007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b92509250925060008061176061283a565b6000549193509150611773868683612dad565b5060006117906dffffffffffffffffffffffffffff881685613700565b905060006117ae6dffffffffffffffffffffffffffff881685613700565b905060006117bf61102586886136c3565b905083611a41576117d360006103e861316b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561183b57600080fd5b505afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611873919061320f565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119ae578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d957600080fd5b505afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190613546565b9b5060008c11801561194357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c14155b6119a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c495155494449545900000000000000000000006044820152606401610646565b611a3b565b73ffffffffffffffffffffffffffffffffffffffff811615611a2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f52000000000000000000000000000000000000006044820152606401610646565b611a386103e883613700565b9b505b50611a89565b6000611a636110256dffffffffffffffffffffffffffff808c16908d166136c3565b90508085611a718285613700565b611a7b91906136c3565b611a8591906136af565b9b50505b60008b11611af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606401610646565b611afd8a8c61316b565b611b0a86868b8b8b612ab2565b6006819055604080518481526020810184905273ffffffffffffffffffffffffffffffffffffffff8c169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a910160405180910390a35050600160085550969998505050505050505050565b60008080611b88848601866133b7565b91509150600080611be86007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611c7357611c6c83836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166124df565b9450611ca1565b611c9e83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166124df565b94505b5050505092915050565b33600090815260016020526040812080548391908390611ccc908490613700565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ce89086815260200190565b6000600854600114611d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610646565b600260085560008080611db38587018761322c565b9250925092506000806000611e176007546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611e2861283a565b60008054308252600160205260409091205492945090925090611e4c878784612dad565b50600082611e5a86846136c3565b611e6491906136af565b9050600083611e7386856136c3565b611e7d91906136af565b9050611e893084612f53565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611f6a57611f1a82611efb816dffffffffffffffffffffffffffff8d16613700565b611f15846dffffffffffffffffffffffffffff8d16613700565b6124df565b611f249082613697565b9050611f527f0000000000000000000000000000000000000000000000000000000000000000828d8d612542565b611f5c8186613700565b9450809c50600091506120a3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161461201f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e0000000000000000000000006044820152606401610646565b6120578161203d816dffffffffffffffffffffffffffff8c16613700565b611f15856dffffffffffffffffffffffffffff8e16613700565b6120619083613697565b915061208f7f0000000000000000000000000000000000000000000000000000000000000000838d8d612542565b6120998287613700565b9550819c50600090505b6120b086868b8b8b612ab2565b6120bd61102586886136c3565b600655604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600160085550989b9a5050505050505050505050565b428410156121bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f54726964656e7445524332303a205045524d49545f444541444c494e455f455860448201527f50495245440000000000000000000000000000000000000000000000000000006064820152608401610646565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b918761223683613743565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016122d79291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612360573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906123db57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f54726964656e7445524332303a20494e56414c49445f5045524d49545f53494760448201527f4e415455524500000000000000000000000000000000000000000000000000006064820152608401610646565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b60008061250c7f0000000000000000000000000000000000000000000000000000000000000000866136c3565b90508061251b612710866136c3565b6125259190613697565b61252f84836136c3565b61253991906136af565b95945050505050565b80156126c4576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f000000000000000000000000000000000000000000000000000000000000000090911691612611916135a9565b6000604051808303816000865af19150503d806000811461264e576040519150601f19603f3d011682016040523d82523d6000602084013e612653565b606091505b50509050806126be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c454400000000000000000000000000000000006044820152606401610646565b50612834565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f00000000000000000000000000000000000000000000000000000000000000001691612785916135a9565b6000604051808303816000865af19150503d80600081146127c2576040519150601f19603f3d011682016040523d82523d6000602084013e6127c7565b606091505b5050905080612832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610646565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f0000000000000000000000000000000000000000000000000000000000000000306040516024016128d092919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161291e91906135a9565b600060405180830381855afa9150503d8060008114612959576040519150601f19603f3d011682016040523d82523d6000602084013e61295e565b606091505b50915050808060200190518101906129769190613546565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612a5291906135a9565b600060405180830381855afa9150503d8060008114612a8d576040519150601f19603f3d011682016040523d82523d6000602084013e612a92565b606091505b5091505080806020019051810190612aaa9190613546565b925050509091565b6dffffffffffffffffffffffffffff8511801590612ade57506dffffffffffffffffffffffffffff8411155b612b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610646565b6007547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612bc857600780546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612d6d565b6000612bd96401000000004261377c565b90508163ffffffff168163ffffffff1614158015612c0657506dffffffffffffffffffffffffffff841615155b15612ccb5781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612c5157612c516137bf565b600480549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612cac57612cac6137bf565b0490508263ffffffff1681026005600082825401925050819055505050505b6007805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6006546000908015612f4b57612dd96110256dffffffffffffffffffffffffffff8087169088166136c3565b915080821115612f4b5760408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691612e8091906135a9565b600060405180830381855afa9150503d8060008114612ebb576040519150601f19603f3d011682016040523d82523d6000602084013e612ec0565b606091505b50915050600081806020019051810190612eda9190613546565b905060006127108583612eed8783613700565b612ef7908a6136c3565b612f0191906136c3565b612f0b91906136af565b612f1591906136af565b90508015612f4757612f477f00000000000000000000000000000000000000000000000000000000000000008261316b565b5050505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f88908490613700565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612ff557506000919050565b816001700100000000000000000000000000000000821061301b5760809190911c9060401b5b6801000000000000000082106130365760409190911c9060201b5b640100000000821061304d5760209190911c9060101b5b6201000082106130625760109190911c9060081b5b61010082106130765760089190911c9060041b5b601082106130895760049190911c9060021b5b600882106130955760011b5b60018185816130a6576130a66137bf565b048201901c905060018185816130be576130be6137bf565b048201901c905060018185816130d6576130d66137bf565b048201901c905060018185816130ee576130ee6137bf565b048201901c90506001818581613106576131066137bf565b048201901c9050600181858161311e5761311e6137bf565b048201901c90506001818581613136576131366137bf565b048201901c9050600081858161314e5761314e6137bf565b04905080821061315e5780613160565b815b93505050505b919050565b8060008082825461317c9190613697565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612fda565b8035801515811461316657600080fd5b6000602082840312156131fd57600080fd5b81356132088161384c565b9392505050565b60006020828403121561322157600080fd5b81516132088161384c565b60008060006060848603121561324157600080fd5b833561324c8161384c565b9250602084013561325c8161384c565b915061326a604085016131db565b90509250925092565b600080600080600060a0868803121561328b57600080fd5b85356132968161384c565b945060208601356132a68161384c565b93506132b4604087016131db565b925060608601359150608086013567ffffffffffffffff808211156132d857600080fd5b818801915088601f8301126132ec57600080fd5b8135818111156132fe576132fe61381d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133445761334461381d565b816040528281528b602084870101111561335d57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561339557600080fd5b82356133a08161384c565b91506133ae602084016131db565b90509250929050565b600080604083850312156133ca57600080fd5b82356133d58161384c565b946020939093013593505050565b600080604083850312156133f657600080fd5b82356134018161384c565b915060208301356134118161384c565b809150509250929050565b60008060006060848603121561343157600080fd5b833561343c8161384c565b9250602084013561344c8161384c565b929592945050506040919091013590565b600080600080600080600060e0888a03121561347857600080fd5b87356134838161384c565b965060208801356134938161384c565b95506040880135945060608801359350608088013560ff811681146134b757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080602083850312156134e757600080fd5b823567ffffffffffffffff808211156134ff57600080fd5b818501915085601f83011261351357600080fd5b81358181111561352257600080fd5b86602082850101111561353457600080fd5b60209290920196919550909350505050565b60006020828403121561355857600080fd5b5051919050565b60008151808452613577816020860160208601613717565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516135bb818460208701613717565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561361357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016135e1565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613677578151805173ffffffffffffffffffffffffffffffffffffffff16855286015186850152928401929085019060010161363c565b5091979650505050505050565b602081526000613208602083018461355f565b600082198211156136aa576136aa613790565b500190565b6000826136be576136be6137bf565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136fb576136fb613790565b500290565b60008282101561371257613712613790565b500390565b60005b8381101561373257818101518382015260200161371a565b838111156128345750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561377557613775613790565b5060010190565b60008261378b5761378b6137bf565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461386e57600080fd5b5056fea26469706673582212207b60ff0000de759e9042cd9a3128942427896e2b352ae0dcfea1548140642af064736f6c63430008060033a26469706673582212201024cf1e52bdcd76c7a4cb603a2e8675923948e8060c4d3d670c5a69d208e46b64736f6c63430008060033",
  "devdoc": {
    "author": "Mudit Gupta.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident exchange Constant Product Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7760,
        "contract": "contracts/pool/ConstantProductPoolFactory.sol:ConstantProductPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 7764,
        "contract": "contracts/pool/ConstantProductPoolFactory.sol:ConstantProductPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}