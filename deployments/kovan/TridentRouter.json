{
  "address": "0xD3b6D5aad58d7f427D54F3F6b903E374a503cE34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "_bento",
          "type": "address"
        },
        {
          "internalType": "contract MasterDeployer",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "native",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITridentRouter.TokenInput[]",
          "name": "tokenInput",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityLazy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "batch",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bento",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TokenAmount[]",
          "name": "minWithdrawals",
          "type": "tuple[]"
        }
      ],
      "name": "burnLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minWithdrawal",
          "type": "uint256"
        }
      ],
      "name": "burnLiquiditySingle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "native",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.InitialPath[]",
              "name": "initialPath",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "balancePercentage",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.PercentagePath[]",
              "name": "percentagePath",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrapBento",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "minAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITridentRouter.Output[]",
              "name": "output",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ComplexPathParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "complexPath",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.Path[]",
              "name": "path",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITridentRouter.Path[]",
          "name": "path",
          "type": "tuple[]"
        }
      ],
      "name": "exactInputLazy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingleWithNativeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.Path[]",
              "name": "path",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputWithNativeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract MasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitThis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitThisAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweepBentoBoxToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweepNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tridentMintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tridentSwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrapWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04809aa5c2998b7b8945046e1a9e528b2215107038242c0acb575a75415056d8",
  "receipt": {
    "to": null,
    "from": "0x58B4B6951e9174F153635574076241315D7d3503",
    "contractAddress": "0xD3b6D5aad58d7f427D54F3F6b903E374a503cE34",
    "transactionIndex": 2,
    "gasUsed": "4218236",
    "logsBloom": "0x
    "blockHash": "0x3d4e7325f647a2860da93bdc3061b75593cb25ca177ed10ccb5cd2b6580548a5",
    "transactionHash": "0x04809aa5c2998b7b8945046e1a9e528b2215107038242c0acb575a75415056d8",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27205251,
        "transactionHash": "0x04809aa5c2998b7b8945046e1a9e528b2215107038242c0acb575a75415056d8",
        "address": "0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0",
        "topics": [
          "0xdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb",
          "0x000000000000000000000000d3b6d5aad58d7f427d54f3f6b903e374a503ce34"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x3d4e7325f647a2860da93bdc3061b75593cb25ca177ed10ccb5cd2b6580548a5"
      }
    ],
    "blockNumber": 27205251,
    "cumulativeGasUsed": "4301194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0",
    "0xB8ef8579EEBDCCCf69305418E49a3A545301b393",
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C"
  ],
  "solcInputHash": "54eedb95824944b9250147be5a2e4035",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bento\",\"type\":\"address\"},{\"internalType\":\"contract MasterDeployer\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITridentRouter.TokenInput[]\",\"name\":\"tokenInput\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLiquidityLazy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bento\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TokenAmount[]\",\"name\":\"minWithdrawals\",\"type\":\"tuple[]\"}],\"name\":\"burnLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minWithdrawal\",\"type\":\"uint256\"}],\"name\":\"burnLiquiditySingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.InitialPath[]\",\"name\":\"initialPath\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"balancePercentage\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.PercentagePath[]\",\"name\":\"percentagePath\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapBento\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITridentRouter.Output[]\",\"name\":\"output\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ComplexPathParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"complexPath\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"name\":\"exactInputLazy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingleWithNativeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputWithNativeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract MasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitThisAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepBentoBoxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tridentMintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tridentSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,bool,uint256)[],address,uint256,bytes)\":{\"params\":{\"data\":\"Data required by the pool to add liquidity.\",\"minLiquidity\":\"Minimum output liquidity - caps slippage.\",\"pool\":\"Pool address to add liquidity to.\",\"tokenInput\":\"Token address and amount to add as liquidity.\"}},\"addLiquidityLazy(address,uint256,bytes)\":{\"details\":\"The input tokens are sent to the pool during the callback.\"},\"batch(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from this function.\",\"params\":{\"data\":\"ABI-encoded params for each of the calls to make to this contract.\"},\"returns\":{\"results\":\"The results from each of the calls passed in via `data`.\"}},\"burnLiquidity(address,uint256,bytes,(address,uint256)[])\":{\"params\":{\"data\":\"Data required by the pool to burn liquidity.\",\"liquidity\":\"Amount of liquidity tokens to burn.\",\"minWithdrawals\":\"Minimum amount of `bento` tokens to be returned.\",\"pool\":\"Pool address.\"}},\"burnLiquiditySingle(address,uint256,bytes,uint256)\":{\"details\":\"The tokens are swapped automatically and the output is in a single token.\",\"params\":{\"data\":\"Data required by the pool to burn liquidity.\",\"liquidity\":\"Amount of liquidity tokens to burn.\",\"minWithdrawal\":\"Minimum amount of tokens to be returned.\",\"pool\":\"Pool address.\"}},\"complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))\":{\"details\":\"This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\",\"params\":{\"params\":\"This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\"}},\"exactInput((address,uint256,uint256,(address,bytes)[]))\":{\"details\":\"Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\",\"params\":{\"params\":\"This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps.\"}},\"exactInputLazy(uint256,(address,bytes)[])\":{\"details\":\"Ensure that the pools are trusted before calling this function. The pools can steal users' tokens. This function will unlikely be used in production but it shows how to use callbacks. One use case will be arbitrage.\",\"params\":{\"amountOutMinimum\":\"Minimum amount of token B after the swap.\",\"path\":\"Addresses of the pools and data required by the pools for the swaps.\"}},\"exactInputSingle((uint256,uint256,address,address,bytes))\":{\"details\":\"Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\",\"params\":{\"params\":\"This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap.\"}},\"exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))\":{\"details\":\"Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\",\"params\":{\"params\":\"This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap.\"}},\"exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))\":{\"details\":\"Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\",\"params\":{\"params\":\"This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps.\"}},\"permitThis(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Token amount to grant spending right over.\",\"deadline\":\"Termination for signed approval (UTC timestamp in seconds).\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"token\":\"Address of ERC-20 token.\",\"v\":\"The recovery byte of the signature.\"}},\"permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"expiry\":\"Termination for signed approval - UTC timestamp in seconds.\",\"nonce\":\"Token owner's nonce - increases at each call to {permit}.\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"token\":\"Address of ERC-20 token.\",\"v\":\"The recovery byte of the signature.\"}}},\"stateVariables\":{\"cachedMsgSender\":{\"details\":\"Used to ensure that `tridentSwapCallback` is called only by the authorized address. These are set when someone calls a flash swap and reset afterwards.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,bool,uint256)[],address,uint256,bytes)\":{\"notice\":\"Add liquidity to a pool.\"},\"addLiquidityLazy(address,uint256,bytes)\":{\"notice\":\"Add liquidity to a pool using callbacks - same as `addLiquidity`, but now with callbacks.\"},\"batch(bytes[])\":{\"notice\":\"Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later.\"},\"bento()\":{\"notice\":\"BentoBox token vault.\"},\"burnLiquidity(address,uint256,bytes,(address,uint256)[])\":{\"notice\":\"Burn liquidity tokens to get back `bento` tokens.\"},\"burnLiquiditySingle(address,uint256,bytes,uint256)\":{\"notice\":\"Burn liquidity tokens to get back `bento` tokens.\"},\"complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))\":{\"notice\":\"Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\"},\"exactInput((address,uint256,uint256,(address,bytes)[]))\":{\"notice\":\"Swaps token A to token B indirectly by using multiple hops.\"},\"exactInputLazy(uint256,(address,bytes)[])\":{\"notice\":\"Swaps token A to token B by using callbacks.\"},\"exactInputSingle((uint256,uint256,address,address,bytes))\":{\"notice\":\"Swaps token A to token B directly. Swaps are done on `bento` tokens.\"},\"exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))\":{\"notice\":\"Swaps token A to token B directly. It's the same as `exactInputSingle` except it takes raw ERC-20 tokens from the users and deposits them into `bento`.\"},\"exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))\":{\"notice\":\"Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except it takes raw ERC-20 tokens from the users and deposits them into `bento`.\"},\"permitThis(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Provides EIP-2612 signed approval for this contract to spend user tokens.\"},\"permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Provides DAI-derived signed approval for this contract to spend user tokens.\"},\"refundETH()\":{\"notice\":\"Recover mistakenly sent ETH.\"},\"sweepBentoBoxToken(address,uint256,address)\":{\"notice\":\"Recover mistakenly sent `bento` tokens.\"},\"sweepNativeToken(address,uint256,address)\":{\"notice\":\"Recover mistakenly sent ERC-20 tokens.\"},\"tridentMintCallback(bytes)\":{\"notice\":\"Can be used by the pool 'mint' functionality to take tokens from the user.\"},\"tridentSwapCallback(bytes)\":{\"notice\":\"Used by the pool 'flashSwap' functionality to take input tokens from the user.\"},\"unwrapWETH(uint256,address)\":{\"notice\":\"Unwrap this contract's `wETH` into ETH\"}},\"notice\":\"Router contract that helps in swapping across Trident pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TridentRouter.sol\":\"TridentRouter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/TridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/ITridentRouter.sol\\\";\\nimport \\\"./utils/TridentHelper.sol\\\";\\nimport \\\"./deployer/MasterDeployer.sol\\\";\\n\\n//\\n\\n/// @notice Router contract that helps in swapping across Trident pools.\\ncontract TridentRouter is ITridentRouter, TridentHelper {\\n    /// @notice BentoBox token vault.\\n    IBentoBoxMinimal public immutable bento;\\n    MasterDeployer public immutable masterDeployer;\\n\\n    /// @dev Used to ensure that `tridentSwapCallback` is called only by the authorized address.\\n    /// These are set when someone calls a flash swap and reset afterwards.\\n    address internal cachedMsgSender;\\n    address internal cachedPool;\\n\\n    mapping(address => bool) internal whitelistedPools;\\n\\n    constructor(\\n        IBentoBoxMinimal _bento,\\n        MasterDeployer _masterDeployer,\\n        address _wETH\\n    ) TridentHelper(_wETH) {\\n        _bento.registerProtocol();\\n        bento = _bento;\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == wETH);\\n    }\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingle(ExactInputSingleParams calldata params) public payable returns (uint256 amountOut) {\\n        // @dev Prefund the pool with token A.\\n        bento.transfer(params.tokenIn, msg.sender, params.pool, params.amountIn);\\n        // @dev Trigger the swap in the pool.\\n        amountOut = IPool(params.pool).swap(params.data);\\n        // @dev Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        require(amountOut >= params.amountOutMinimum, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInput(ExactInputParams calldata params) public payable returns (uint256 amountOut) {\\n        // @dev Pay the first pool directly.\\n        bento.transfer(params.tokenIn, msg.sender, params.path[0].pool, params.amountIn);\\n        // @dev Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        for (uint256 i; i < params.path.length; i++) {\\n            // We don't necessarily need this check but saving users from themseleves.\\n            isWhiteListed(params.path[i].pool);\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // @dev Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        require(amountOut >= params.amountOutMinimum, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Swaps token A to token B by using callbacks.\\n    /// @param path Addresses of the pools and data required by the pools for the swaps.\\n    /// @param amountOutMinimum Minimum amount of token B after the swap.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    /// This function will unlikely be used in production but it shows how to use callbacks. One use case will be arbitrage.\\n    function exactInputLazy(uint256 amountOutMinimum, Path[] calldata path) public payable returns (uint256 amountOut) {\\n        // @dev Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        for (uint256 i; i < path.length; i++) {\\n            isWhiteListed(path[i].pool);\\n            // @dev The cached `msg.sender` is used as the funder when the callback happens.\\n            cachedMsgSender = msg.sender;\\n            // @dev The cached pool must be the address that calls the callback.\\n            cachedPool = path[i].pool;\\n            amountOut = IPool(path[i].pool).flashSwap(path[i].data);\\n        }\\n        // @dev Resets the `cachedPool` to get a refund.\\n        // `1` is used as the default value to avoid the storage slot being released.\\n        cachedMsgSender = address(1);\\n        cachedPool = address(1);\\n        require(amountOut >= amountOutMinimum, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Swaps token A to token B directly. It's the same as `exactInputSingle` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingleWithNativeToken(ExactInputSingleParams calldata params) public payable returns (uint256 amountOut) {\\n        // @dev Deposits the native ERC-20 token from the user into the pool's `bento`.\\n        _depositToBentoBox(params.tokenIn, params.pool, params.amountIn);\\n        // @dev Trigger the swap in the pool.\\n        amountOut = IPool(params.pool).swap(params.data);\\n        // @dev Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        require(amountOut >= params.amountOutMinimum, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInputWithNativeToken(ExactInputParams calldata params) public payable returns (uint256 amountOut) {\\n        // @dev Deposits the native ERC-20 token from the user into the pool's `bento`.\\n        _depositToBentoBox(params.tokenIn, params.path[0].pool, params.amountIn);\\n        // @dev Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        for (uint256 i; i < params.path.length; i++) {\\n            isWhiteListed(params.path[i].pool);\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // @dev Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        require(amountOut >= params.amountOutMinimum, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function complexPath(ComplexPathParams calldata params) public payable {\\n        // @dev Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        for (uint256 i; i < params.initialPath.length; i++) {\\n            if (params.initialPath[i].native) {\\n                _depositToBentoBox(params.initialPath[i].tokenIn, params.initialPath[i].pool, params.initialPath[i].amount);\\n            } else {\\n                bento.transfer(params.initialPath[i].tokenIn, msg.sender, params.initialPath[i].pool, params.initialPath[i].amount);\\n            }\\n            isWhiteListed(params.initialPath[i].pool);\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // @dev Do all the middle swaps. Input comes from previous pools - output goes to following pools.\\n        for (uint256 i; i < params.percentagePath.length; i++) {\\n            uint256 balanceShares = bento.balanceOf(params.percentagePath[i].tokenIn, address(this));\\n            uint256 transferShares = (balanceShares * params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bento.transfer(params.percentagePath[i].tokenIn, address(this), params.percentagePath[i].pool, transferShares);\\n            isWhiteListed(params.percentagePath[i].pool);\\n            IPool(params.percentagePath[i].pool).swap(params.percentagePath[i].data);\\n        }\\n        // @dev Do all the final swaps. Input comes from previous pools - output goes to the user.\\n        for (uint256 i; i < params.output.length; i++) {\\n            uint256 balanceShares = bento.balanceOf(params.output[i].token, address(this));\\n            require(balanceShares >= params.output[i].minAmount, \\\"TOO_LITTLE_RECEIVED\\\");\\n            if (params.output[i].unwrapBento) {\\n                bento.withdraw(params.output[i].token, address(this), params.output[i].to, 0, balanceShares);\\n            } else {\\n                bento.transfer(params.output[i].token, address(this), params.output[i].to, balanceShares);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add liquidity to a pool.\\n    /// @param tokenInput Token address and amount to add as liquidity.\\n    /// @param pool Pool address to add liquidity to.\\n    /// @param minLiquidity Minimum output liquidity - caps slippage.\\n    /// @param data Data required by the pool to add liquidity.\\n    function addLiquidity(\\n        TokenInput[] memory tokenInput,\\n        address pool,\\n        uint256 minLiquidity,\\n        bytes calldata data\\n    ) public payable returns (uint256 liquidity) {\\n        isWhiteListed(pool);\\n        // @dev Send all input tokens to the pool.\\n        for (uint256 i; i < tokenInput.length; i++) {\\n            if (tokenInput[i].native) {\\n                _depositToBentoBox(tokenInput[i].token, pool, tokenInput[i].amount);\\n            } else {\\n                bento.transfer(tokenInput[i].token, msg.sender, pool, tokenInput[i].amount);\\n            }\\n        }\\n        liquidity = IPool(pool).mint(data);\\n        require(liquidity >= minLiquidity, \\\"NOT_ENOUGH_LIQUIDITY_MINTED\\\");\\n    }\\n\\n    /// @notice Add liquidity to a pool using callbacks - same as `addLiquidity`, but now with callbacks.\\n    /// @dev The input tokens are sent to the pool during the callback.\\n    function addLiquidityLazy(\\n        address pool,\\n        uint256 minLiquidity,\\n        bytes calldata data\\n    ) public payable returns (uint256 liquidity) {\\n        isWhiteListed(pool);\\n        cachedMsgSender = msg.sender;\\n        cachedPool = pool;\\n        // @dev The pool must ensure that there's not too much slippage.\\n        liquidity = IPool(pool).mint(data);\\n        cachedMsgSender = address(1);\\n        cachedPool = address(1);\\n        require(liquidity >= minLiquidity, \\\"NOT_ENOUGH_LIQUIDITY_MINTED\\\");\\n    }\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawals Minimum amount of `bento` tokens to be returned.\\n    function burnLiquidity(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        IPool.TokenAmount[] memory minWithdrawals\\n    ) public {\\n        isWhiteListed(pool);\\n        safeTransferFrom(pool, msg.sender, pool, liquidity);\\n        IPool.TokenAmount[] memory withdrawnLiquidity = IPool(pool).burn(data);\\n        for (uint256 i; i < minWithdrawals.length; i++) {\\n            uint256 j;\\n            for (; j < withdrawnLiquidity.length; j++) {\\n                if (withdrawnLiquidity[j].token == minWithdrawals[i].token) {\\n                    require(withdrawnLiquidity[j].amount >= minWithdrawals[i].amount, \\\"TOO_LITTLE_RECEIVED\\\");\\n                    break;\\n                }\\n            }\\n            // @dev A token that is present in `minWithdrawals` is missing from `withdrawnLiquidity`.\\n            require(j < withdrawnLiquidity.length, \\\"INCORRECT_TOKEN_WITHDRAWN\\\");\\n        }\\n    }\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @dev The tokens are swapped automatically and the output is in a single token.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawal Minimum amount of tokens to be returned.\\n    function burnLiquiditySingle(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        uint256 minWithdrawal\\n    ) public {\\n        isWhiteListed(pool);\\n        // @dev Use 'liquidity = 0' for prefunding.\\n        safeTransferFrom(pool, msg.sender, pool, liquidity);\\n        uint256 withdrawn = IPool(pool).burnSingle(data);\\n        require(withdrawn >= minWithdrawal, \\\"TOO_LITTLE_RECEIVED\\\");\\n    }\\n\\n    /// @notice Used by the pool 'flashSwap' functionality to take input tokens from the user.\\n    function tridentSwapCallback(bytes calldata data) external {\\n        require(msg.sender == cachedPool, \\\"UNAUTHORIZED_CALLBACK\\\");\\n        TokenInput memory tokenInput = abi.decode(data, (TokenInput));\\n        // @dev Transfer the requested tokens to the pool.\\n        if (tokenInput.native) {\\n            _depositFromUserToBentoBox(tokenInput.token, cachedMsgSender, msg.sender, tokenInput.amount);\\n        } else {\\n            bento.transfer(tokenInput.token, cachedMsgSender, msg.sender, tokenInput.amount);\\n        }\\n        // @dev Resets the `msg.sender`'s authorization.\\n        cachedMsgSender = address(1);\\n    }\\n\\n    /// @notice Can be used by the pool 'mint' functionality to take tokens from the user.\\n    function tridentMintCallback(bytes calldata data) external {\\n        require(msg.sender == cachedPool, \\\"UNAUTHORIZED_CALLBACK\\\");\\n        TokenInput[] memory tokenInput = abi.decode(data, (TokenInput[]));\\n        // @dev Transfer the requested tokens to the pool.\\n        for (uint256 i; i < tokenInput.length; i++) {\\n            if (tokenInput[i].native) {\\n                _depositFromUserToBentoBox(tokenInput[i].token, cachedMsgSender, msg.sender, tokenInput[i].amount);\\n            } else {\\n                bento.transfer(tokenInput[i].token, cachedMsgSender, msg.sender, tokenInput[i].amount);\\n            }\\n        }\\n        // @dev Resets the `msg.sender`'s authorization.\\n        cachedMsgSender = address(1);\\n    }\\n\\n    /// @notice Recover mistakenly sent `bento` tokens.\\n    function sweepBentoBoxToken(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external {\\n        bento.transfer(token, address(this), recipient, amount);\\n    }\\n\\n    /// @notice Recover mistakenly sent ERC-20 tokens.\\n    function sweepNativeToken(\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external {\\n        safeTransfer(token, recipient, amount);\\n    }\\n\\n    /// @notice Recover mistakenly sent ETH.\\n    function refundETH() external payable {\\n        if (address(this).balance != 0) safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @notice Unwrap this contract's `wETH` into ETH\\n    function unwrapWETH(uint256 amountMinimum, address recipient) external {\\n        uint256 balanceWETH = balanceOfThis(wETH);\\n        require(balanceWETH >= amountMinimum, \\\"INSUFFICIENT_WETH\\\");\\n        if (balanceWETH != 0) {\\n            withdrawFromWETH(balanceWETH);\\n            safeTransferETH(recipient, balanceWETH);\\n        }\\n    }\\n\\n    function _depositToBentoBox(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        if (token == wETH && address(this).balance != 0) {\\n            uint256 underlyingAmount = bento.toAmount(wETH, amount, true);\\n            if (address(this).balance >= underlyingAmount) {\\n                // @dev Deposit ETH into `recipient` `bento` account.\\n                bento.deposit{value: underlyingAmount}(address(0), address(this), recipient, 0, amount);\\n                return;\\n            }\\n        }\\n        // @dev Deposit ERC-20 token into `recipient` `bento` account.\\n        bento.deposit(token, msg.sender, recipient, 0, amount);\\n    }\\n\\n    function _depositFromUserToBentoBox(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        if (token == wETH && address(this).balance != 0) {\\n            uint256 underlyingAmount = bento.toAmount(wETH, amount, true);\\n            if (address(this).balance >= underlyingAmount) {\\n                // @dev Deposit ETH into `recipient` `bento` account.\\n                bento.deposit{value: underlyingAmount}(address(0), address(this), recipient, 0, amount);\\n                return;\\n            }\\n        }\\n        // @dev Deposit ERC-20 token into `recipient` `bento` account.\\n        bento.deposit(token, sender, recipient, 0, amount);\\n    }\\n\\n    function isWhiteListed(address pool) internal {\\n        if (!whitelistedPools[pool]) {\\n            require(masterDeployer.pools(pool), \\\"INVALID POOL\\\");\\n            whitelistedPools[pool] = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4978e847a13c9070ee78a25b1ea8146271add947f46101f6a5cb6d6e6a21a2d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deployer/MasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/TridentOwnable.sol\\\";\\n\\n/// @notice Trident pool deployer contract with template factory whitelist.\\n/// @author Mudit Gupta.\\ncontract MasterDeployer is TridentOwnable {\\n    event DeployPool(address indexed _factory, address indexed pool);\\n    event AddToWhitelist(address indexed _factory);\\n    event RemoveFromWhitelist(address indexed _factory);\\n    event BarFeeUpdated(uint256 indexed _barFee);\\n    event MigratorUpdated(address indexed _migrator);\\n\\n    uint256 public barFee;\\n    address public migrator;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n\\n    mapping(address => bool) public pools;\\n\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    constructor(\\n        uint256 _barFee,\\n        address _barFeeTo,\\n        address _bento\\n    ) {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        require(_barFeeTo != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_bento != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        barFee = _barFee;\\n        barFeeTo = _barFeeTo;\\n        bento = _bento;\\n    }\\n\\n    function deployPool(address _factory, bytes calldata _deployData) external returns (address pool) {\\n        require(whitelistedFactories[_factory], \\\"FACTORY_NOT_WHITELISTED\\\");\\n        pool = IPoolFactory(_factory).deployPool(_deployData);\\n        pools[pool] = true;\\n        emit DeployPool(_factory, pool);\\n    }\\n\\n    function addToWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = true;\\n        emit AddToWhitelist(_factory);\\n    }\\n\\n    function removeFromWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = false;\\n        emit RemoveFromWhitelist(_factory);\\n    }\\n\\n    function setBarFee(uint256 _barFee) external onlyOwner {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        barFee = _barFee;\\n        emit BarFeeUpdated(_barFee);\\n    }\\n\\n    function setMigrator(address _migrator) external onlyOwner {\\n        migrator = _migrator;\\n        emit MigratorUpdated(_migrator);\\n    }\\n}\\n\",\"keccak256\":\"0x1d4b0ad3f5c0a402a1ca1dc5017186c7b6aad7fabff1f1336cb8e59ee5cbecbe\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimal BentoBox vault interface. \\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n    \\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n    \\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n    \\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n}\\n\",\"keccak256\":\"0x17c0d71c95bc369805bad3d93a59ead6588bf5e48232f1bc6b3064d193c12b67\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    \\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xabe7c92de39e405012bd89d614fe4107a7323f8ed4bdc9a8dad5c2429c14fbcb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x4310b83f8e22e0f9997f8deca08a921d961df64ac7c4ace4f7a00e9d188384fe\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // @dev Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\\n\",\"keccak256\":\"0x8e330c9344bf294fa37ad44311e3ab6635cefd077fe33adaac0f09ec3f664e87\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TridentHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../TridentRouter.sol\\\";\\n\\n/// @notice Trident router helper contract.\\ncontract TridentHelper {\\n    /// @notice ERC-20 token for wrapped ETH (v9).\\n    address internal immutable wETH;\\n\\n    constructor(address _wETH) {\\n        wETH = _wETH;\\n    }\\n\\n    /// @notice Provides batch function calls for this contract and returns the data from all of them if they all succeed.\\n    /// Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later.\\n    /// @dev The `msg.value` should not be trusted for any method callable from this function.\\n    /// @param data ABI-encoded params for each of the calls to make to this contract.\\n    /// @return results The results from each of the calls passed in via `data`.\\n    function batch(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        // We only allow one exactInputSingle call to be made in a single batch call.\\n        // This is not really needed but we want to save users from signing malicious payloads.\\n        // We also don't want nested batch calls.\\n        bool swapCalled;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            bytes4 selector = getSelector(data[i]);\\n            if (selector == TridentRouter.exactInputSingle.selector || selector == TridentRouter.exactInputSingleWithNativeToken.selector) {\\n                require(!swapCalled, \\\"Swap called twice\\\");\\n                swapCalled = true;\\n            } else {\\n                require(selector != this.batch.selector, \\\"Nested Batch\\\");\\n            }\\n\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n            if (!success) {\\n                // @dev Next 5 lines from https://ethereum.stackexchange.com/a/83577.\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n            results[i] = result;\\n        }\\n    }\\n\\n    /// @notice Provides gas-optimized balance check on this contract to avoid redundant extcodesize check in addition to returndatasize check.\\n    /// @param token Address of ERC-20 token.\\n    /// @return balance Token amount held by this contract.\\n    function balanceOfThis(address token) internal view returns (uint256 balance) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x70a08231, address(this))); // @dev balanceOf(address).\\n        require(success && data.length >= 32, \\\"BALANCE_OF_FAILED\\\");\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides EIP-2612 signed approval for this contract to spend user tokens.\\n    /// @param token Address of ERC-20 token.\\n    /// @param amount Token amount to grant spending right over.\\n    /// @param deadline Termination for signed approval (UTC timestamp in seconds).\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permitThis(\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        (bool success, ) = token.call(abi.encodeWithSelector(0xd505accf, msg.sender, address(this), amount, deadline, v, r, s)); // @dev permit(address,address,uint256,uint256,uint8,bytes32,bytes32).\\n        require(success, \\\"PERMIT_FAILED\\\");\\n    }\\n\\n    /// @notice Provides DAI-derived signed approval for this contract to spend user tokens.\\n    /// @param token Address of ERC-20 token.\\n    /// @param nonce Token owner's nonce - increases at each call to {permit}.\\n    /// @param expiry Termination for signed approval - UTC timestamp in seconds.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permitThisAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        (bool success, ) = token.call(abi.encodeWithSelector(0x8fcbaf0c, msg.sender, address(this), nonce, expiry, true, v, r, s)); // @dev permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32).\\n        require(success, \\\"PERMIT_FAILED\\\");\\n    }\\n\\n    /// @notice Provides 'safe' ERC-20 {transfer} for tokens that don't consistently return true/false.\\n    /// @param token Address of ERC-20 token.\\n    /// @param recipient Account to send tokens to.\\n    /// @param amount Token amount to send.\\n    function safeTransfer(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, recipient, amount)); // @dev transfer(address,uint256).\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    /// @notice Provides 'safe' ERC-20 {transferFrom} for tokens that don't consistently return true/false.\\n    /// @param token Address of ERC-20 token.\\n    /// @param sender Account to send tokens from.\\n    /// @param recipient Account to send tokens to.\\n    /// @param amount Token amount to send.\\n    function safeTransferFrom(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount)); // @dev transferFrom(address,address,uint256).\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    /// @notice Provides low-level `wETH` {withdraw}.\\n    /// @param amount Token amount to unwrap into ETH.\\n    function withdrawFromWETH(uint256 amount) internal {\\n        (bool success, bytes memory data) = wETH.call(abi.encodeWithSelector(0x2e1a7d4d, amount)); // @dev withdraw(uint256).\\n        require(success && data.length >= 32, \\\"WITHDRAW_FROM_WETH_FAILED\\\");\\n    }\\n\\n    /// @notice Provides 'safe' ETH transfer.\\n    /// @param recipient Account to send ETH to.\\n    /// @param amount ETH amount to send.\\n    function safeTransferETH(address recipient, uint256 amount) internal {\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice function to extract the selector of a bytes calldata\\n     * @param _data the calldata bytes\\n     */\\n    function getSelector(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53cc1f730a8ab188fc7bfa4fea134edaa3cee2b9f619da82b68a74a4c0ff449e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TridentOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident access control contract.\\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\\ncontract TridentOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event TransferOwner(address indexed sender, address indexed recipient);\\n    event TransferOwnerClaim(address indexed sender, address indexed recipient);\\n\\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\\n    constructor() {\\n        owner = msg.sender;\\n        emit TransferOwner(address(0), msg.sender);\\n    }\\n\\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    /// @notice `pendingOwner` can claim `owner` account.\\n    function claimOwner() external {\\n        require(msg.sender == pendingOwner, \\\"NOT_PENDING_OWNER\\\");\\n        emit TransferOwner(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Transfer `owner` account.\\n    /// @param recipient Account granted `owner` access control.\\n    /// @param direct If 'true', ownership is directly transferred.\\n    function transferOwner(address recipient, bool direct) external onlyOwner {\\n        if (direct) {\\n            owner = recipient;\\n            emit TransferOwner(msg.sender, recipient);\\n        } else {\\n            pendingOwner = recipient;\\n            emit TransferOwnerClaim(msg.sender, recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba548d2b837574da94342865861750bc58b0d947fb085937885708f279b21bb4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004d6238038062004d628339810160408190526200003491620000c2565b6001600160601b0319606082901b166080526040805163577268d960e11b815290516001600160a01b0385169163aee4d1b291600480830192600092919082900301818387803b1580156200008857600080fd5b505af11580156200009d573d6000803e3d6000fd5b5050505050606091821b6001600160601b031990811660a052911b1660c0526200012f565b600080600060608486031215620000d857600080fd5b8351620000e58162000116565b6020850151909350620000f88162000116565b60408501519092506200010b8162000116565b809150509250925092565b6001600160a01b03811681146200012c57600080fd5b50565b60805160601c60a05160601c60c05160601c614b4b62000217600039600081816103fa01526131310152600081816102880152818161069e01528181610fe7015281816112b70152818161194101528181611cf701528181611fe00152818161216b01528181612427015281816126040152818161276b015281816129d501528181612b9101528181612e7501528181612f5d0152818161303d015281816136e3015281816137cb01526138b501526000818161018b01528181612cf701528181612da201528181612e3c01528181613610015281816136aa0152613a9b0152614b4b6000f3fe60806040526004361061016e5760003560e01c8063783312d9116100cb578063a9b62c231161007f578063ced10b4911610059578063ced10b49146103c8578063cf58879a146103e8578063e16d9ce51461041c57600080fd5b8063a9b62c2314610375578063b96c5c0e14610395578063bd50c7b1146103a857600080fd5b806394ae4ab2116100b057806394ae4ab21461032f57806398a691de1461034f5780639fa744911461036257600080fd5b8063783312d9146102ef5780639128efda1461030f57600080fd5b80631e897afb116101225780632cfcb94f116101075780632cfcb94f146102635780634da318271461027657806377631981146102cf57600080fd5b80631e897afb146102305780632c0d9a011461025057600080fd5b806312210e8a1161015357806312210e8a146101f55780631aa349a8146101fd5780631ab5d6c81461021d57600080fd5b80630b0d1b1e146101bc5780630f93d439146101e257600080fd5b366101b7573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101b557600080fd5b005b600080fd5b6101cf6101ca366004614317565b61043c565b6040519081526020015b60405180910390f35b6101cf6101f0366004614352565b610685565b6101b5610891565b34801561020957600080fd5b506101b5610218366004613f30565b6108a3565b6101cf61022b3660046143f2565b6109d5565b61024361023e366004613ff6565b610c41565b6040516101d99190614502565b6101cf61025e366004614317565b610fce565b6101cf610271366004614131565b611231565b34801561028257600080fd5b506102aa7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d9565b3480156102db57600080fd5b506101b56102ea366004613f94565b6114e1565b3480156102fb57600080fd5b506101b561030a366004613e21565b611647565b34801561031b57600080fd5b506101b561032a366004613d83565b6118e7565b34801561033b57600080fd5b506101b561034a366004613d83565b611999565b6101cf61035d366004613dc5565b6119a9565b6101cf610370366004614352565b611b3a565b34801561038157600080fd5b506101b5610390366004613f94565b611b76565b6101b56103a33660046142dc565b611bd4565b3480156103b457600080fd5b506101b56103c33660046141f4565b6128a6565b3480156103d457600080fd5b506101b56103e33660046141f4565b612a64565b3480156103f457600080fd5b506102aa7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042857600080fd5b506101b56104373660046143c2565b612cf0565b600061049661044e6020840184613d66565b61045b60608501856145e2565b600081811061046c5761046c614a87565b905060200281019061047e919061474b565b61048c906020810190613d66565b8460200135612da0565b60005b6104a660608401846145e2565b905081101561060c576104f46104bf60608501856145e2565b838181106104cf576104cf614a87565b90506020028101906104e1919061474b565b6104ef906020810190613d66565b6130bf565b61050160608401846145e2565b8281811061051157610511614a87565b9050602002810190610523919061474b565b610531906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61055960608601866145e2565b8481811061056957610569614a87565b905060200281019061057b919061474b565b6105899060208101906146b2565b6040518363ffffffff1660e01b81526004016105a6929190614582565b602060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f891906143a9565b91508061060481614a1f565b915050610499565b508160400135811015610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f52454345495645440000000000000000000000000060448201526064015b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6106d36080850160608601613d66565b336106e46060870160408801613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015284356064820152608401600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b5061078a925050506060830160408401613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a6107b260808501856146b2565b6040518363ffffffff1660e01b81526004016107cf929190614582565b602060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906143a9565b90508160200135811015610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b47156108a1576108a13347613263565b565b6108ac856130bf565b6108b88533878761332d565b6040517faf8c09bf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063af8c09bf9061090f9087908790600401614582565b602060405180830381600087803b15801561092957600080fd5b505af115801561093d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096191906143a9565b9050818110156109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b505050505050565b6000805b82811015610b99576109f68484838181106104cf576104cf614a87565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055838382818110610a3257610a32614a87565b9050602002810190610a44919061474b565b610a52906020810190613d66565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055838382818110610aa957610aa9614a87565b9050602002810190610abb919061474b565b610ac9906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663053da1c8858584818110610af657610af6614a87565b9050602002810190610b08919061474b565b610b169060208101906146b2565b6040518363ffffffff1660e01b8152600401610b33929190614582565b602060405180830381600087803b158015610b4d57600080fd5b505af1158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906143a9565b915080610b9181614a1f565b9150506109d9565b506000805460017fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092558154168117905583811015610c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b9392505050565b60608167ffffffffffffffff811115610c5c57610c5c614ab6565b604051908082528060200260200182016040528015610c8f57816020015b6060815260200190600190039081610c7a5790505b5090506000805b83811015610fc6576000610d01868684818110610cb557610cb5614a87565b9050602002810190610cc791906146b2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061349e92505050565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f0f93d439000000000000000000000000000000000000000000000000000000001480610d9457507fffffffff0000000000000000000000000000000000000000000000000000000081167f9fa7449100000000000000000000000000000000000000000000000000000000145b15610e0a578215610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f537761702063616c6c65642074776963650000000000000000000000000000006044820152606401610677565b60019250610eb6565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f1e897afb000000000000000000000000000000000000000000000000000000001415610eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e657374656420426174636800000000000000000000000000000000000000006044820152606401610677565b60008030888886818110610ecc57610ecc614a87565b9050602002810190610ede91906146b2565b604051610eec9291906144d6565b600060405180830381855af49150503d8060008114610f27576040519150601f19603f3d011682016040523d82523d6000602084013e610f2c565b606091505b509150915081610f9257604481511015610f4557600080fd5b60048101905080806020019051810190610f5f919061422a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067791906145cf565b80868581518110610fa557610fa5614a87565b60200260200101819052505050508080610fbe90614a1f565b915050610c96565b505092915050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6110196020850185613d66565b3361102760608701876145e2565b600081811061103857611038614a87565b905060200281019061104a919061474b565b611058906020810190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260208501356064820152608401600060405180830381600087803b1580156110d857600080fd5b505af11580156110ec573d6000803e3d6000fd5b5050505060005b61110060608401846145e2565b905081101561060c576111196104bf60608501856145e2565b61112660608401846145e2565b8281811061113657611136614a87565b9050602002810190611148919061474b565b611156906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61117e60608601866145e2565b8481811061118e5761118e614a87565b90506020028101906111a0919061474b565b6111ae9060208101906146b2565b6040518363ffffffff1660e01b81526004016111cb929190614582565b602060405180830381600087803b1580156111e557600080fd5b505af11580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906143a9565b91508061122981614a1f565b9150506110f3565b600061123c856130bf565b60005b86518110156113c55786818151811061125a5761125a614a87565b602002602001015160200151156112b5576112b087828151811061128057611280614a87565b6020026020010151600001518789848151811061129f5761129f614a87565b602002602001015160400151612da0565b6113b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc88838151811061130357611303614a87565b60200260200101516000015133898b868151811061132357611323614a87565b6020026020010151604001516040518563ffffffff1660e01b8152600401611380949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600060405180830381600087803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b505050505b806113bd81614a1f565b91505061123f565b506040517f7ba0e2e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690637ba0e2e79061141a9086908690600401614582565b602060405180830381600087803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c91906143a9565b9050838110156114d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4e4f545f454e4f5547485f4c49515549444954595f4d494e54454400000000006044820152606401610677565b95945050505050565b6040513360248201523060448201526064810186905260848101859052600160a482015260ff841660c482015260e48101839052610104810182905260009073ffffffffffffffffffffffffffffffffffffffff881690638fcbaf0c90610124015b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161159191906144e6565b6000604051808303816000865af19150503d80600081146115ce576040519150601f19603f3d011682016040523d82523d6000602084013e6115d3565b606091505b505090508061163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5045524d49545f4641494c4544000000000000000000000000000000000000006044820152606401610677565b50505050505050565b611650856130bf565b61165c8533878761332d565b6040517f2a07b6c700000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff871690632a07b6c7906116b39087908790600401614582565b600060405180830381600087803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526117279190810190614038565b905060005b825181101561163e5760005b825181101561186a5783828151811061175357611753614a87565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061178757611787614a87565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611858578382815181106117c1576117c1614a87565b6020026020010151602001518382815181106117df576117df614a87565b6020026020010151602001511015611853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b61186a565b8061186281614a1f565b915050611738565b825181106118d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e434f52524543545f544f4b454e5f57495448445241574e000000000000006044820152606401610677565b50806118df81614a1f565b91505061172c565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301528281166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561198557600080fd5b505af115801561163e573d6000803e3d6000fd5b6119a48382846134a5565b505050565b60006119b4856130bf565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811633179091556001805473ffffffffffffffffffffffffffffffffffffffff88169216821790556040517f7ba0e2e7000000000000000000000000000000000000000000000000000000008152637ba0e2e790611a3e9086908690600401614582565b602060405180830381600087803b158015611a5857600080fd5b505af1158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9091906143a9565b6000805460017fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925581541681179055905083811015611b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4e4f545f454e4f5547485f4c49515549444954595f4d494e54454400000000006044820152606401610677565b949350505050565b6000611b66611b4f6080840160608501613d66565b611b5f6060850160408601613d66565b8435612da0565b61078a6060830160408401613d66565b604051336024820152306044820152606481018690526084810185905260ff841660a482015260c4810183905260e4810182905260009073ffffffffffffffffffffffffffffffffffffffff88169063d505accf9061010401611543565b60005b611be182806145e2565b9050811015611fad57611bf482806145e2565b82818110611c0457611c04614a87565b9050602002810190611c169190614717565b611c279060608101906040016141ba565b15611ce057611cdb611c3983806145e2565b83818110611c4957611c49614a87565b9050602002810190611c5b9190614717565b611c69906020810190613d66565b611c7384806145e2565b84818110611c8357611c83614a87565b9050602002810190611c959190614717565b611ca6906040810190602001613d66565b611cb085806145e2565b85818110611cc057611cc0614a87565b9050602002810190611cd29190614717565b60600135612da0565b611e59565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611d2684806145e2565b84818110611d3657611d36614a87565b9050602002810190611d489190614717565b611d56906020810190613d66565b33611d6186806145e2565b86818110611d7157611d71614a87565b9050602002810190611d839190614717565b611d94906040810190602001613d66565b611d9e87806145e2565b87818110611dae57611dae614a87565b9050602002810190611dc09190614717565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526060909101356064820152608401600060405180830381600087803b158015611e4057600080fd5b505af1158015611e54573d6000803e3d6000fd5b505050505b611e99611e6683806145e2565b83818110611e7657611e76614a87565b9050602002810190611e889190614717565b6104ef906040810190602001613d66565b611ea382806145e2565b82818110611eb357611eb3614a87565b9050602002810190611ec59190614717565b611ed6906040810190602001613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611efb84806145e2565b84818110611f0b57611f0b614a87565b9050602002810190611f1d9190614717565b611f2b9060808101906146b2565b6040518363ffffffff1660e01b8152600401611f48929190614582565b602060405180830381600087803b158015611f6257600080fd5b505af1158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a91906143a9565b5080611fa581614a1f565b915050611bd7565b5060005b611fbe60208301836145e2565b90508110156123f457600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec61201260208601866145e2565b8581811061202257612022614a87565b9050602002810190612034919061477f565b612042906020810190613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260440160206040518083038186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e491906143a9565b905060006120f46008600a6148eb565b61210160208601866145e2565b8581811061211157612111614a87565b9050602002810190612123919061477f565b612134906060810190604001614462565b6121489067ffffffffffffffff16846149b6565b612152919061484f565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61219d60208701876145e2565b868181106121ad576121ad614a87565b90506020028101906121bf919061477f565b6121cd906020810190613d66565b306121db60208901896145e2565b888181106121eb576121eb614a87565b90506020028101906121fd919061477f565b61220e906040810190602001613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b506122d792506122b591505060208601866145e2565b858181106122c5576122c5614a87565b9050602002810190611e88919061477f565b6122e460208501856145e2565b848181106122f4576122f4614a87565b9050602002810190612306919061477f565b612317906040810190602001613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61233f60208701876145e2565b8681811061234f5761234f614a87565b9050602002810190612361919061477f565b61236f9060608101906146b2565b6040518363ffffffff1660e01b815260040161238c929190614582565b602060405180830381600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123de91906143a9565b50505080806123ec90614a1f565b915050611fb1565b5060005b612405604083018361464a565b90508110156128a257600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec612459604086018661464a565b8581811061246957612469614a87565b61247f9260206080909202019081019150613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260440160206040518083038186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252191906143a9565b9050612530604084018461464a565b8381811061254057612540614a87565b905060800201606001358110156125b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b6125c0604084018461464a565b838181106125d0576125d0614a87565b90506080020160400160208101906125e891906141ba565b156127545773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166397da6d30612636604086018661464a565b8581811061264657612646614a87565b61265c9260206080909202019081019150613d66565b3061266a604088018861464a565b8781811061267a5761267a614a87565b90506080020160200160208101906126929190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152600060648201526084810184905260a4016040805180830381600087803b15801561271557600080fd5b505af1158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d919061443e565b505061288f565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61279d604086018661464a565b858181106127ad576127ad614a87565b6127c39260206080909202019081019150613d66565b306127d1604088018861464a565b878181106127e1576127e1614a87565b90506080020160200160208101906127f99190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561287657600080fd5b505af115801561288a573d6000803e3d6000fd5b505050505b508061289a81614a1f565b9150506123f8565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f43414c4c4241434b00000000000000000000006044820152606401610677565b60006129358284018461438d565b9050806020015115612973578051600054604083015161296e929173ffffffffffffffffffffffffffffffffffffffff1690339061360e565b612a34565b805160005460408084015190517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015233604483015260648201527f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b505050505b5050600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117905550565b60015473ffffffffffffffffffffffffffffffffffffffff163314612ae5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f43414c4c4241434b00000000000000000000006044820152606401610677565b6000612af3828401846140fc565b905060005b8151811015612cbf57818181518110612b1357612b13614a87565b60200260200101516020015115612b8f57612b8a828281518110612b3957612b39614a87565b60200260200101516000015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633858581518110612b7957612b79614a87565b60200260200101516040015161360e565b612cad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc838381518110612bdd57612bdd614a87565b60200260200101516000015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633868681518110612c1d57612c1d614a87565b6020026020010151604001516040518563ffffffff1660e01b8152600401612c7a949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600060405180830381600087803b158015612c9457600080fd5b505af1158015612ca8573d6000803e3d6000fd5b505050505b80612cb781614a1f565b915050612af8565b5050600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790555050565b6000612d1b7f0000000000000000000000000000000000000000000000000000000000000000613936565b905082811015612d87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e53554646494349454e545f574554480000000000000000000000000000006044820152606401610677565b80156119a457612d9681613a96565b6119a48282613263565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015612dfa57504715155b15612fdc576040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600160448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063566231189060640160206040518083038186803b158015612eb957600080fd5b505afa158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef191906143a9565b9050804710612fda576040517f02b9446c00000000000000000000000000000000000000000000000000000000815260006004820181905230602483015273ffffffffffffffffffffffffffffffffffffffff85811660448401526064830191909152608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a40160408051808303818588803b158015612fa157600080fd5b505af1158015612fb5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109cd919061443e565b505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152336024830152838116604483015260006064830152608482018390527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c9060a4016040805180830381600087803b15801561308057600080fd5b505af1158015613094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b8919061443e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16613260576040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a4063dbc9060240160206040518083038186803b15801561317357600080fd5b505afa158015613187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ab91906141d7565b613211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c494420504f4f4c00000000000000000000000000000000000000006044820152606401610677565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146132bd576040519150601f19603f3d011682016040523d82523d6000602084013e6132c2565b606091505b50509050806119a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610677565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916133cc91906144e6565b6000604051808303816000865af19150503d8060008114613409576040519150601f19603f3d011682016040523d82523d6000602084013e61340e565b606091505b509150915081801561343857508051158061343857508080602001905181019061343891906141d7565b6109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610677565b6020015190565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161353c91906144e6565b6000604051808303816000865af19150503d8060008114613579576040519150601f19603f3d011682016040523d82523d6000602084013e61357e565b606091505b50915091508180156135a85750805115806135a85750808060200190518101906135a891906141d7565b6130b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610677565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614801561366857504715155b15613852576040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600160448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063566231189060640160206040518083038186803b15801561372757600080fd5b505afa15801561373b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375f91906143a9565b9050804710613850576040517f02b9446c00000000000000000000000000000000000000000000000000000000815260006004820181905230602483015273ffffffffffffffffffffffffffffffffffffffff85811660448401526064830191909152608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a40160408051808303818588803b15801561380f57600080fd5b505af1158015613823573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613848919061443e565b505050613930565b505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152838116604483015260006064830152608482018390527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c9060a4016040805180830381600087803b1580156138f857600080fd5b505af115801561390c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd919061443e565b50505050565b604080513060248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff8616916139c891906144e6565b600060405180830381855afa9150503d8060008114613a03576040519150601f19603f3d011682016040523d82523d6000602084013e613a08565b606091505b5091509150818015613a1c57506020815110155b613a82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f42414c414e43455f4f465f4641494c45440000000000000000000000000000006044820152606401610677565b80806020019051810190611b3291906143a9565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d84604051602401613ae891815260200190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613b3691906144e6565b6000604051808303816000865af19150503d8060008114613b73576040519150601f19603f3d011682016040523d82523d6000602084013e613b78565b606091505b5091509150818015613b8c57506020815110155b6119a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f57495448445241575f46524f4d5f574554485f4641494c4544000000000000006044820152606401610677565b60008083601f840112613c0457600080fd5b50813567ffffffffffffffff811115613c1c57600080fd5b6020830191508360208260051b8501011115613c3757600080fd5b9250929050565b600082601f830112613c4f57600080fd5b81356020613c64613c5f8361482b565b6147dc565b82815281810190858301606080860288018501891015613c8357600080fd5b60005b86811015613caa57613c988a84613cfa565b85529385019391810191600101613c86565b509198975050505050505050565b60008083601f840112613cca57600080fd5b50813567ffffffffffffffff811115613ce257600080fd5b602083019150836020828501011115613c3757600080fd5b600060608284031215613d0c57600080fd5b6040516060810181811067ffffffffffffffff82111715613d2f57613d2f614ab6565b6040529050808235613d4081614ae5565b81526020830135613d5081614b07565b6020820152604092830135920191909152919050565b600060208284031215613d7857600080fd5b8135610c3a81614ae5565b600080600060608486031215613d9857600080fd5b8335613da381614ae5565b9250602084013591506040840135613dba81614ae5565b809150509250925092565b60008060008060608587031215613ddb57600080fd5b8435613de681614ae5565b935060208501359250604085013567ffffffffffffffff811115613e0957600080fd5b613e1587828801613cb8565b95989497509550505050565b600080600080600060808688031215613e3957600080fd5b8535613e4481614ae5565b94506020868101359450604087013567ffffffffffffffff80821115613e6957600080fd5b613e758a838b01613cb8565b90965094506060890135915080821115613e8e57600080fd5b508701601f81018913613ea057600080fd5b8035613eae613c5f8261482b565b8082825284820191508484018c868560061b8701011115613ece57600080fd5b60009450845b84811015613f1c576040828f031215613eeb578586fd5b613ef36147b3565b8235613efe81614ae5565b81528288013588820152845292860192604090910190600101613ed4565b505080955050505050509295509295909350565b600080600080600060808688031215613f4857600080fd5b8535613f5381614ae5565b945060208601359350604086013567ffffffffffffffff811115613f7657600080fd5b613f8288828901613cb8565b96999598509660600135949350505050565b60008060008060008060c08789031215613fad57600080fd5b8635613fb881614ae5565b95506020870135945060408701359350606087013560ff81168114613fdc57600080fd5b9598949750929560808101359460a0909101359350915050565b6000806020838503121561400957600080fd5b823567ffffffffffffffff81111561402057600080fd5b61402c85828601613bf2565b90969095509350505050565b6000602080838503121561404b57600080fd5b825167ffffffffffffffff81111561406257600080fd5b8301601f8101851361407357600080fd5b8051614081613c5f8261482b565b80828252848201915084840188868560061b87010111156140a157600080fd5b60009450845b848110156140ee57604080838c0312156140bf578687fd5b6140c76147b3565b83516140d281614ae5565b81528389015189820152855293870193909101906001016140a7565b509098975050505050505050565b60006020828403121561410e57600080fd5b813567ffffffffffffffff81111561412557600080fd5b611b3284828501613c3e565b60008060008060006080868803121561414957600080fd5b853567ffffffffffffffff8082111561416157600080fd5b61416d89838a01613c3e565b96506020880135915061417f82614ae5565b909450604087013593506060870135908082111561419c57600080fd5b506141a988828901613cb8565b969995985093965092949392505050565b6000602082840312156141cc57600080fd5b8135610c3a81614b07565b6000602082840312156141e957600080fd5b8151610c3a81614b07565b6000806020838503121561420757600080fd5b823567ffffffffffffffff81111561421e57600080fd5b61402c85828601613cb8565b60006020828403121561423c57600080fd5b815167ffffffffffffffff8082111561425457600080fd5b818401915084601f83011261426857600080fd5b81518181111561427a5761427a614ab6565b6142ab60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147dc565b91508082528560208285010111156142c257600080fd5b6142d38160208401602086016149f3565b50949350505050565b6000602082840312156142ee57600080fd5b813567ffffffffffffffff81111561430557600080fd5b820160608185031215610c3a57600080fd5b60006020828403121561432957600080fd5b813567ffffffffffffffff81111561434057600080fd5b820160808185031215610c3a57600080fd5b60006020828403121561436457600080fd5b813567ffffffffffffffff81111561437b57600080fd5b820160a08185031215610c3a57600080fd5b60006060828403121561439f57600080fd5b610c3a8383613cfa565b6000602082840312156143bb57600080fd5b5051919050565b600080604083850312156143d557600080fd5b8235915060208301356143e781614ae5565b809150509250929050565b60008060006040848603121561440757600080fd5b83359250602084013567ffffffffffffffff81111561442557600080fd5b61443186828701613bf2565b9497909650939450505050565b6000806040838503121561445157600080fd5b505080516020909101519092909150565b60006020828403121561447457600080fd5b813567ffffffffffffffff81168114610c3a57600080fd5b600081518084526144a48160208601602086016149f3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8183823760009101908152919050565b600082516144f88184602087016149f3565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614575577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261456385835161448c565b94509285019290850190600101614529565b5092979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b602081526000610c3a602083018461448c565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261461757600080fd5b83018035915067ffffffffffffffff82111561463257600080fd5b6020019150600581901b3603821315613c3757600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261467f57600080fd5b83018035915067ffffffffffffffff82111561469a57600080fd5b6020019150600781901b3603821315613c3757600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126146e757600080fd5b83018035915067ffffffffffffffff82111561470257600080fd5b602001915036819003821315613c3757600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618336030181126144f857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126144f857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126144f857600080fd5b6040805190810167ffffffffffffffff811182821017156147d6576147d6614ab6565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561482357614823614ab6565b604052919050565b600067ffffffffffffffff82111561484557614845614ab6565b5060051b60200190565b600082614885577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b808511156148e357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156148c9576148c9614a58565b808516156148d657918102915b93841c939080029061488f565b509250929050565b6000610c3a60ff841683600082614904575060016149b0565b81614911575060006149b0565b816001811461492757600281146149315761494d565b60019150506149b0565b60ff84111561494257614942614a58565b50506001821b6149b0565b5060208310610133831016604e8410600b8410161715614970575081810a6149b0565b61497a838361488a565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156149ac576149ac614a58565b0290505b92915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149ee576149ee614a58565b500290565b60005b83811015614a0e5781810151838201526020016149f6565b838111156139305750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a5157614a51614a58565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461326057600080fd5b801515811461326057600080fdfea2646970667358221220a0093aa0de01b7980a9b836859e9b671d2c635ce2361bf95f436000f6afcb75864736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061016e5760003560e01c8063783312d9116100cb578063a9b62c231161007f578063ced10b4911610059578063ced10b49146103c8578063cf58879a146103e8578063e16d9ce51461041c57600080fd5b8063a9b62c2314610375578063b96c5c0e14610395578063bd50c7b1146103a857600080fd5b806394ae4ab2116100b057806394ae4ab21461032f57806398a691de1461034f5780639fa744911461036257600080fd5b8063783312d9146102ef5780639128efda1461030f57600080fd5b80631e897afb116101225780632cfcb94f116101075780632cfcb94f146102635780634da318271461027657806377631981146102cf57600080fd5b80631e897afb146102305780632c0d9a011461025057600080fd5b806312210e8a1161015357806312210e8a146101f55780631aa349a8146101fd5780631ab5d6c81461021d57600080fd5b80630b0d1b1e146101bc5780630f93d439146101e257600080fd5b366101b7573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101b557600080fd5b005b600080fd5b6101cf6101ca366004614317565b61043c565b6040519081526020015b60405180910390f35b6101cf6101f0366004614352565b610685565b6101b5610891565b34801561020957600080fd5b506101b5610218366004613f30565b6108a3565b6101cf61022b3660046143f2565b6109d5565b61024361023e366004613ff6565b610c41565b6040516101d99190614502565b6101cf61025e366004614317565b610fce565b6101cf610271366004614131565b611231565b34801561028257600080fd5b506102aa7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d9565b3480156102db57600080fd5b506101b56102ea366004613f94565b6114e1565b3480156102fb57600080fd5b506101b561030a366004613e21565b611647565b34801561031b57600080fd5b506101b561032a366004613d83565b6118e7565b34801561033b57600080fd5b506101b561034a366004613d83565b611999565b6101cf61035d366004613dc5565b6119a9565b6101cf610370366004614352565b611b3a565b34801561038157600080fd5b506101b5610390366004613f94565b611b76565b6101b56103a33660046142dc565b611bd4565b3480156103b457600080fd5b506101b56103c33660046141f4565b6128a6565b3480156103d457600080fd5b506101b56103e33660046141f4565b612a64565b3480156103f457600080fd5b506102aa7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042857600080fd5b506101b56104373660046143c2565b612cf0565b600061049661044e6020840184613d66565b61045b60608501856145e2565b600081811061046c5761046c614a87565b905060200281019061047e919061474b565b61048c906020810190613d66565b8460200135612da0565b60005b6104a660608401846145e2565b905081101561060c576104f46104bf60608501856145e2565b838181106104cf576104cf614a87565b90506020028101906104e1919061474b565b6104ef906020810190613d66565b6130bf565b61050160608401846145e2565b8281811061051157610511614a87565b9050602002810190610523919061474b565b610531906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61055960608601866145e2565b8481811061056957610569614a87565b905060200281019061057b919061474b565b6105899060208101906146b2565b6040518363ffffffff1660e01b81526004016105a6929190614582565b602060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f891906143a9565b91508061060481614a1f565b915050610499565b508160400135811015610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f52454345495645440000000000000000000000000060448201526064015b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6106d36080850160608601613d66565b336106e46060870160408801613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015284356064820152608401600060405180830381600087803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b5061078a925050506060830160408401613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a6107b260808501856146b2565b6040518363ffffffff1660e01b81526004016107cf929190614582565b602060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906143a9565b90508160200135811015610680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b47156108a1576108a13347613263565b565b6108ac856130bf565b6108b88533878761332d565b6040517faf8c09bf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063af8c09bf9061090f9087908790600401614582565b602060405180830381600087803b15801561092957600080fd5b505af115801561093d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096191906143a9565b9050818110156109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b505050505050565b6000805b82811015610b99576109f68484838181106104cf576104cf614a87565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055838382818110610a3257610a32614a87565b9050602002810190610a44919061474b565b610a52906020810190613d66565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055838382818110610aa957610aa9614a87565b9050602002810190610abb919061474b565b610ac9906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663053da1c8858584818110610af657610af6614a87565b9050602002810190610b08919061474b565b610b169060208101906146b2565b6040518363ffffffff1660e01b8152600401610b33929190614582565b602060405180830381600087803b158015610b4d57600080fd5b505af1158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906143a9565b915080610b9181614a1f565b9150506109d9565b506000805460017fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092558154168117905583811015610c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b9392505050565b60608167ffffffffffffffff811115610c5c57610c5c614ab6565b604051908082528060200260200182016040528015610c8f57816020015b6060815260200190600190039081610c7a5790505b5090506000805b83811015610fc6576000610d01868684818110610cb557610cb5614a87565b9050602002810190610cc791906146b2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061349e92505050565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f0f93d439000000000000000000000000000000000000000000000000000000001480610d9457507fffffffff0000000000000000000000000000000000000000000000000000000081167f9fa7449100000000000000000000000000000000000000000000000000000000145b15610e0a578215610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f537761702063616c6c65642074776963650000000000000000000000000000006044820152606401610677565b60019250610eb6565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f1e897afb000000000000000000000000000000000000000000000000000000001415610eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e657374656420426174636800000000000000000000000000000000000000006044820152606401610677565b60008030888886818110610ecc57610ecc614a87565b9050602002810190610ede91906146b2565b604051610eec9291906144d6565b600060405180830381855af49150503d8060008114610f27576040519150601f19603f3d011682016040523d82523d6000602084013e610f2c565b606091505b509150915081610f9257604481511015610f4557600080fd5b60048101905080806020019051810190610f5f919061422a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067791906145cf565b80868581518110610fa557610fa5614a87565b60200260200101819052505050508080610fbe90614a1f565b915050610c96565b505092915050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6110196020850185613d66565b3361102760608701876145e2565b600081811061103857611038614a87565b905060200281019061104a919061474b565b611058906020810190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260208501356064820152608401600060405180830381600087803b1580156110d857600080fd5b505af11580156110ec573d6000803e3d6000fd5b5050505060005b61110060608401846145e2565b905081101561060c576111196104bf60608501856145e2565b61112660608401846145e2565b8281811061113657611136614a87565b9050602002810190611148919061474b565b611156906020810190613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61117e60608601866145e2565b8481811061118e5761118e614a87565b90506020028101906111a0919061474b565b6111ae9060208101906146b2565b6040518363ffffffff1660e01b81526004016111cb929190614582565b602060405180830381600087803b1580156111e557600080fd5b505af11580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906143a9565b91508061122981614a1f565b9150506110f3565b600061123c856130bf565b60005b86518110156113c55786818151811061125a5761125a614a87565b602002602001015160200151156112b5576112b087828151811061128057611280614a87565b6020026020010151600001518789848151811061129f5761129f614a87565b602002602001015160400151612da0565b6113b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc88838151811061130357611303614a87565b60200260200101516000015133898b868151811061132357611323614a87565b6020026020010151604001516040518563ffffffff1660e01b8152600401611380949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600060405180830381600087803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b505050505b806113bd81614a1f565b91505061123f565b506040517f7ba0e2e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690637ba0e2e79061141a9086908690600401614582565b602060405180830381600087803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146c91906143a9565b9050838110156114d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4e4f545f454e4f5547485f4c49515549444954595f4d494e54454400000000006044820152606401610677565b95945050505050565b6040513360248201523060448201526064810186905260848101859052600160a482015260ff841660c482015260e48101839052610104810182905260009073ffffffffffffffffffffffffffffffffffffffff881690638fcbaf0c90610124015b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161159191906144e6565b6000604051808303816000865af19150503d80600081146115ce576040519150601f19603f3d011682016040523d82523d6000602084013e6115d3565b606091505b505090508061163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5045524d49545f4641494c4544000000000000000000000000000000000000006044820152606401610677565b50505050505050565b611650856130bf565b61165c8533878761332d565b6040517f2a07b6c700000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff871690632a07b6c7906116b39087908790600401614582565b600060405180830381600087803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526117279190810190614038565b905060005b825181101561163e5760005b825181101561186a5783828151811061175357611753614a87565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061178757611787614a87565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611858578382815181106117c1576117c1614a87565b6020026020010151602001518382815181106117df576117df614a87565b6020026020010151602001511015611853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b61186a565b8061186281614a1f565b915050611738565b825181106118d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e434f52524543545f544f4b454e5f57495448445241574e000000000000006044820152606401610677565b50806118df81614a1f565b91505061172c565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301528281166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561198557600080fd5b505af115801561163e573d6000803e3d6000fd5b6119a48382846134a5565b505050565b60006119b4856130bf565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811633179091556001805473ffffffffffffffffffffffffffffffffffffffff88169216821790556040517f7ba0e2e7000000000000000000000000000000000000000000000000000000008152637ba0e2e790611a3e9086908690600401614582565b602060405180830381600087803b158015611a5857600080fd5b505af1158015611a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9091906143a9565b6000805460017fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925581541681179055905083811015611b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4e4f545f454e4f5547485f4c49515549444954595f4d494e54454400000000006044820152606401610677565b949350505050565b6000611b66611b4f6080840160608501613d66565b611b5f6060850160408601613d66565b8435612da0565b61078a6060830160408401613d66565b604051336024820152306044820152606481018690526084810185905260ff841660a482015260c4810183905260e4810182905260009073ffffffffffffffffffffffffffffffffffffffff88169063d505accf9061010401611543565b60005b611be182806145e2565b9050811015611fad57611bf482806145e2565b82818110611c0457611c04614a87565b9050602002810190611c169190614717565b611c279060608101906040016141ba565b15611ce057611cdb611c3983806145e2565b83818110611c4957611c49614a87565b9050602002810190611c5b9190614717565b611c69906020810190613d66565b611c7384806145e2565b84818110611c8357611c83614a87565b9050602002810190611c959190614717565b611ca6906040810190602001613d66565b611cb085806145e2565b85818110611cc057611cc0614a87565b9050602002810190611cd29190614717565b60600135612da0565b611e59565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611d2684806145e2565b84818110611d3657611d36614a87565b9050602002810190611d489190614717565b611d56906020810190613d66565b33611d6186806145e2565b86818110611d7157611d71614a87565b9050602002810190611d839190614717565b611d94906040810190602001613d66565b611d9e87806145e2565b87818110611dae57611dae614a87565b9050602002810190611dc09190614717565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526060909101356064820152608401600060405180830381600087803b158015611e4057600080fd5b505af1158015611e54573d6000803e3d6000fd5b505050505b611e99611e6683806145e2565b83818110611e7657611e76614a87565b9050602002810190611e889190614717565b6104ef906040810190602001613d66565b611ea382806145e2565b82818110611eb357611eb3614a87565b9050602002810190611ec59190614717565b611ed6906040810190602001613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611efb84806145e2565b84818110611f0b57611f0b614a87565b9050602002810190611f1d9190614717565b611f2b9060808101906146b2565b6040518363ffffffff1660e01b8152600401611f48929190614582565b602060405180830381600087803b158015611f6257600080fd5b505af1158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a91906143a9565b5080611fa581614a1f565b915050611bd7565b5060005b611fbe60208301836145e2565b90508110156123f457600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec61201260208601866145e2565b8581811061202257612022614a87565b9050602002810190612034919061477f565b612042906020810190613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260440160206040518083038186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e491906143a9565b905060006120f46008600a6148eb565b61210160208601866145e2565b8581811061211157612111614a87565b9050602002810190612123919061477f565b612134906060810190604001614462565b6121489067ffffffffffffffff16846149b6565b612152919061484f565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61219d60208701876145e2565b868181106121ad576121ad614a87565b90506020028101906121bf919061477f565b6121cd906020810190613d66565b306121db60208901896145e2565b888181106121eb576121eb614a87565b90506020028101906121fd919061477f565b61220e906040810190602001613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b506122d792506122b591505060208601866145e2565b858181106122c5576122c5614a87565b9050602002810190611e88919061477f565b6122e460208501856145e2565b848181106122f4576122f4614a87565b9050602002810190612306919061477f565b612317906040810190602001613d66565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61233f60208701876145e2565b8681811061234f5761234f614a87565b9050602002810190612361919061477f565b61236f9060608101906146b2565b6040518363ffffffff1660e01b815260040161238c929190614582565b602060405180830381600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123de91906143a9565b50505080806123ec90614a1f565b915050611fb1565b5060005b612405604083018361464a565b90508110156128a257600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec612459604086018661464a565b8581811061246957612469614a87565b61247f9260206080909202019081019150613d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260440160206040518083038186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252191906143a9565b9050612530604084018461464a565b8381811061254057612540614a87565b905060800201606001358110156125b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f544f4f5f4c4954544c455f5245434549564544000000000000000000000000006044820152606401610677565b6125c0604084018461464a565b838181106125d0576125d0614a87565b90506080020160400160208101906125e891906141ba565b156127545773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166397da6d30612636604086018661464a565b8581811061264657612646614a87565b61265c9260206080909202019081019150613d66565b3061266a604088018861464a565b8781811061267a5761267a614a87565b90506080020160200160208101906126929190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152600060648201526084810184905260a4016040805180830381600087803b15801561271557600080fd5b505af1158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d919061443e565b505061288f565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61279d604086018661464a565b858181106127ad576127ad614a87565b6127c39260206080909202019081019150613d66565b306127d1604088018861464a565b878181106127e1576127e1614a87565b90506080020160200160208101906127f99190613d66565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561287657600080fd5b505af115801561288a573d6000803e3d6000fd5b505050505b508061289a81614a1f565b9150506123f8565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f43414c4c4241434b00000000000000000000006044820152606401610677565b60006129358284018461438d565b9050806020015115612973578051600054604083015161296e929173ffffffffffffffffffffffffffffffffffffffff1690339061360e565b612a34565b805160005460408084015190517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015233604483015260648201527f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b505050505b5050600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117905550565b60015473ffffffffffffffffffffffffffffffffffffffff163314612ae5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f43414c4c4241434b00000000000000000000006044820152606401610677565b6000612af3828401846140fc565b905060005b8151811015612cbf57818181518110612b1357612b13614a87565b60200260200101516020015115612b8f57612b8a828281518110612b3957612b39614a87565b60200260200101516000015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633858581518110612b7957612b79614a87565b60200260200101516040015161360e565b612cad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc838381518110612bdd57612bdd614a87565b60200260200101516000015160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633868681518110612c1d57612c1d614a87565b6020026020010151604001516040518563ffffffff1660e01b8152600401612c7a949392919073ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600060405180830381600087803b158015612c9457600080fd5b505af1158015612ca8573d6000803e3d6000fd5b505050505b80612cb781614a1f565b915050612af8565b5050600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790555050565b6000612d1b7f0000000000000000000000000000000000000000000000000000000000000000613936565b905082811015612d87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e53554646494349454e545f574554480000000000000000000000000000006044820152606401610677565b80156119a457612d9681613a96565b6119a48282613263565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015612dfa57504715155b15612fdc576040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600160448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063566231189060640160206040518083038186803b158015612eb957600080fd5b505afa158015612ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef191906143a9565b9050804710612fda576040517f02b9446c00000000000000000000000000000000000000000000000000000000815260006004820181905230602483015273ffffffffffffffffffffffffffffffffffffffff85811660448401526064830191909152608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a40160408051808303818588803b158015612fa157600080fd5b505af1158015612fb5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109cd919061443e565b505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152336024830152838116604483015260006064830152608482018390527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c9060a4016040805180830381600087803b15801561308057600080fd5b505af1158015613094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b8919061443e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16613260576040517fa4063dbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a4063dbc9060240160206040518083038186803b15801561317357600080fd5b505afa158015613187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ab91906141d7565b613211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c494420504f4f4c00000000000000000000000000000000000000006044820152606401610677565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146132bd576040519150601f19603f3d011682016040523d82523d6000602084013e6132c2565b606091505b50509050806119a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610677565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916133cc91906144e6565b6000604051808303816000865af19150503d8060008114613409576040519150601f19603f3d011682016040523d82523d6000602084013e61340e565b606091505b509150915081801561343857508051158061343857508080602001905181019061343891906141d7565b6109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610677565b6020015190565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161353c91906144e6565b6000604051808303816000865af19150503d8060008114613579576040519150601f19603f3d011682016040523d82523d6000602084013e61357e565b606091505b50915091508180156135a85750805115806135a85750808060200190518101906135a891906141d7565b6130b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610677565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614801561366857504715155b15613852576040517f5662311800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600160448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063566231189060640160206040518083038186803b15801561372757600080fd5b505afa15801561373b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375f91906143a9565b9050804710613850576040517f02b9446c00000000000000000000000000000000000000000000000000000000815260006004820181905230602483015273ffffffffffffffffffffffffffffffffffffffff85811660448401526064830191909152608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a40160408051808303818588803b15801561380f57600080fd5b505af1158015613823573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613848919061443e565b505050613930565b505b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152838116604483015260006064830152608482018390527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c9060a4016040805180830381600087803b1580156138f857600080fd5b505af115801561390c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cd919061443e565b50505050565b604080513060248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff8616916139c891906144e6565b600060405180830381855afa9150503d8060008114613a03576040519150601f19603f3d011682016040523d82523d6000602084013e613a08565b606091505b5091509150818015613a1c57506020815110155b613a82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f42414c414e43455f4f465f4641494c45440000000000000000000000000000006044820152606401610677565b80806020019051810190611b3291906143a9565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d84604051602401613ae891815260200190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613b3691906144e6565b6000604051808303816000865af19150503d8060008114613b73576040519150601f19603f3d011682016040523d82523d6000602084013e613b78565b606091505b5091509150818015613b8c57506020815110155b6119a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f57495448445241575f46524f4d5f574554485f4641494c4544000000000000006044820152606401610677565b60008083601f840112613c0457600080fd5b50813567ffffffffffffffff811115613c1c57600080fd5b6020830191508360208260051b8501011115613c3757600080fd5b9250929050565b600082601f830112613c4f57600080fd5b81356020613c64613c5f8361482b565b6147dc565b82815281810190858301606080860288018501891015613c8357600080fd5b60005b86811015613caa57613c988a84613cfa565b85529385019391810191600101613c86565b509198975050505050505050565b60008083601f840112613cca57600080fd5b50813567ffffffffffffffff811115613ce257600080fd5b602083019150836020828501011115613c3757600080fd5b600060608284031215613d0c57600080fd5b6040516060810181811067ffffffffffffffff82111715613d2f57613d2f614ab6565b6040529050808235613d4081614ae5565b81526020830135613d5081614b07565b6020820152604092830135920191909152919050565b600060208284031215613d7857600080fd5b8135610c3a81614ae5565b600080600060608486031215613d9857600080fd5b8335613da381614ae5565b9250602084013591506040840135613dba81614ae5565b809150509250925092565b60008060008060608587031215613ddb57600080fd5b8435613de681614ae5565b935060208501359250604085013567ffffffffffffffff811115613e0957600080fd5b613e1587828801613cb8565b95989497509550505050565b600080600080600060808688031215613e3957600080fd5b8535613e4481614ae5565b94506020868101359450604087013567ffffffffffffffff80821115613e6957600080fd5b613e758a838b01613cb8565b90965094506060890135915080821115613e8e57600080fd5b508701601f81018913613ea057600080fd5b8035613eae613c5f8261482b565b8082825284820191508484018c868560061b8701011115613ece57600080fd5b60009450845b84811015613f1c576040828f031215613eeb578586fd5b613ef36147b3565b8235613efe81614ae5565b81528288013588820152845292860192604090910190600101613ed4565b505080955050505050509295509295909350565b600080600080600060808688031215613f4857600080fd5b8535613f5381614ae5565b945060208601359350604086013567ffffffffffffffff811115613f7657600080fd5b613f8288828901613cb8565b96999598509660600135949350505050565b60008060008060008060c08789031215613fad57600080fd5b8635613fb881614ae5565b95506020870135945060408701359350606087013560ff81168114613fdc57600080fd5b9598949750929560808101359460a0909101359350915050565b6000806020838503121561400957600080fd5b823567ffffffffffffffff81111561402057600080fd5b61402c85828601613bf2565b90969095509350505050565b6000602080838503121561404b57600080fd5b825167ffffffffffffffff81111561406257600080fd5b8301601f8101851361407357600080fd5b8051614081613c5f8261482b565b80828252848201915084840188868560061b87010111156140a157600080fd5b60009450845b848110156140ee57604080838c0312156140bf578687fd5b6140c76147b3565b83516140d281614ae5565b81528389015189820152855293870193909101906001016140a7565b509098975050505050505050565b60006020828403121561410e57600080fd5b813567ffffffffffffffff81111561412557600080fd5b611b3284828501613c3e565b60008060008060006080868803121561414957600080fd5b853567ffffffffffffffff8082111561416157600080fd5b61416d89838a01613c3e565b96506020880135915061417f82614ae5565b909450604087013593506060870135908082111561419c57600080fd5b506141a988828901613cb8565b969995985093965092949392505050565b6000602082840312156141cc57600080fd5b8135610c3a81614b07565b6000602082840312156141e957600080fd5b8151610c3a81614b07565b6000806020838503121561420757600080fd5b823567ffffffffffffffff81111561421e57600080fd5b61402c85828601613cb8565b60006020828403121561423c57600080fd5b815167ffffffffffffffff8082111561425457600080fd5b818401915084601f83011261426857600080fd5b81518181111561427a5761427a614ab6565b6142ab60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147dc565b91508082528560208285010111156142c257600080fd5b6142d38160208401602086016149f3565b50949350505050565b6000602082840312156142ee57600080fd5b813567ffffffffffffffff81111561430557600080fd5b820160608185031215610c3a57600080fd5b60006020828403121561432957600080fd5b813567ffffffffffffffff81111561434057600080fd5b820160808185031215610c3a57600080fd5b60006020828403121561436457600080fd5b813567ffffffffffffffff81111561437b57600080fd5b820160a08185031215610c3a57600080fd5b60006060828403121561439f57600080fd5b610c3a8383613cfa565b6000602082840312156143bb57600080fd5b5051919050565b600080604083850312156143d557600080fd5b8235915060208301356143e781614ae5565b809150509250929050565b60008060006040848603121561440757600080fd5b83359250602084013567ffffffffffffffff81111561442557600080fd5b61443186828701613bf2565b9497909650939450505050565b6000806040838503121561445157600080fd5b505080516020909101519092909150565b60006020828403121561447457600080fd5b813567ffffffffffffffff81168114610c3a57600080fd5b600081518084526144a48160208601602086016149f3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8183823760009101908152919050565b600082516144f88184602087016149f3565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614575577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261456385835161448c565b94509285019290850190600101614529565b5092979650505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b602081526000610c3a602083018461448c565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261461757600080fd5b83018035915067ffffffffffffffff82111561463257600080fd5b6020019150600581901b3603821315613c3757600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261467f57600080fd5b83018035915067ffffffffffffffff82111561469a57600080fd5b6020019150600781901b3603821315613c3757600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126146e757600080fd5b83018035915067ffffffffffffffff82111561470257600080fd5b602001915036819003821315613c3757600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618336030181126144f857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126144f857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126144f857600080fd5b6040805190810167ffffffffffffffff811182821017156147d6576147d6614ab6565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561482357614823614ab6565b604052919050565b600067ffffffffffffffff82111561484557614845614ab6565b5060051b60200190565b600082614885577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b808511156148e357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156148c9576148c9614a58565b808516156148d657918102915b93841c939080029061488f565b509250929050565b6000610c3a60ff841683600082614904575060016149b0565b81614911575060006149b0565b816001811461492757600281146149315761494d565b60019150506149b0565b60ff84111561494257614942614a58565b50506001821b6149b0565b5060208310610133831016604e8410600b8410161715614970575081810a6149b0565b61497a838361488a565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156149ac576149ac614a58565b0290505b92915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149ee576149ee614a58565b500290565b60005b83811015614a0e5781810151838201526020016149f6565b838111156139305750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a5157614a51614a58565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461326057600080fd5b801515811461326057600080fdfea2646970667358221220a0093aa0de01b7980a9b836859e9b671d2c635ce2361bf95f436000f6afcb75864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity((address,bool,uint256)[],address,uint256,bytes)": {
        "params": {
          "data": "Data required by the pool to add liquidity.",
          "minLiquidity": "Minimum output liquidity - caps slippage.",
          "pool": "Pool address to add liquidity to.",
          "tokenInput": "Token address and amount to add as liquidity."
        }
      },
      "addLiquidityLazy(address,uint256,bytes)": {
        "details": "The input tokens are sent to the pool during the callback."
      },
      "batch(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from this function.",
        "params": {
          "data": "ABI-encoded params for each of the calls to make to this contract."
        },
        "returns": {
          "results": "The results from each of the calls passed in via `data`."
        }
      },
      "burnLiquidity(address,uint256,bytes,(address,uint256)[])": {
        "params": {
          "data": "Data required by the pool to burn liquidity.",
          "liquidity": "Amount of liquidity tokens to burn.",
          "minWithdrawals": "Minimum amount of `bento` tokens to be returned.",
          "pool": "Pool address."
        }
      },
      "burnLiquiditySingle(address,uint256,bytes,uint256)": {
        "details": "The tokens are swapped automatically and the output is in a single token.",
        "params": {
          "data": "Data required by the pool to burn liquidity.",
          "liquidity": "Amount of liquidity tokens to burn.",
          "minWithdrawal": "Minimum amount of tokens to be returned.",
          "pool": "Pool address."
        }
      },
      "complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))": {
        "details": "This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.",
        "params": {
          "params": "This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details."
        }
      },
      "exactInput((address,uint256,uint256,(address,bytes)[]))": {
        "details": "Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.",
        "params": {
          "params": "This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps."
        }
      },
      "exactInputLazy(uint256,(address,bytes)[])": {
        "details": "Ensure that the pools are trusted before calling this function. The pools can steal users' tokens. This function will unlikely be used in production but it shows how to use callbacks. One use case will be arbitrage.",
        "params": {
          "amountOutMinimum": "Minimum amount of token B after the swap.",
          "path": "Addresses of the pools and data required by the pools for the swaps."
        }
      },
      "exactInputSingle((uint256,uint256,address,address,bytes))": {
        "details": "Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.",
        "params": {
          "params": "This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap."
        }
      },
      "exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))": {
        "details": "Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.",
        "params": {
          "params": "This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap."
        }
      },
      "exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))": {
        "details": "Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.",
        "params": {
          "params": "This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps."
        }
      },
      "permitThis(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Token amount to grant spending right over.",
          "deadline": "Termination for signed approval (UTC timestamp in seconds).",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "token": "Address of ERC-20 token.",
          "v": "The recovery byte of the signature."
        }
      },
      "permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "expiry": "Termination for signed approval - UTC timestamp in seconds.",
          "nonce": "Token owner's nonce - increases at each call to {permit}.",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "token": "Address of ERC-20 token.",
          "v": "The recovery byte of the signature."
        }
      }
    },
    "stateVariables": {
      "cachedMsgSender": {
        "details": "Used to ensure that `tridentSwapCallback` is called only by the authorized address. These are set when someone calls a flash swap and reset afterwards."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity((address,bool,uint256)[],address,uint256,bytes)": {
        "notice": "Add liquidity to a pool."
      },
      "addLiquidityLazy(address,uint256,bytes)": {
        "notice": "Add liquidity to a pool using callbacks - same as `addLiquidity`, but now with callbacks."
      },
      "batch(bytes[])": {
        "notice": "Provides batch function calls for this contract and returns the data from all of them if they all succeed. Adapted from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol, License-Identifier: GPL-2.0-or-later."
      },
      "bento()": {
        "notice": "BentoBox token vault."
      },
      "burnLiquidity(address,uint256,bytes,(address,uint256)[])": {
        "notice": "Burn liquidity tokens to get back `bento` tokens."
      },
      "burnLiquiditySingle(address,uint256,bytes,uint256)": {
        "notice": "Burn liquidity tokens to get back `bento` tokens."
      },
      "complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))": {
        "notice": "Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC."
      },
      "exactInput((address,uint256,uint256,(address,bytes)[]))": {
        "notice": "Swaps token A to token B indirectly by using multiple hops."
      },
      "exactInputLazy(uint256,(address,bytes)[])": {
        "notice": "Swaps token A to token B by using callbacks."
      },
      "exactInputSingle((uint256,uint256,address,address,bytes))": {
        "notice": "Swaps token A to token B directly. Swaps are done on `bento` tokens."
      },
      "exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))": {
        "notice": "Swaps token A to token B directly. It's the same as `exactInputSingle` except it takes raw ERC-20 tokens from the users and deposits them into `bento`."
      },
      "exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))": {
        "notice": "Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except it takes raw ERC-20 tokens from the users and deposits them into `bento`."
      },
      "permitThis(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Provides EIP-2612 signed approval for this contract to spend user tokens."
      },
      "permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Provides DAI-derived signed approval for this contract to spend user tokens."
      },
      "refundETH()": {
        "notice": "Recover mistakenly sent ETH."
      },
      "sweepBentoBoxToken(address,uint256,address)": {
        "notice": "Recover mistakenly sent `bento` tokens."
      },
      "sweepNativeToken(address,uint256,address)": {
        "notice": "Recover mistakenly sent ERC-20 tokens."
      },
      "tridentMintCallback(bytes)": {
        "notice": "Can be used by the pool 'mint' functionality to take tokens from the user."
      },
      "tridentSwapCallback(bytes)": {
        "notice": "Used by the pool 'flashSwap' functionality to take input tokens from the user."
      },
      "unwrapWETH(uint256,address)": {
        "notice": "Unwrap this contract's `wETH` into ETH"
      }
    },
    "notice": "Router contract that helps in swapping across Trident pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21,
        "contract": "contracts/TridentRouter.sol:TridentRouter",
        "label": "cachedMsgSender",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/TridentRouter.sol:TridentRouter",
        "label": "cachedPool",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 27,
        "contract": "contracts/TridentRouter.sol:TridentRouter",
        "label": "whitelistedPools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}