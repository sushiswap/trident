{
  "address": "0x0aBF10711A3Ed810d8D1312D223C735B35D985e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeda0d9a70aa3ac53c0ede521e6a4bd739d585056801615ada4efea4a0f630390",
  "receipt": {
    "to": null,
    "from": "0x58B4B6951e9174F153635574076241315D7d3503",
    "contractAddress": "0x0aBF10711A3Ed810d8D1312D223C735B35D985e6",
    "transactionIndex": 0,
    "gasUsed": "4179453",
    "logsBloom": "0x
    "blockHash": "0x660a1d1eba9ca9fd0bc00a1f5d05d0500266a7b368ad1b843187cc3d7b525e35",
    "transactionHash": "0xeda0d9a70aa3ac53c0ede521e6a4bd739d585056801615ada4efea4a0f630390",
    "logs": [],
    "blockNumber": 27205246,
    "cumulativeGasUsed": "4179453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB8ef8579EEBDCCCf69305418E49a3A545301b393"
  ],
  "solcInputHash": "54eedb95824944b9250147be5a2e4035",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Gupta\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident exchange Index Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/IndexPoolFactory.sol\":\"IndexPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimal BentoBox vault interface. \\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n    \\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n    \\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n    \\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n}\\n\",\"keccak256\":\"0x17c0d71c95bc369805bad3d93a59ead6588bf5e48232f1bc6b3064d193c12b67\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer interface.\\ninterface IMasterDeployer {\\n    function barFee() external view returns (uint256);\\n    \\n    function barFeeTo() external view returns (address);\\n    \\n    function bento() external view returns (address);\\n    \\n    function migrator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ed802a5e6005128dbee0885153b3d07fea3dfb8cf2b5544d8bc208cce2fb328\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    \\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xabe7c92de39e405012bd89d614fe4107a7323f8ed4bdc9a8dad5c2429c14fbcb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool callback interface.\\ninterface ITridentCallee {\\n    function tridentSwapCallback(bytes calldata data) external;\\n\\n    function tridentMintCallback(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x256e838362a3064201b37b3b7c08bc1421b173a6fea633176123f0b827b868c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/IndexPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\n\\n/// @notice Trident exchange pool template with constant mean formula for swapping among an array of ERC-20 tokens.\\n/// @dev The reserves are stored as bento shares.\\n///      The curve is applied to shares as well. This pool does not care about the underlying amounts.\\ncontract IndexPool is IPool, TridentERC20 {\\n    event Mint(address indexed sender, address tokenIn, uint256 amountIn, address indexed recipient);\\n    event Burn(address indexed sender, address tokenOut, uint256 amountOut, address indexed recipient);\\n\\n    uint256 public immutable swapFee;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n    address public immutable masterDeployer;\\n\\n    uint256 internal constant BASE = 10**18;\\n    uint256 internal constant MIN_TOKENS = 2;\\n    uint256 internal constant MAX_TOKENS = 8;\\n    uint256 internal constant MIN_FEE = BASE / 10**6;\\n    uint256 internal constant MAX_FEE = BASE / 10;\\n    uint256 internal constant MIN_WEIGHT = BASE;\\n    uint256 internal constant MAX_WEIGHT = BASE * 50;\\n    uint256 internal constant MAX_TOTAL_WEIGHT = BASE * 50;\\n    uint256 internal constant MIN_BALANCE = BASE / 10**12;\\n    uint256 internal constant INIT_POOL_SUPPLY = BASE * 100;\\n    uint256 internal constant MIN_POW_BASE = 1;\\n    uint256 internal constant MAX_POW_BASE = (2 * BASE) - 1;\\n    uint256 internal constant POW_PRECISION = BASE / 10**10;\\n    uint256 internal constant MAX_IN_RATIO = BASE / 2;\\n    uint256 internal constant MAX_OUT_RATIO = (BASE / 3) + 1;\\n    \\n    uint136 internal totalWeight;\\n    address[] internal tokens;\\n    \\n    uint256 public barFee;\\n    \\n    bytes32 public constant override poolIdentifier = \\\"Trident:Index\\\";\\n\\n    uint256 internal unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    mapping(address => Record) public records;\\n    struct Record {\\n        uint120 reserve;\\n        uint136 weight;\\n    }\\n\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address[] memory _tokens, uint136[] memory _weights, uint256 _swapFee) = abi.decode(\\n            _deployData,\\n            (address[], uint136[], uint256)\\n        );\\n        // @dev Factory ensures that the tokens are sorted.\\n        require(_tokens.length == _weights.length, \\\"INVALID_ARRAYS\\\");\\n        require(MIN_FEE <= _swapFee && _swapFee <= MAX_FEE, \\\"INVALID_SWAP_FEE\\\");\\n        require(MIN_TOKENS <= _tokens.length && _tokens.length <= MAX_TOKENS, \\\"INVALID_TOKENS_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(_tokens[i] != address(0), \\\"ZERO_ADDRESS\\\");\\n            require(MIN_WEIGHT <= _weights[i] && _weights[i] <= MAX_WEIGHT, \\\"INVALID_WEIGHT\\\");\\n            records[_tokens[i]] = Record({reserve: 0, weight: _weights[i]});\\n            tokens.push(_tokens[i]);\\n            totalWeight += _weights[i];\\n        }\\n        \\n        require(totalWeight <= MAX_TOTAL_WEIGHT, \\\"MAX_TOTAL_WEIGHT\\\");\\n        // @dev This burns initial LP supply.\\n        _mint(address(0), INIT_POOL_SUPPLY); \\n\\n        (, bytes memory _barFee) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFee.selector));\\n        (, bytes memory _barFeeTo) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFeeTo.selector));\\n        (, bytes memory _bento) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.bento.selector));\\n        \\n        swapFee = _swapFee;\\n        barFee = abi.decode(_barFee, (uint256));\\n        barFeeTo = abi.decode(_barFeeTo, (address));\\n        bento = abi.decode(_bento, (address));\\n        masterDeployer = _masterDeployer;\\n        unlocked = 1;\\n    }\\n    \\n    /// @dev Mints LP tokens - should be called via the router after transferring `bento` tokens.\\n    /// The router must ensure that sufficient LP tokens are minted by using the return value.\\n    function mint(bytes calldata data) public override lock returns (uint256 liquidity) {\\n        (address recipient, uint256 toMint) = abi.decode(data, (address, uint256));\\n        \\n        uint120 ratio = uint120(_div(toMint, totalSupply));\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address tokenIn = tokens[i];\\n            uint120 reserve = records[tokenIn].reserve;\\n            // @dev If token balance is '0', initialize with `ratio`.\\n            uint120 amountIn = reserve != 0 ? uint120(_mul(ratio, reserve)) : ratio;\\n            require(amountIn >= MIN_BALANCE, \\\"MIN_BALANCE\\\");\\n            // @dev Check Trident router has sent `amountIn` for skim into pool.\\n            unchecked { // @dev This is safe from overflow - only logged amounts handled.\\n                require(_balance(tokenIn) >= amountIn + reserve, \\\"NOT_RECEIVED\\\");\\n                records[tokenIn].reserve += amountIn;\\n            }\\n            emit Mint(msg.sender, tokenIn, amountIn, recipient);\\n        }\\n        _mint(recipient, toMint);\\n        liquidity = toMint;\\n    }\\n    \\n    /// @dev Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.\\n    function burn(bytes calldata data) public override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address recipient, bool unwrapBento, uint256 toBurn) = abi.decode(data, (address, bool, uint256));\\n        \\n        uint256 ratio = _div(toBurn, totalSupply);\\n        \\n        withdrawnAmounts = new TokenAmount[](tokens.length);\\n        \\n        _burn(address(this), toBurn);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address tokenOut = tokens[i];\\n            uint256 balance = records[tokenOut].reserve;\\n            uint120 amountOut = uint120(_mul(ratio, balance));\\n            require(amountOut != 0, \\\"ZERO_OUT\\\");\\n            // @dev This is safe from underflow - only logged amounts handled.\\n            unchecked {\\n                records[tokenOut].reserve -= amountOut;\\n            }\\n            _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n            withdrawnAmounts[i] = TokenAmount({token: tokenOut, amount: amountOut});\\n            emit Burn(msg.sender, tokenOut, amountOut, recipient);\\n        }\\n    }\\n    \\n    /// @dev Burns LP tokens sent to this contract and swaps one of the output tokens for another\\n    /// - i.e., the user gets a single token out by burning LP tokens.\\n    function burnSingle(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenOut, address recipient, bool unwrapBento, uint256 toBurn) = abi.decode(\\n            data,\\n            (address, address, bool, uint256)\\n        );\\n\\n        Record storage outRecord = records[tokenOut];\\n\\n        amountOut = _computeSingleOutGivenPoolIn(\\n            outRecord.reserve,\\n            outRecord.weight,\\n            totalSupply,\\n            totalWeight,\\n            toBurn,\\n            swapFee\\n        );\\n\\n        require(amountOut <= _mul(outRecord.reserve, MAX_OUT_RATIO), \\\"MAX_OUT_RATIO\\\");\\n        // @dev This is safe from underflow - only logged amounts handled.\\n        unchecked {\\n            outRecord.reserve -= uint120(amountOut);\\n        }\\n        _burn(address(this), toBurn);\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        emit Burn(msg.sender, tokenOut, amountOut, recipient);\\n    }\\n    \\n    /// @dev Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    function swap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address tokenOut, address recipient, bool unwrapBento, uint256 amountIn) = abi.decode(\\n            data,\\n            (address, address, address, bool, uint256)\\n        );\\n\\n        Record storage inRecord = records[tokenIn];\\n        Record storage outRecord = records[tokenOut];\\n\\n        require(amountIn <= _mul(inRecord.reserve, MAX_IN_RATIO), \\\"MAX_IN_RATIO\\\");\\n\\n        amountOut = _getAmountOut(amountIn, inRecord.reserve, inRecord.weight, outRecord.reserve, outRecord.weight);\\n        // @dev Check Trident router has sent `amountIn` for skim into pool.\\n        unchecked { // @dev This is safe from under/overflow - only logged amounts handled.\\n            require(_balance(tokenIn) >= amountIn + inRecord.reserve, \\\"NOT_RECEIVED\\\");\\n            inRecord.reserve += uint120(amountIn);\\n            outRecord.reserve -= uint120(amountOut);\\n        }\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n    \\n    /// @dev Swaps one token for another. The router must support swap callbacks and ensure there isn't too much slippage.\\n    function flashSwap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (\\n            address tokenIn,\\n            address tokenOut,\\n            address recipient,\\n            bool unwrapBento,\\n            uint256 amountIn,\\n            bytes memory context\\n        ) = abi.decode(data, (address, address, address, bool, uint256, bytes));\\n\\n        Record storage inRecord = records[tokenIn];\\n        Record storage outRecord = records[tokenOut];\\n\\n        require(amountIn <= _mul(inRecord.reserve, MAX_IN_RATIO), \\\"MAX_IN_RATIO\\\");\\n\\n        amountOut = _getAmountOut(amountIn, inRecord.reserve, inRecord.weight, outRecord.reserve, outRecord.weight);\\n\\n        ITridentCallee(msg.sender).tridentSwapCallback(context);\\n        // @dev Check Trident router has sent `amountIn` for skim into pool.\\n        unchecked { // @dev This is safe from under/overflow - only logged amounts handled.\\n            require(_balance(tokenIn) >= amountIn + inRecord.reserve, \\\"NOT_RECEIVED\\\");\\n            inRecord.reserve += uint120(amountIn);\\n            outRecord.reserve -= uint120(amountOut);\\n        }\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n    \\n    /// @dev Updates `barFee` for Trident protocol.\\n    function updateBarFee() public {\\n        (, bytes memory _barFee) = masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFee.selector));\\n        barFee = abi.decode(_barFee, (uint256));\\n    }\\n    \\n    function _balance(address token) internal view returns (uint256 balance) {\\n        (, bytes memory data) = bento.staticcall(abi.encodeWithSelector(IBentoBoxMinimal.balanceOf.selector, \\n            token, address(this)));\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    function _getAmountOut(\\n        uint256 tokenInAmount,\\n        uint256 tokenInBalance,\\n        uint256 tokenInWeight,\\n        uint256 tokenOutBalance,\\n        uint256 tokenOutWeight\\n    ) internal view returns (uint256 amountOut) {\\n        uint256 weightRatio = _div(tokenInWeight, tokenOutWeight);\\n        // @dev This is safe from under/overflow - only logged amounts handled.\\n        unchecked {\\n            uint256 adjustedIn = _mul(tokenInAmount, (BASE - swapFee));\\n            uint256 a = _div(tokenInBalance, tokenInBalance + adjustedIn);\\n            uint256 b = _compute(a, weightRatio);\\n            uint256 c = BASE - b;\\n            amountOut = _mul(tokenOutBalance, c);\\n        }\\n    }\\n\\n    function _compute(uint256 base, uint256 exp) internal pure returns (uint256 output) {\\n        require(MIN_POW_BASE <= base && base <= MAX_POW_BASE, \\\"INVALID_BASE\\\");\\n        \\n        uint256 whole = (exp / BASE) * BASE;   \\n        uint256 remain = exp - whole;\\n        uint256 wholePow = _pow(base, whole / BASE);\\n        \\n        if (remain == 0) output = wholePow;\\n        \\n        uint256 partialResult = _powApprox(base, remain, POW_PRECISION);\\n        output = _mul(wholePow, partialResult);\\n    }\\n\\n    function _computeSingleOutGivenPoolIn(\\n        uint256 tokenOutBalance,\\n        uint256 tokenOutWeight,\\n        uint256 _totalSupply,\\n        uint256 _totalWeight,\\n        uint256 toBurn,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256 amountOut) {\\n        uint256 normalizedWeight = _div(tokenOutWeight, _totalWeight);\\n        uint256 newPoolSupply = _totalSupply - toBurn;\\n        uint256 poolRatio = _div(newPoolSupply, _totalSupply);\\n        uint256 tokenOutRatio = _pow(poolRatio, _div(BASE, normalizedWeight));\\n        uint256 newBalanceOut = _mul(tokenOutRatio, tokenOutBalance);\\n        uint256 tokenAmountOutBeforeSwapFee = tokenOutBalance - newBalanceOut;\\n        uint256 zaz = (BASE - normalizedWeight) * _swapFee;\\n        amountOut = _mul(tokenAmountOutBeforeSwapFee, (BASE - zaz));\\n    }\\n    \\n    function _pow(uint256 a, uint256 n) internal pure returns (uint256 output) {\\n        output = n % 2 != 0 ? a : BASE;\\n        for (n /= 2; n != 0; n /= 2) \\n            a = a * a;\\n            if (n % 2 != 0) output = output * a;\\n    }\\n    \\n    function _powApprox(uint256 base, uint256 exp, uint256 precision) internal pure returns (uint256 sum) {\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = _subFlag(base, BASE);\\n        uint256 term = BASE;\\n        sum = term;\\n        bool negative;\\n\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BASE;\\n            (uint256 c, bool cneg) = _subFlag(a, (bigK - BASE));\\n            term = _mul(term, _mul(c, x));\\n            term = _div(term, bigK);\\n            if (term == 0) break;\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sum - term;\\n            } else {\\n                sum = sum + term;\\n            }\\n        }\\n    }\\n    \\n    function _subFlag(uint256 a, uint256 b) internal pure returns (uint256 difference, bool flag) {\\n        // @dev This is safe from underflow - if/else flow performs checks. \\n        unchecked {\\n            if (a >= b) {\\n                (difference, flag) = (a - b, false);\\n            } else {\\n                (difference, flag) = (b - a, true);\\n            }\\n        }\\n    }\\n    \\n    function _mul(uint256 a, uint256 b) internal pure returns (uint256 c2) {\\n        uint256 c0 = a * b;\\n        uint256 c1 = c0 + (BASE / 2);\\n        c2 = c1 / BASE;\\n    }\\n    \\n    function _div(uint256 a, uint256 b) internal pure returns (uint256 c2) {\\n        uint256 c0 = a * BASE;\\n        uint256 c1 = c0 + (b / 2);\\n        c2 = c1 / b;\\n    }\\n    \\n    function _transfer(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            (bool success, ) = bento.call(abi.encodeWithSelector(IBentoBoxMinimal.withdraw.selector, \\n                token, address(this), to, 0, shares));\\n            require(success, \\\"WITHDRAW_FAILED\\\");\\n        } else {\\n            (bool success, ) = bento.call(abi.encodeWithSelector(IBentoBoxMinimal.transfer.selector, \\n                token, address(this), to, shares));\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n    }\\n    \\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = tokens;\\n    }\\n    \\n    function getAmountOut(bytes calldata data) public view override returns (uint256 amountOut) {\\n        (\\n            uint256 tokenInAmount,\\n            uint256 tokenInBalance,\\n            uint256 tokenInWeight,\\n            uint256 tokenOutBalance,\\n            uint256 tokenOutWeight\\n        ) = abi.decode(data, (uint256, uint256, uint256, uint256, uint256));\\n        amountOut = _getAmountOut(tokenInAmount, tokenInBalance, tokenInWeight, tokenOutBalance, tokenOutWeight);\\n    }\\n    \\n    function getReservesAndWeights() public view returns (uint256[] memory reserves, uint136[] memory weights) {\\n        uint256 length = tokens.length;\\n        reserves = new uint256[](length);\\n        weights = new uint136[](length);\\n        // @dev This is safe from overflow - `tokens` `length` is bound to '8'.\\n        unchecked {\\n            for (uint256 i = 0; i < length; i++) {\\n                reserves[i] = records[tokens[i]].reserve;\\n                weights[i] = records[tokens[i]].weight;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x293bcc45c12c8f1f87dea6afb256280406413788b403bbbc2d5df31de999e356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/IndexPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IndexPool.sol\\\";\\nimport \\\"./PoolDeployer.sol\\\";\\n\\n/// @notice Contract for deploying Trident exchange Index Pool with configurations.\\n/// @author Mudit Gupta\\ncontract IndexPoolFactory is PoolDeployer {\\n    constructor(address _masterDeployer) PoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address[] memory tokens, , ) = abi.decode(_deployData, (address[], uint256[], uint256));\\n\\n        // @dev Salt is not actually needed since `_deployData` is part of creationCode and already contains the salt.\\n        bytes32 salt = keccak256(_deployData);\\n        pool = address(new IndexPool{salt: salt}(_deployData, masterDeployer));\\n        _registerPool(pool, tokens, salt);\\n    }\\n}\\n\",\"keccak256\":\"0x53c3f71b0c373c1f172fb5f13669556808812a70254f63deede80e7b5d43d12b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/PoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer for whitelisted template factories.\\n/// @author Mudit Gupta.\\nabstract contract PoolDeployer {\\n    address public immutable masterDeployer;\\n\\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes32 => address) public configAddress;\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == masterDeployer, \\\"UNAUTHORIZED_DEPLOYER\\\");\\n        _;\\n    }\\n\\n    constructor(address _masterDeployer) {\\n        require(_masterDeployer != address(0), \\\"ZERO_ADDRESS\\\");\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _registerPool(\\n        address pool,\\n        address[] memory tokens,\\n        bytes32 salt\\n    ) internal onlyMaster {\\n        require(configAddress[salt] == address(0), \\\"POOL_ALREADY_DEPLOYED\\\");\\n        // @dev Store the address of the deployed contract.\\n        configAddress[salt] = pool;\\n        // @dev Attacker used underflow, it was not very effective. poolimon!\\n        // null token array would cause deployment to fail via out of bounds memory axis/gas limit.\\n        unchecked {\\n            for (uint256 i; i < tokens.length - 1; i++) {\\n                require(tokens[i] < tokens[i + 1], \\\"INVALID_TOKEN_ORDER\\\");\\n                for (uint256 j = i + 1; j < tokens.length; j++) {\\n                    pools[tokens[i]][tokens[j]].push(pool);\\n                    pools[tokens[j]][tokens[i]].push(pool);\\n                }\\n            }\\n        }\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](endIndex - startIndex);\\n        for (uint256 i = 0; startIndex < endIndex; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex];\\n            startIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09d2fd7a280df2f2d756ce9303f2a31f364e1b9c20a41c7e77d426f520b01329\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/TridentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool ERC-20 with EIP-2612 extension.\\n/// @author Adapted from RariCapital, https://github.com/Rari-Capital/solmate/blob/main/src/erc20/ERC20.sol,\\n/// License-Identifier: AGPL-3.0-only.\\nabstract contract TridentERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n\\n    string public constant name = \\\"Sushi LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    /// @notice owner -> balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner -> spender -> allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice The EIP-712 typehash for this contract's {permit} struct.\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /// @notice The EIP-712 typehash for this contract's domain.\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    /// @notice owner -> nonce mapping used in {permit}.\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice Approves `amount` from `msg.sender` to be spent by `spender`.\\n    /// @param spender Address of the party that can pull tokens from `msg.sender`'s account.\\n    /// @param amount The maximum collective `amount` that `spender` can pull.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient`. Caller needs approval from `from`.\\n    /// @param sender Address to pull tokens `from`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[sender][msg.sender] != type(uint256).max) {\\n            allowance[sender][msg.sender] -= amount;\\n        }\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Triggers an approval from `owner` to `spender`.\\n    /// @param owner The address to approve from.\\n    /// @param spender The address to be approved.\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite).\\n    /// @param deadline The time at which to expire the signature.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline)))\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n        allowance[recoveredAddress][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address recipient, uint256 amount) internal {\\n        totalSupply += amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burn(address sender, uint256 amount) internal {\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from underflow - users won't ever\\n        // have a balance larger than `totalSupply`.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n        emit Transfer(sender, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe7367a04320e536bac3b49b54a62204a8c2b93d8ec28cfb8205342d9b138263b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051614c01380380614c0183398101604081905261002f9161008f565b806001600160a01b0381166100795760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640160405180910390fd5b60601b6001600160601b031916608052506100bf565b6000602082840312156100a157600080fd5b81516001600160a01b03811681146100b857600080fd5b9392505050565b60805160601c614b166100eb6000396000818161015a0152818161023501526103f90152614b166000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806371a25812116200005657806371a25812146200012e578063cf58879a1462000154578063f6ab6d99146200017c57600080fd5b8063169c4cef146200008057806327c3cae114620000c15780635bc93d6c14620000d8575b600080fd5b6200009762000091366004620008fd565b620001b5565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b62000097620000d236600462000a8b565b62000208565b6200011f620000e9366004620008bf565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000b8565b620001456200013f36600462000943565b620002a7565b604051620000b8919062000b47565b620000977f000000000000000000000000000000000000000000000000000000000000000081565b620000976200018d36600462000a71565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528260005260406000206020528160005260406000208181548110620001de57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b600080828060200190518101906200022191906200098e565b5050905060008380519060200120905080847f0000000000000000000000000000000000000000000000000000000000000000604051620002629062000837565b6200026f92919062000ba3565b8190604051809103906000f590508015801562000290573d6000803e3d6000fd5b509250620002a0838383620003e1565b5050919050565b6060620002b5838362000cb0565b67ffffffffffffffff811115620002d057620002d062000d64565b604051908082528060200260200182016040528015620002fa578160200160208202803683370190505b50905060005b82841015620003d85773ffffffffffffffffffffffffffffffffffffffff8087166000908152602081815260408083209389168352929052208054859081106200034e576200034e62000d35565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106200038e576200038e62000d35565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620003bf8162000cca565b9450508080620003cf9062000cca565b91505062000300565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f4445504c4f594552000000000000000000000060448201526064015b60405180910390fd5b60008181526001602052604090205473ffffffffffffffffffffffffffffffffffffffff161562000514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f504f4f4c5f414c52454144595f4445504c4f594544000000000000000000000060448201526064016200047d565b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b6001835103811015620008315782816001018151811062000586576200058662000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110620005b957620005b962000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161062000640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f544f4b454e5f4f524445520000000000000000000000000060448201526064016200047d565b600181015b8351811015620008275760008085848151811062000667576200066762000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858381518110620006c057620006c062000d35565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001692881692909217909155845181908690849081106200074f576200074f62000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858481518110620007a857620007a862000d35565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091550162000645565b5060010162000561565b50505050565b613d278062000dba83390190565b600082601f8301126200085757600080fd5b81516020620008706200086a8362000c89565b62000c37565b80838252828201915082860187848660051b89010111156200089157600080fd5b60005b85811015620008b25781518452928401929084019060010162000894565b5090979650505050505050565b60008060408385031215620008d357600080fd5b8235620008e08162000d93565b91506020830135620008f28162000d93565b809150509250929050565b6000806000606084860312156200091357600080fd5b8335620009208162000d93565b92506020840135620009328162000d93565b929592945050506040919091013590565b600080600080608085870312156200095a57600080fd5b8435620009678162000d93565b93506020850135620009798162000d93565b93969395505050506040820135916060013590565b600080600060608486031215620009a457600080fd5b835167ffffffffffffffff80821115620009bd57600080fd5b818601915086601f830112620009d257600080fd5b81516020620009e56200086a8362000c89565b8083825282820191508286018b848660051b890101111562000a0657600080fd5b600096505b8487101562000a3657805162000a218162000d93565b83526001969096019591830191830162000a0b565b509189015191975090935050508082111562000a5157600080fd5b5062000a608682870162000845565b925050604084015190509250925092565b60006020828403121562000a8457600080fd5b5035919050565b6000602080838503121562000a9f57600080fd5b823567ffffffffffffffff8082111562000ab857600080fd5b818501915085601f83011262000acd57600080fd5b81358181111562000ae25762000ae262000d64565b62000b14847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000c37565b9150808252868482850101111562000b2b57600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b9757835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000b63565b50909695505050505050565b604081526000835180604084015260005b8181101562000bd3576020818701810151606086840101520162000bb4565b8181111562000be6576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171562000c815762000c8162000d64565b604052919050565b600067ffffffffffffffff82111562000ca65762000ca662000d64565b5060051b60200190565b60008282101562000cc55762000cc562000d06565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000cff5762000cff62000d06565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000db657600080fd5b5056fe6101206040523480156200001257600080fd5b5060405162003d2738038062003d278339810160408190526200003591620009bd565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120608081815250506000806000848060200190518101906200012d9190620008db565b92509250925081518351146200017b5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41525241595360901b60448201526064015b60405180910390fd5b8062000193620f4240670de0b6b3a764000062000b4e565b11158015620001b65750620001b2600a670de0b6b3a764000062000b4e565b8111155b620001f75760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b604482015260640162000172565b82516002111580156200020c57506008835111155b6200025a5760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f544f4b454e535f4c454e4754480000000000000000000000604482015260640162000172565b60005b8351811015620005035760006001600160a01b031684828151811062000287576200028762000bfa565b60200260200101516001600160a01b03161415620002d75760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000172565b828181518110620002ec57620002ec62000bfa565b60200260200101516001600160881b0316670de0b6b3a7640000111580156200034e575062000325670de0b6b3a7640000603262000b71565b8382815181106200033a576200033a62000bfa565b60200260200101516001600160881b031611155b6200038d5760405162461bcd60e51b815260206004820152600e60248201526d1253959053125117d5d15251d21560921b604482015260640162000172565b604051806040016040528060006001600160781b03168152602001848381518110620003bd57620003bd62000bfa565b60200260200101516001600160881b031681525060086000868481518110620003ea57620003ea62000bfa565b6020908102919091018101516001600160a01b0316825281810192909252604001600020825192909101516001600160881b0316600160781b026001600160781b0390921691909117905583516005908590839081106200044f576200044f62000bfa565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558251839082908110620004a157620004a162000bfa565b602090810291909101015160048054600090620004c99084906001600160881b031662000b05565b92506101000a8154816001600160881b0302191690836001600160881b031602179055508080620004fa9062000bc6565b9150506200025d565b5062000519670de0b6b3a7640000603262000b71565b6004546001600160881b03161115620005685760405162461bcd60e51b815260206004820152601060248201526f13505617d513d5105317d5d15251d21560821b604482015260640162000172565b62000589600062000583670de0b6b3a7640000606462000b71565b620007b7565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b03871691620005cd919062000a8e565b600060405180830381855afa9150503d80600081146200060a576040519150601f19603f3d011682016040523d82523d6000602084013e6200060f565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b0388169162000658919062000a8e565b600060405180830381855afa9150503d806000811462000695576040519150601f19603f3d011682016040523d82523d6000602084013e6200069a565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b03891691620006e3919062000a8e565b600060405180830381855afa9150503d806000811462000720576040519150601f19603f3d011682016040523d82523d6000602084013e62000725565b606091505b5060a086905284519092506200074691508401602090810190850162000a74565b6006558151620007609083016020908101908401620008b4565b60601b6001600160601b03191660c0528051620007879060209083018101908301620008b4565b6001600160601b0319606091821b811660e05297901b90961661010052505060016007555062000c3f9350505050565b80600080828254620007ca919062000b33565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600082601f8301126200083557600080fd5b815160206200084e620008488362000adf565b62000aac565b80838252828201915082860187848660051b89010111156200086f57600080fd5b6000805b86811015620008a65782516001600160881b038116811462000893578283fd5b8552938501939185019160010162000873565b509198975050505050505050565b600060208284031215620008c757600080fd5b8151620008d48162000c26565b9392505050565b600080600060608486031215620008f157600080fd5b83516001600160401b03808211156200090957600080fd5b818601915086601f8301126200091e57600080fd5b8151602062000931620008488362000adf565b8083825282820191508286018b848660051b89010111156200095257600080fd5b600096505b84871015620009825780516200096d8162000c26565b83526001969096019591830191830162000957565b50918901519197509093505050808211156200099d57600080fd5b50620009ac8682870162000823565b925050604084015190509250925092565b60008060408385031215620009d157600080fd5b82516001600160401b0380821115620009e957600080fd5b818501915085601f830112620009fe57600080fd5b81518181111562000a135762000a1362000c10565b62000a28601f8201601f191660200162000aac565b915080825286602082850101111562000a4057600080fd5b62000a5381602084016020860162000b93565b508093505050602083015162000a698162000c26565b809150509250929050565b60006020828403121562000a8757600080fd5b5051919050565b6000825162000aa281846020870162000b93565b9190910192915050565b604051601f8201601f191681016001600160401b038111828210171562000ad75762000ad762000c10565b604052919050565b60006001600160401b0382111562000afb5762000afb62000c10565b5060051b60200190565b60006001600160881b0382811684821680830382111562000b2a5762000b2a62000be4565b01949350505050565b6000821982111562000b495762000b4962000be4565b500190565b60008262000b6c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161562000b8e5762000b8e62000be4565b500290565b60005b8381101562000bb057818101518382015260200162000b96565b8381111562000bc0576000848401525b50505050565b600060001982141562000bdd5762000bdd62000be4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000c3c57600080fd5b50565b60805160a05160c05160601c60e05160601c6101005160601c61306962000cbe6000396000818161057b01526117c70152600081816103ed015281816120580152818161218701526122fd0152600061026b01526000818161041401528181611a0d0152611f580152600081816103340152611c2101526130696000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806367e4ac2c11610104578063a69840a8116100a2578063c14ad80211610071578063c14ad8021461056d578063cf58879a14610576578063d505accf1461059d578063dd62ed3e146105b057600080fd5b8063a69840a81461050d578063a8f1f52e14610534578063a9059cbb14610547578063af8c09bf1461055a57600080fd5b80637ecebe00116100de5780637ecebe00146104915780638ae45441146104b157806392bc3219146104c757806395d89b41146104d157600080fd5b806367e4ac2c1461044957806370a082311461045e5780637ba0e2e71461047e57600080fd5b806330adf81f11610171578063469e90671161014b578063469e9067146103565780634da31827146103e857806354cf2aeb1461040f578063627dd56a1461043657600080fd5b806330adf81f146102ee578063313ce567146103155780633644e5151461032f57600080fd5b80630c0a0cd2116101ad5780630c0a0cd21461026657806318160ddd146102b257806323b872dd146102bb5780632a07b6c7146102ce57600080fd5b8063053da1c8146101d457806306fdde03146101fa578063095ea7b314610243575b600080fd5b6101e76101e2366004612bcd565b6105db565b6040519081526020015b60405180910390f35b6102366040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b6040516101f19190612e46565b610256610251366004612ab0565b610983565b60405190151581526020016101f1565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b6101e760005481565b6102566102c9366004612b15565b6109fd565b6102e16102dc366004612bcd565b610b49565b6040516101f19190612d53565b6101e77f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61031d601281565b60405160ff90911681526020016101f1565b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b6103af610364366004612884565b6008602052600090815260409020546effffffffffffffffffffffffffffff8116906f01000000000000000000000000000000900470ffffffffffffffffffffffffffffffffff1682565b604080516effffffffffffffffffffffffffffff909316835270ffffffffffffffffffffffffffffffffff9091166020830152016101f1565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610444366004612bcd565b610eca565b6104516111f4565b6040516101f19190612cf9565b6101e761046c366004612884565b60016020526000908152604090205481565b6101e761048c366004612bcd565b611263565b6101e761049f366004612884565b60036020526000908152604090205481565b6104b9611585565b6040516101f1929190612db8565b6104cf611755565b005b6102366040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6101e77f54726964656e743a496e6465780000000000000000000000000000000000000081565b6101e7610542366004612bcd565b611850565b610256610555366004612ab0565b611886565b6101e7610568366004612bcd565b61190b565b6101e760065481565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b6104cf6105ab366004612b56565b611b8e565b6101e76105be366004612adc565b600260209081526000928352604080842090915290825290205481565b600060075460011461064e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260075560008080808080610666888a018a612903565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260086020526040808220928816825290208154979d50959b5093995091975095509350916106d4906effffffffffffffffffffffffffffff166106cf6002670de0b6b3a7640000612e71565b611ef6565b84111561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f00000000000000000000000000000000000000006044820152606401610645565b815481546107939186916effffffffffffffffffffffffffffff8083169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000091829004811693928316929190910416611f41565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152909950339063bd50c7b1906107d2908690600401612e46565b600060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505083546effffffffffffffffffffffffffffff1686019150610824905089611fcb565b101561088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b81546effffffffffffffffffffffffffffff808216860181167fffffffffffffffffffffffffffffffffff00000000000000000000000000000092831617845582548082168c900390911691161781556108e8878a88886120e4565b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062878d604051610967929190918252602082015260400190565b60405180910390a4505060016007555094979650505050505050565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109eb9086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610a9a5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610a94908490612ec2565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610acf908490612ec2565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b379086815260200190565b60405180910390a35060019392505050565b6060600754600114610bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b600260075560008080610bcc85870187612a72565b9250925092506000610be0826000546123dc565b60055490915067ffffffffffffffff811115610bfe57610bfe612fdf565b604051908082528060200260200182016040528015610c4357816020015b6040805180820190915260008082526020820152815260200190600190039081610c1c5790505b509450610c503083612416565b60005b600554811015610eb957600060058281548110610c7257610c72612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260408220549092506effffffffffffffffffffffffffffff1690610cc28583611ef6565b90506effffffffffffffffffffffffffffff8116610d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5a45524f5f4f55540000000000000000000000000000000000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260086020526040902080547fffffffffffffffffffffffffffffffffff00000000000000000000000000000081166effffffffffffffffffffffffffffff918216849003821617909155610db190849083168a8a6120e4565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001826effffffffffffffffffffffffffffff16815250898581518110610dff57610dff612fb0565b60200260200101819052508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc3738584604051610e9b92919073ffffffffffffffffffffffffffffffffffffffff9290921682526effffffffffffffffffffffffffffff16602082015260400190565b60405180910390a35050508080610eb190612f05565b915050610c53565b505060016007555091949350505050565b6000600754600114610f38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b6002600755600080808080610f4f878901896128a1565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260086020526040808220928716825290208154969b50949950929750909550935091610fb6906effffffffffffffffffffffffffffff166106cf6002670de0b6b3a7640000612e71565b83111561101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f00000000000000000000000000000000000000006044820152606401610645565b815481546110759185916effffffffffffffffffffffffffffff8083169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000091829004811693928316929190910416611f41565b82549098506effffffffffffffffffffffffffffff16830161109688611fcb565b10156110fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b81546effffffffffffffffffffffffffffff808216850181167fffffffffffffffffffffffffffffffffff00000000000000000000000000000092831617845582548082168b9003909116911617815561115a868987876120e4565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062868c6040516111d9929190918252602082015260400190565b60405180910390a45050600160075550939695505050505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561125957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161122e575b5050505050905090565b60006007546001146112d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b60026007556000806112e584860186612ab0565b9150915060006112f7826000546123dc565b905060005b60055481101561156c5760006005828154811061131b5761131b612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260408220549092506effffffffffffffffffffffffffffff16908161136c5784611398565b611398856effffffffffffffffffffffffffffff16836effffffffffffffffffffffffffffff16611ef6565b90506113b164e8d4a51000670de0b6b3a7640000612e71565b816effffffffffffffffffffffffffffff16101561142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d494e5f42414c414e43450000000000000000000000000000000000000000006044820152606401610645565b8181016effffffffffffffffffffffffffffff1661144884611fcb565b10156114b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffff00000000000000000000000000000081166effffffffffffffffffffffffffffff918216880182161790915582519384528516908301529189169133917ff9403b28cc8805935e0ce6943ed646d5fde3d1e14f6b398e85bfa2851d1b85f7910160405180910390a3505050808061156490612f05565b9150506112fc565b5061157783836124a9565b506001600755949350505050565b60055460609081908067ffffffffffffffff8111156115a6576115a6612fdf565b6040519080825280602002602001820160405280156115cf578160200160208202803683370190505b5092508067ffffffffffffffff8111156115eb576115eb612fdf565b604051908082528060200260200182016040528015611614578160200160208202803683370190505b50915060005b8181101561174f57600860006005838154811061163957611639612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205484516effffffffffffffffffffffffffffff9091169085908390811061169357611693612fb0565b60200260200101818152505060086000600583815481106116b6576116b6612fb0565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205483516f0100000000000000000000000000000090910470ffffffffffffffffffffffffffffffffff169084908390811061172557611725612fb0565b70ffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161161a565b50509091565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916117f29190612cdd565b600060405180830381855afa9150503d806000811461182d576040519150601f19603f3d011682016040523d82523d6000602084013e611832565b606091505b509150508080602001905181019061184a9190612c3f565b60065550565b6000808080808061186387890189612c58565b9450945094509450945061187a8585858585611f41565b98975050505050505050565b336000908152600160205260408120805483919083906118a7908490612ec2565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109eb9086815260200190565b6000600754600114611979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b6002600755600080808061198f86880188612a23565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260086020526040812080549154600454969a509498509296509094509092611a31926effffffffffffffffffffffffffffff83169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000090910481169216867f0000000000000000000000000000000000000000000000000000000000000000612519565b8154909650611a69906effffffffffffffffffffffffffffff16611a5e6003670de0b6b3a7640000612e71565b6106cf906001612e59565b861115611ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d41585f4f55545f524154494f000000000000000000000000000000000000006044820152606401610645565b80546effffffffffffffffffffffffffffff808216889003167fffffffffffffffffffffffffffffffffff000000000000000000000000000000909116178155611b1c3083612416565b611b28858786866120e4565b6040805173ffffffffffffffffffffffffffffffffffffffff87811682526020820189905286169133917f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505060016007555091949350505050565b42841015611bf8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9187611c7383612f05565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611d149291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611d9d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611e1857508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e415455524500000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600080611f038385612e85565b90506000611f1a6002670de0b6b3a7640000612e71565b611f249083612e59565b9050611f38670de0b6b3a764000082612e71565b95945050505050565b600080611f4e85846123dc565b90506000611f86887f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000003611ef6565b90506000611f9688838a016123dc565b90506000611fa482856125c8565b9050670de0b6b3a7640000819003611fbc8882611ef6565b9b9a5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff83811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec00000000000000000000000000000000000000000000000000000000179052915160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916120859190612cdd565b600060405180830381855afa9150503d80600081146120c0576040519150601f19603f3d011682016040523d82523d6000602084013e6120c5565b606091505b50915050808060200190518101906120dd9190612c3f565b9392505050565b8015612266576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f0000000000000000000000000000000000000000000000000000000000000000909116916121b391612cdd565b6000604051808303816000865af19150503d80600081146121f0576040519150601f19603f3d011682016040523d82523d6000602084013e6121f5565b606091505b5050905080612260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c454400000000000000000000000000000000006044820152606401610645565b506123d6565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f0000000000000000000000000000000000000000000000000000000000000000169161232791612cdd565b6000604051808303816000865af19150503d8060008114612364576040519150601f19603f3d011682016040523d82523d6000602084013e612369565b606091505b50509050806123d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610645565b505b50505050565b6000806123f1670de0b6b3a764000085612e85565b90506000612400600285612e71565b61240a9083612e59565b9050611f388482612e71565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120805483929061244b908490612ec2565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b806000808282546124ba9190612e59565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161249d565b60008061252687866123dc565b905060006125348588612ec2565b9050600061254282896123dc565b905060006125618261255c670de0b6b3a7640000876123dc565b6126eb565b9050600061256f828d611ef6565b9050600061257d828e612ec2565b905060008861259488670de0b6b3a7640000612ec2565b61259e9190612e85565b90506125b6826106cf83670de0b6b3a7640000612ec2565b9e9d5050505050505050505050505050565b6000826001111580156125f9575060016125eb670de0b6b3a76400006002612e85565b6125f59190612ec2565b8311155b61265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4241534500000000000000000000000000000000000000006044820152606401610645565b6000670de0b6b3a76400006126748185612e71565b61267e9190612e85565b9050600061268c8285612ec2565b905060006126a68661255c670de0b6b3a764000086612e71565b9050816126b1578093505b60006126d487846126cf6402540be400670de0b6b3a7640000612e71565b61275a565b90506126e08282611ef6565b979650505050505050565b60006126f8600283612f3e565b61270a57670de0b6b3a764000061270c565b825b9050612719600283612e71565b91505b81156127405761272c8380612e85565b9250612739600283612e71565b915061271c565b61274b600283612f3e565b156109f7576120dd8382612e85565b600082818061277187670de0b6b3a764000061284a565b670de0b6b3a76400009550909250905083600060015b87831061283d5760006127a2670de0b6b3a764000083612e85565b90506000806127c2896127bd670de0b6b3a764000086612ec2565b61284a565b915091506127d4866106cf848b611ef6565b95506127e086846123dc565b9550856127ef5750505061283d565b86156127f9579315935b8015612803579315935b841561281a57612813868b612ec2565b9950612827565b612824868b612e59565b99505b505050808061283590612f05565b915050612787565b5050505050509392505050565b6000808284106128605750508082036000612868565b505081810360015b9250929050565b8035801515811461287f57600080fd5b919050565b60006020828403121561289657600080fd5b81356120dd8161300e565b600080600080600060a086880312156128b957600080fd5b85356128c48161300e565b945060208601356128d48161300e565b935060408601356128e48161300e565b92506128f26060870161286f565b949793965091946080013592915050565b60008060008060008060c0878903121561291c57600080fd5b86356129278161300e565b955060208701356129378161300e565b945060408701356129478161300e565b93506129556060880161286f565b92506080870135915060a087013567ffffffffffffffff8082111561297957600080fd5b818901915089601f83011261298d57600080fd5b81358181111561299f5761299f612fdf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156129e5576129e5612fdf565b816040528281528c60208487010111156129fe57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60008060008060808587031215612a3957600080fd5b8435612a448161300e565b93506020850135612a548161300e565b9250612a626040860161286f565b9396929550929360600135925050565b600080600060608486031215612a8757600080fd5b8335612a928161300e565b9250612aa06020850161286f565b9150604084013590509250925092565b60008060408385031215612ac357600080fd5b8235612ace8161300e565b946020939093013593505050565b60008060408385031215612aef57600080fd5b8235612afa8161300e565b91506020830135612b0a8161300e565b809150509250929050565b600080600060608486031215612b2a57600080fd5b8335612b358161300e565b92506020840135612b458161300e565b929592945050506040919091013590565b600080600080600080600060e0888a031215612b7157600080fd5b8735612b7c8161300e565b96506020880135612b8c8161300e565b95506040880135945060608801359350608088013560ff81168114612bb057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060208385031215612be057600080fd5b823567ffffffffffffffff80821115612bf857600080fd5b818501915085601f830112612c0c57600080fd5b813581811115612c1b57600080fd5b866020828501011115612c2d57600080fd5b60209290920196919550909350505050565b600060208284031215612c5157600080fd5b5051919050565b600080600080600060a08688031215612c7057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008151808452612cab816020860160208601612ed9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612cef818460208701612ed9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612d4757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612d15565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612dab578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612d70565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612df157815184529284019290840190600101612dd5565b5050508381038285015284518082528583019183019060005b81811015612e3957835170ffffffffffffffffffffffffffffffffff1683529284019291840191600101612e0a565b5090979650505050505050565b6020815260006120dd6020830184612c93565b60008219821115612e6c57612e6c612f52565b500190565b600082612e8057612e80612f81565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ebd57612ebd612f52565b500290565b600082821015612ed457612ed4612f52565b500390565b60005b83811015612ef4578181015183820152602001612edc565b838111156123d65750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f3757612f37612f52565b5060010190565b600082612f4d57612f4d612f81565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461303057600080fd5b5056fea2646970667358221220e1dcc112f06f05ad3605cd945912c189a69b7d672799327ffcd4ee2bf01ac41a64736f6c63430008070033a2646970667358221220fe1fdfc937cef8b9ad09b3cf435b469302579251e8a0793d086e354f04ac20d464736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806371a25812116200005657806371a25812146200012e578063cf58879a1462000154578063f6ab6d99146200017c57600080fd5b8063169c4cef146200008057806327c3cae114620000c15780635bc93d6c14620000d8575b600080fd5b6200009762000091366004620008fd565b620001b5565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b62000097620000d236600462000a8b565b62000208565b6200011f620000e9366004620008bf565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b604051908152602001620000b8565b620001456200013f36600462000943565b620002a7565b604051620000b8919062000b47565b620000977f000000000000000000000000000000000000000000000000000000000000000081565b620000976200018d36600462000a71565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528260005260406000206020528160005260406000208181548110620001de57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b600080828060200190518101906200022191906200098e565b5050905060008380519060200120905080847f0000000000000000000000000000000000000000000000000000000000000000604051620002629062000837565b6200026f92919062000ba3565b8190604051809103906000f590508015801562000290573d6000803e3d6000fd5b509250620002a0838383620003e1565b5050919050565b6060620002b5838362000cb0565b67ffffffffffffffff811115620002d057620002d062000d64565b604051908082528060200260200182016040528015620002fa578160200160208202803683370190505b50905060005b82841015620003d85773ffffffffffffffffffffffffffffffffffffffff8087166000908152602081815260408083209389168352929052208054859081106200034e576200034e62000d35565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106200038e576200038e62000d35565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015283620003bf8162000cca565b9450508080620003cf9062000cca565b91505062000300565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f4445504c4f594552000000000000000000000060448201526064015b60405180910390fd5b60008181526001602052604090205473ffffffffffffffffffffffffffffffffffffffff161562000514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f504f4f4c5f414c52454144595f4445504c4f594544000000000000000000000060448201526064016200047d565b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b6001835103811015620008315782816001018151811062000586576200058662000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110620005b957620005b962000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161062000640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f544f4b454e5f4f524445520000000000000000000000000060448201526064016200047d565b600181015b8351811015620008275760008085848151811062000667576200066762000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858381518110620006c057620006c062000d35565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001692881692909217909155845181908690849081106200074f576200074f62000d35565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858481518110620007a857620007a862000d35565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091550162000645565b5060010162000561565b50505050565b613d278062000dba83390190565b600082601f8301126200085757600080fd5b81516020620008706200086a8362000c89565b62000c37565b80838252828201915082860187848660051b89010111156200089157600080fd5b60005b85811015620008b25781518452928401929084019060010162000894565b5090979650505050505050565b60008060408385031215620008d357600080fd5b8235620008e08162000d93565b91506020830135620008f28162000d93565b809150509250929050565b6000806000606084860312156200091357600080fd5b8335620009208162000d93565b92506020840135620009328162000d93565b929592945050506040919091013590565b600080600080608085870312156200095a57600080fd5b8435620009678162000d93565b93506020850135620009798162000d93565b93969395505050506040820135916060013590565b600080600060608486031215620009a457600080fd5b835167ffffffffffffffff80821115620009bd57600080fd5b818601915086601f830112620009d257600080fd5b81516020620009e56200086a8362000c89565b8083825282820191508286018b848660051b890101111562000a0657600080fd5b600096505b8487101562000a3657805162000a218162000d93565b83526001969096019591830191830162000a0b565b509189015191975090935050508082111562000a5157600080fd5b5062000a608682870162000845565b925050604084015190509250925092565b60006020828403121562000a8457600080fd5b5035919050565b6000602080838503121562000a9f57600080fd5b823567ffffffffffffffff8082111562000ab857600080fd5b818501915085601f83011262000acd57600080fd5b81358181111562000ae25762000ae262000d64565b62000b14847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000c37565b9150808252868482850101111562000b2b57600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b9757835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000b63565b50909695505050505050565b604081526000835180604084015260005b8181101562000bd3576020818701810151606086840101520162000bb4565b8181111562000be6576000606083860101525b5073ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171562000c815762000c8162000d64565b604052919050565b600067ffffffffffffffff82111562000ca65762000ca662000d64565b5060051b60200190565b60008282101562000cc55762000cc562000d06565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000cff5762000cff62000d06565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811462000db657600080fd5b5056fe6101206040523480156200001257600080fd5b5060405162003d2738038062003d278339810160408190526200003591620009bd565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120608081815250506000806000848060200190518101906200012d9190620008db565b92509250925081518351146200017b5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41525241595360901b60448201526064015b60405180910390fd5b8062000193620f4240670de0b6b3a764000062000b4e565b11158015620001b65750620001b2600a670de0b6b3a764000062000b4e565b8111155b620001f75760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b604482015260640162000172565b82516002111580156200020c57506008835111155b6200025a5760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f544f4b454e535f4c454e4754480000000000000000000000604482015260640162000172565b60005b8351811015620005035760006001600160a01b031684828151811062000287576200028762000bfa565b60200260200101516001600160a01b03161415620002d75760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000172565b828181518110620002ec57620002ec62000bfa565b60200260200101516001600160881b0316670de0b6b3a7640000111580156200034e575062000325670de0b6b3a7640000603262000b71565b8382815181106200033a576200033a62000bfa565b60200260200101516001600160881b031611155b6200038d5760405162461bcd60e51b815260206004820152600e60248201526d1253959053125117d5d15251d21560921b604482015260640162000172565b604051806040016040528060006001600160781b03168152602001848381518110620003bd57620003bd62000bfa565b60200260200101516001600160881b031681525060086000868481518110620003ea57620003ea62000bfa565b6020908102919091018101516001600160a01b0316825281810192909252604001600020825192909101516001600160881b0316600160781b026001600160781b0390921691909117905583516005908590839081106200044f576200044f62000bfa565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558251839082908110620004a157620004a162000bfa565b602090810291909101015160048054600090620004c99084906001600160881b031662000b05565b92506101000a8154816001600160881b0302191690836001600160881b031602179055508080620004fa9062000bc6565b9150506200025d565b5062000519670de0b6b3a7640000603262000b71565b6004546001600160881b03161115620005685760405162461bcd60e51b815260206004820152601060248201526f13505617d513d5105317d5d15251d21560821b604482015260640162000172565b62000589600062000583670de0b6b3a7640000606462000b71565b620007b7565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b03871691620005cd919062000a8e565b600060405180830381855afa9150503d80600081146200060a576040519150601f19603f3d011682016040523d82523d6000602084013e6200060f565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b0388169162000658919062000a8e565b600060405180830381855afa9150503d806000811462000695576040519150601f19603f3d011682016040523d82523d6000602084013e6200069a565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b03891691620006e3919062000a8e565b600060405180830381855afa9150503d806000811462000720576040519150601f19603f3d011682016040523d82523d6000602084013e62000725565b606091505b5060a086905284519092506200074691508401602090810190850162000a74565b6006558151620007609083016020908101908401620008b4565b60601b6001600160601b03191660c0528051620007879060209083018101908301620008b4565b6001600160601b0319606091821b811660e05297901b90961661010052505060016007555062000c3f9350505050565b80600080828254620007ca919062000b33565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600082601f8301126200083557600080fd5b815160206200084e620008488362000adf565b62000aac565b80838252828201915082860187848660051b89010111156200086f57600080fd5b6000805b86811015620008a65782516001600160881b038116811462000893578283fd5b8552938501939185019160010162000873565b509198975050505050505050565b600060208284031215620008c757600080fd5b8151620008d48162000c26565b9392505050565b600080600060608486031215620008f157600080fd5b83516001600160401b03808211156200090957600080fd5b818601915086601f8301126200091e57600080fd5b8151602062000931620008488362000adf565b8083825282820191508286018b848660051b89010111156200095257600080fd5b600096505b84871015620009825780516200096d8162000c26565b83526001969096019591830191830162000957565b50918901519197509093505050808211156200099d57600080fd5b50620009ac8682870162000823565b925050604084015190509250925092565b60008060408385031215620009d157600080fd5b82516001600160401b0380821115620009e957600080fd5b818501915085601f830112620009fe57600080fd5b81518181111562000a135762000a1362000c10565b62000a28601f8201601f191660200162000aac565b915080825286602082850101111562000a4057600080fd5b62000a5381602084016020860162000b93565b508093505050602083015162000a698162000c26565b809150509250929050565b60006020828403121562000a8757600080fd5b5051919050565b6000825162000aa281846020870162000b93565b9190910192915050565b604051601f8201601f191681016001600160401b038111828210171562000ad75762000ad762000c10565b604052919050565b60006001600160401b0382111562000afb5762000afb62000c10565b5060051b60200190565b60006001600160881b0382811684821680830382111562000b2a5762000b2a62000be4565b01949350505050565b6000821982111562000b495762000b4962000be4565b500190565b60008262000b6c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161562000b8e5762000b8e62000be4565b500290565b60005b8381101562000bb057818101518382015260200162000b96565b8381111562000bc0576000848401525b50505050565b600060001982141562000bdd5762000bdd62000be4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000c3c57600080fd5b50565b60805160a05160c05160601c60e05160601c6101005160601c61306962000cbe6000396000818161057b01526117c70152600081816103ed015281816120580152818161218701526122fd0152600061026b01526000818161041401528181611a0d0152611f580152600081816103340152611c2101526130696000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806367e4ac2c11610104578063a69840a8116100a2578063c14ad80211610071578063c14ad8021461056d578063cf58879a14610576578063d505accf1461059d578063dd62ed3e146105b057600080fd5b8063a69840a81461050d578063a8f1f52e14610534578063a9059cbb14610547578063af8c09bf1461055a57600080fd5b80637ecebe00116100de5780637ecebe00146104915780638ae45441146104b157806392bc3219146104c757806395d89b41146104d157600080fd5b806367e4ac2c1461044957806370a082311461045e5780637ba0e2e71461047e57600080fd5b806330adf81f11610171578063469e90671161014b578063469e9067146103565780634da31827146103e857806354cf2aeb1461040f578063627dd56a1461043657600080fd5b806330adf81f146102ee578063313ce567146103155780633644e5151461032f57600080fd5b80630c0a0cd2116101ad5780630c0a0cd21461026657806318160ddd146102b257806323b872dd146102bb5780632a07b6c7146102ce57600080fd5b8063053da1c8146101d457806306fdde03146101fa578063095ea7b314610243575b600080fd5b6101e76101e2366004612bcd565b6105db565b6040519081526020015b60405180910390f35b6102366040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b6040516101f19190612e46565b610256610251366004612ab0565b610983565b60405190151581526020016101f1565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b6101e760005481565b6102566102c9366004612b15565b6109fd565b6102e16102dc366004612bcd565b610b49565b6040516101f19190612d53565b6101e77f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61031d601281565b60405160ff90911681526020016101f1565b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b6103af610364366004612884565b6008602052600090815260409020546effffffffffffffffffffffffffffff8116906f01000000000000000000000000000000900470ffffffffffffffffffffffffffffffffff1682565b604080516effffffffffffffffffffffffffffff909316835270ffffffffffffffffffffffffffffffffff9091166020830152016101f1565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610444366004612bcd565b610eca565b6104516111f4565b6040516101f19190612cf9565b6101e761046c366004612884565b60016020526000908152604090205481565b6101e761048c366004612bcd565b611263565b6101e761049f366004612884565b60036020526000908152604090205481565b6104b9611585565b6040516101f1929190612db8565b6104cf611755565b005b6102366040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6101e77f54726964656e743a496e6465780000000000000000000000000000000000000081565b6101e7610542366004612bcd565b611850565b610256610555366004612ab0565b611886565b6101e7610568366004612bcd565b61190b565b6101e760065481565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b6104cf6105ab366004612b56565b611b8e565b6101e76105be366004612adc565b600260209081526000928352604080842090915290825290205481565b600060075460011461064e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260075560008080808080610666888a018a612903565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260086020526040808220928816825290208154979d50959b5093995091975095509350916106d4906effffffffffffffffffffffffffffff166106cf6002670de0b6b3a7640000612e71565b611ef6565b84111561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f00000000000000000000000000000000000000006044820152606401610645565b815481546107939186916effffffffffffffffffffffffffffff8083169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000091829004811693928316929190910416611f41565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152909950339063bd50c7b1906107d2908690600401612e46565b600060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505083546effffffffffffffffffffffffffffff1686019150610824905089611fcb565b101561088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b81546effffffffffffffffffffffffffffff808216860181167fffffffffffffffffffffffffffffffffff00000000000000000000000000000092831617845582548082168c900390911691161781556108e8878a88886120e4565b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062878d604051610967929190918252602082015260400190565b60405180910390a4505060016007555094979650505050505050565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109eb9086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610a9a5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610a94908490612ec2565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610acf908490612ec2565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b379086815260200190565b60405180910390a35060019392505050565b6060600754600114610bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b600260075560008080610bcc85870187612a72565b9250925092506000610be0826000546123dc565b60055490915067ffffffffffffffff811115610bfe57610bfe612fdf565b604051908082528060200260200182016040528015610c4357816020015b6040805180820190915260008082526020820152815260200190600190039081610c1c5790505b509450610c503083612416565b60005b600554811015610eb957600060058281548110610c7257610c72612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260408220549092506effffffffffffffffffffffffffffff1690610cc28583611ef6565b90506effffffffffffffffffffffffffffff8116610d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5a45524f5f4f55540000000000000000000000000000000000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260086020526040902080547fffffffffffffffffffffffffffffffffff00000000000000000000000000000081166effffffffffffffffffffffffffffff918216849003821617909155610db190849083168a8a6120e4565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001826effffffffffffffffffffffffffffff16815250898581518110610dff57610dff612fb0565b60200260200101819052508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc3738584604051610e9b92919073ffffffffffffffffffffffffffffffffffffffff9290921682526effffffffffffffffffffffffffffff16602082015260400190565b60405180910390a35050508080610eb190612f05565b915050610c53565b505060016007555091949350505050565b6000600754600114610f38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b6002600755600080808080610f4f878901896128a1565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260086020526040808220928716825290208154969b50949950929750909550935091610fb6906effffffffffffffffffffffffffffff166106cf6002670de0b6b3a7640000612e71565b83111561101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f00000000000000000000000000000000000000006044820152606401610645565b815481546110759185916effffffffffffffffffffffffffffff8083169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000091829004811693928316929190910416611f41565b82549098506effffffffffffffffffffffffffffff16830161109688611fcb565b10156110fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b81546effffffffffffffffffffffffffffff808216850181167fffffffffffffffffffffffffffffffffff00000000000000000000000000000092831617845582548082168b9003909116911617815561115a868987876120e4565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062868c6040516111d9929190918252602082015260400190565b60405180910390a45050600160075550939695505050505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561125957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161122e575b5050505050905090565b60006007546001146112d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b60026007556000806112e584860186612ab0565b9150915060006112f7826000546123dc565b905060005b60055481101561156c5760006005828154811061131b5761131b612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260408220549092506effffffffffffffffffffffffffffff16908161136c5784611398565b611398856effffffffffffffffffffffffffffff16836effffffffffffffffffffffffffffff16611ef6565b90506113b164e8d4a51000670de0b6b3a7640000612e71565b816effffffffffffffffffffffffffffff16101561142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d494e5f42414c414e43450000000000000000000000000000000000000000006044820152606401610645565b8181016effffffffffffffffffffffffffffff1661144884611fcb565b10156114b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f524543454956454400000000000000000000000000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffff00000000000000000000000000000081166effffffffffffffffffffffffffffff918216880182161790915582519384528516908301529189169133917ff9403b28cc8805935e0ce6943ed646d5fde3d1e14f6b398e85bfa2851d1b85f7910160405180910390a3505050808061156490612f05565b9150506112fc565b5061157783836124a9565b506001600755949350505050565b60055460609081908067ffffffffffffffff8111156115a6576115a6612fdf565b6040519080825280602002602001820160405280156115cf578160200160208202803683370190505b5092508067ffffffffffffffff8111156115eb576115eb612fdf565b604051908082528060200260200182016040528015611614578160200160208202803683370190505b50915060005b8181101561174f57600860006005838154811061163957611639612fb0565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205484516effffffffffffffffffffffffffffff9091169085908390811061169357611693612fb0565b60200260200101818152505060086000600583815481106116b6576116b6612fb0565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205483516f0100000000000000000000000000000090910470ffffffffffffffffffffffffffffffffff169084908390811061172557611725612fb0565b70ffffffffffffffffffffffffffffffffff9092166020928302919091019091015260010161161a565b50509091565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916117f29190612cdd565b600060405180830381855afa9150503d806000811461182d576040519150601f19603f3d011682016040523d82523d6000602084013e611832565b606091505b509150508080602001905181019061184a9190612c3f565b60065550565b6000808080808061186387890189612c58565b9450945094509450945061187a8585858585611f41565b98975050505050505050565b336000908152600160205260408120805483919083906118a7908490612ec2565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109eb9086815260200190565b6000600754600114611979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610645565b6002600755600080808061198f86880188612a23565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260086020526040812080549154600454969a509498509296509094509092611a31926effffffffffffffffffffffffffffff83169270ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000090910481169216867f0000000000000000000000000000000000000000000000000000000000000000612519565b8154909650611a69906effffffffffffffffffffffffffffff16611a5e6003670de0b6b3a7640000612e71565b6106cf906001612e59565b861115611ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d41585f4f55545f524154494f000000000000000000000000000000000000006044820152606401610645565b80546effffffffffffffffffffffffffffff808216889003167fffffffffffffffffffffffffffffffffff000000000000000000000000000000909116178155611b1c3083612416565b611b28858786866120e4565b6040805173ffffffffffffffffffffffffffffffffffffffff87811682526020820189905286169133917f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505060016007555091949350505050565b42841015611bf8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040812080547f0000000000000000000000000000000000000000000000000000000000000000917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9187611c7383612f05565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611d149291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611d9d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611e1857508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e415455524500000000000000006044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526002602090815260408083208c8516808552908352928190208b9055518a815291928c16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600080611f038385612e85565b90506000611f1a6002670de0b6b3a7640000612e71565b611f249083612e59565b9050611f38670de0b6b3a764000082612e71565b95945050505050565b600080611f4e85846123dc565b90506000611f86887f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000003611ef6565b90506000611f9688838a016123dc565b90506000611fa482856125c8565b9050670de0b6b3a7640000819003611fbc8882611ef6565b9b9a5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff83811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec00000000000000000000000000000000000000000000000000000000179052915160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916120859190612cdd565b600060405180830381855afa9150503d80600081146120c0576040519150601f19603f3d011682016040523d82523d6000602084013e6120c5565b606091505b50915050808060200190518101906120dd9190612c3f565b9392505050565b8015612266576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f0000000000000000000000000000000000000000000000000000000000000000909116916121b391612cdd565b6000604051808303816000865af19150503d80600081146121f0576040519150601f19603f3d011682016040523d82523d6000602084013e6121f5565b606091505b5050905080612260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c454400000000000000000000000000000000006044820152606401610645565b506123d6565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f0000000000000000000000000000000000000000000000000000000000000000169161232791612cdd565b6000604051808303816000865af19150503d8060008114612364576040519150601f19603f3d011682016040523d82523d6000602084013e612369565b606091505b50509050806123d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610645565b505b50505050565b6000806123f1670de0b6b3a764000085612e85565b90506000612400600285612e71565b61240a9083612e59565b9050611f388482612e71565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120805483929061244b908490612ec2565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b806000808282546124ba9190612e59565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161249d565b60008061252687866123dc565b905060006125348588612ec2565b9050600061254282896123dc565b905060006125618261255c670de0b6b3a7640000876123dc565b6126eb565b9050600061256f828d611ef6565b9050600061257d828e612ec2565b905060008861259488670de0b6b3a7640000612ec2565b61259e9190612e85565b90506125b6826106cf83670de0b6b3a7640000612ec2565b9e9d5050505050505050505050505050565b6000826001111580156125f9575060016125eb670de0b6b3a76400006002612e85565b6125f59190612ec2565b8311155b61265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f4241534500000000000000000000000000000000000000006044820152606401610645565b6000670de0b6b3a76400006126748185612e71565b61267e9190612e85565b9050600061268c8285612ec2565b905060006126a68661255c670de0b6b3a764000086612e71565b9050816126b1578093505b60006126d487846126cf6402540be400670de0b6b3a7640000612e71565b61275a565b90506126e08282611ef6565b979650505050505050565b60006126f8600283612f3e565b61270a57670de0b6b3a764000061270c565b825b9050612719600283612e71565b91505b81156127405761272c8380612e85565b9250612739600283612e71565b915061271c565b61274b600283612f3e565b156109f7576120dd8382612e85565b600082818061277187670de0b6b3a764000061284a565b670de0b6b3a76400009550909250905083600060015b87831061283d5760006127a2670de0b6b3a764000083612e85565b90506000806127c2896127bd670de0b6b3a764000086612ec2565b61284a565b915091506127d4866106cf848b611ef6565b95506127e086846123dc565b9550856127ef5750505061283d565b86156127f9579315935b8015612803579315935b841561281a57612813868b612ec2565b9950612827565b612824868b612e59565b99505b505050808061283590612f05565b915050612787565b5050505050509392505050565b6000808284106128605750508082036000612868565b505081810360015b9250929050565b8035801515811461287f57600080fd5b919050565b60006020828403121561289657600080fd5b81356120dd8161300e565b600080600080600060a086880312156128b957600080fd5b85356128c48161300e565b945060208601356128d48161300e565b935060408601356128e48161300e565b92506128f26060870161286f565b949793965091946080013592915050565b60008060008060008060c0878903121561291c57600080fd5b86356129278161300e565b955060208701356129378161300e565b945060408701356129478161300e565b93506129556060880161286f565b92506080870135915060a087013567ffffffffffffffff8082111561297957600080fd5b818901915089601f83011261298d57600080fd5b81358181111561299f5761299f612fdf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156129e5576129e5612fdf565b816040528281528c60208487010111156129fe57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60008060008060808587031215612a3957600080fd5b8435612a448161300e565b93506020850135612a548161300e565b9250612a626040860161286f565b9396929550929360600135925050565b600080600060608486031215612a8757600080fd5b8335612a928161300e565b9250612aa06020850161286f565b9150604084013590509250925092565b60008060408385031215612ac357600080fd5b8235612ace8161300e565b946020939093013593505050565b60008060408385031215612aef57600080fd5b8235612afa8161300e565b91506020830135612b0a8161300e565b809150509250929050565b600080600060608486031215612b2a57600080fd5b8335612b358161300e565b92506020840135612b458161300e565b929592945050506040919091013590565b600080600080600080600060e0888a031215612b7157600080fd5b8735612b7c8161300e565b96506020880135612b8c8161300e565b95506040880135945060608801359350608088013560ff81168114612bb057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060208385031215612be057600080fd5b823567ffffffffffffffff80821115612bf857600080fd5b818501915085601f830112612c0c57600080fd5b813581811115612c1b57600080fd5b866020828501011115612c2d57600080fd5b60209290920196919550909350505050565b600060208284031215612c5157600080fd5b5051919050565b600080600080600060a08688031215612c7057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008151808452612cab816020860160208601612ed9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612cef818460208701612ed9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612d4757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612d15565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612dab578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612d70565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612df157815184529284019290840190600101612dd5565b5050508381038285015284518082528583019183019060005b81811015612e3957835170ffffffffffffffffffffffffffffffffff1683529284019291840191600101612e0a565b5090979650505050505050565b6020815260006120dd6020830184612c93565b60008219821115612e6c57612e6c612f52565b500190565b600082612e8057612e80612f81565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ebd57612ebd612f52565b500290565b600082821015612ed457612ed4612f52565b500390565b60005b83811015612ef4578181015183820152602001612edc565b838111156123d65750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f3757612f37612f52565b5060010190565b600082612f4d57612f4d612f81565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461303057600080fd5b5056fea2646970667358221220e1dcc112f06f05ad3605cd945912c189a69b7d672799327ffcd4ee2bf01ac41a64736f6c63430008070033a2646970667358221220fe1fdfc937cef8b9ad09b3cf435b469302579251e8a0793d086e354f04ac20d464736f6c63430008070033",
  "devdoc": {
    "author": "Mudit Gupta",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident exchange Index Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8137,
        "contract": "contracts/pool/IndexPoolFactory.sol:IndexPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 8141,
        "contract": "contracts/pool/IndexPoolFactory.sol:IndexPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}