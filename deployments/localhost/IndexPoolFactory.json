{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4c6cb2a328260657c84d695acd0a9de131b7c72af7e5eea7d22416eb1cffb9f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "3747328",
    "logsBloom": "0x
    "blockHash": "0x0f505fc799777aa2c25dc533d19b7e81f28f4186b4b59d260b5423e9ef985de3",
    "transactionHash": "0xb4c6cb2a328260657c84d695acd0a9de131b7c72af7e5eea7d22416eb1cffb9f",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "3747328",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "solcInputHash": "8aefef22c63fcc2a1730a774a4a7414a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Gupta\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident exchange Index Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/IndexPoolFactory.sol\":\"IndexPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    \\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xabe7c92de39e405012bd89d614fe4107a7323f8ed4bdc9a8dad5c2429c14fbcb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool callback interface.\\ninterface ITridentCallee {\\n    function tridentSwapCallback(bytes calldata data) external;\\n\\n    function tridentMintCallback(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x256e838362a3064201b37b3b7c08bc1421b173a6fea633176123f0b827b868c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ArrayPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IndexPool.sol\\\";\\n\\n/// @notice Trident exchange pool deployer for whitelisted token array template factories.\\n/// @author Mudit Gupta\\ncontract ArrayPoolDeployer {\\n    mapping(bytes => address) public configAddress;\\n    address public immutable masterDeployer;\\n\\n    constructor(address _masterDeployer) {\\n        require(_masterDeployer != address(0), \\\"ZERO_ADDRESS\\\");\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _deployPool(\\n        address[] memory tokens,\\n        bytes memory creationCode,\\n        bytes memory deployData\\n    ) internal returns (address pool) {\\n        for (uint8 i = 0; i < tokens.length; i++) {\\n            require(tokens[i] < tokens[i++], \\\"INVALID_TOKEN_ORDER\\\");\\n        }\\n        \\n        require(configAddress[deployData] == address(0), \\\"POOL_ALREADY_DEPLOYED\\\");\\n\\n        // NB Salt is not actually needed since creationCodeWithConfig already contains the salt.\\n        bytes32 salt = keccak256(deployData);\\n\\n        bytes memory creationCodeWithConfig = abi.encodePacked(creationCode, abi.encode(deployData, masterDeployer));\\n\\n        assembly {\\n            pool := create2(0, add(creationCodeWithConfig, 32), mload(creationCodeWithConfig), salt)\\n            if iszero(extcodesize(pool)) {\\n                revert(0, 0)\\n            }\\n        }\\n        configAddress[deployData] = pool;\\n    }\\n}\\n\",\"keccak256\":\"0x29d071976d05f3b564e695ea75e3069878107d0e6727c2ebc6b2241a1288a1d3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/IndexPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\n\\n/// @notice Trident exchange pool template with constant mean formula for swapping between an array of ERC-20 tokens.\\n/// @dev The reserves are stored as bento shares.\\n///      The curve is applied to shares as well. This pool does not care about the underlying amounts.\\ncontract IndexPool is IPool, TridentERC20 {\\n    event Mint(address indexed sender, address tokenIn, uint256 amountIn, address indexed recipient);\\n    event Burn(address indexed sender, address tokenOut, uint256 amountOut, address indexed recipient);\\n\\n    uint256 public immutable swapFee;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n    address public immutable masterDeployer;\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:Index\\\";\\n\\n    uint256 internal constant BASE = 10**18;\\n    uint256 internal constant MIN_TOKENS = 2;\\n    uint256 internal constant MAX_TOKENS = 8;\\n    uint256 internal constant MIN_FEE = BASE / 10**6;\\n    uint256 internal constant MAX_FEE = BASE / 10;\\n    uint256 internal constant MIN_WEIGHT = BASE;\\n    uint256 internal constant MAX_WEIGHT = BASE * 50;\\n    uint256 internal constant MAX_TOTAL_WEIGHT = BASE * 50;\\n    uint256 internal constant MIN_BALANCE = BASE / 10**12;\\n    uint256 internal constant INIT_POOL_SUPPLY = BASE * 100;\\n    uint256 internal constant MIN_POW_BASE = 1;\\n    uint256 internal constant MAX_POW_BASE = (2 * BASE) - 1;\\n    uint256 internal constant POW_PRECISION = BASE / 10**10;\\n    uint256 internal constant MAX_IN_RATIO = BASE / 2;\\n    uint256 internal constant MAX_OUT_RATIO = (BASE / 3) + 1;\\n\\n    address[] internal tokens;\\n    uint256 internal totalWeight;\\n\\n    uint256 internal unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    mapping(address => Record) public records;\\n    struct Record {\\n        bool set;\\n        uint8 index;\\n        uint256 weight;\\n        uint256 balance;\\n    }\\n\\n    /// @dev Only set immutable variables here - state changes made here will not be used.\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address[] memory _tokens, uint256[] memory _weights, uint256 _swapFee) = abi.decode(\\n            _deployData,\\n            (address[], uint256[], uint256)\\n        );\\n\\n        require(_tokens.length == _weights.length, \\\"INVALID_ARRAYS\\\");\\n        require(MIN_FEE <= _swapFee && _swapFee <= MAX_FEE, \\\"INVALID_SWAP_FEE\\\");\\n        require(MIN_TOKENS <= _tokens.length && _tokens.length <= MAX_TOKENS, \\\"INVALID_TOKENS_LENGTH\\\");\\n\\n        for (uint8 i = 0; i < _tokens.length; i++) {\\n            require(_tokens[i] != address(0), \\\"ZERO_ADDRESS\\\");\\n            require(!records[_tokens[i]].set, \\\"SET\\\");\\n            require(MIN_WEIGHT <= _weights[i] && _weights[i] <= MAX_WEIGHT, \\\"INVALID_WEIGHT\\\");\\n            records[_tokens[i]] = Record({set: true, index: i, weight: _weights[i], balance: 0});\\n            tokens.push(_tokens[i]);\\n            totalWeight += _weights[i];\\n        }\\n\\n        require(totalWeight <= MAX_TOTAL_WEIGHT, \\\"MAX_TOTAL_WEIGHT\\\");\\n        // @dev This burns initial LP supply.\\n        _mint(address(0), INIT_POOL_SUPPLY);\\n\\n        (, bytes memory _bento) = _masterDeployer.staticcall(abi.encodeWithSelector(0x4da31827)); // @dev bento().\\n        (, bytes memory _barFeeTo) = _masterDeployer.staticcall(abi.encodeWithSelector(0x0c0a0cd2)); // @dev barFeeTo().\\n\\n        bento = abi.decode(_bento, (address));\\n        barFeeTo = abi.decode(_barFeeTo, (address));\\n        swapFee = _swapFee;\\n        masterDeployer = _masterDeployer;\\n        unlocked = 1;\\n    }\\n\\n    function mint(bytes calldata data) public override lock returns (uint256 liquidity) {\\n        (address recipient, uint256 toMint) = abi.decode(data, (address, uint256));\\n\\n        uint256 ratio = div(toMint, totalSupply);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address tokenIn = tokens[i];\\n            uint256 balance = records[tokenIn].balance;\\n            // @dev If token balance is '0', initialize with `ratio`.\\n            uint256 amountIn = balance != 0 ? mul(ratio, balance) : ratio;\\n            require(amountIn >= MIN_BALANCE, \\\"MIN_BALANCE\\\");\\n            // @dev Check Trident router has sent amount for skim into pool.\\n            require(_balance(tokenIn) >= amountIn + balance, \\\"NOT_RECEIVED\\\");\\n            records[tokenIn].balance += amountIn;\\n            emit Mint(msg.sender, tokenIn, amountIn, recipient);\\n        }\\n\\n        _mint(recipient, toMint);\\n        liquidity = toMint;\\n    }\\n\\n    function burn(bytes calldata data) public override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address recipient, bool unwrapBento, uint256 toBurn) = abi.decode(data, (address, bool, uint256));\\n\\n        uint256 ratio = div(toBurn, totalSupply);\\n\\n        _burn(address(this), toBurn);\\n\\n        withdrawnAmounts = new TokenAmount[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address tokenOut = tokens[i];\\n            uint256 balance = records[tokenOut].balance;\\n            uint256 amountOut = mul(ratio, balance);\\n            require(amountOut != 0, \\\"MATH_APPROX\\\");\\n            records[tokenOut].balance -= amountOut;\\n            _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n            withdrawnAmounts[i] = TokenAmount({token: tokenOut, amount: amountOut});\\n            emit Burn(msg.sender, tokenOut, amountOut, recipient);\\n        }\\n    }\\n\\n    function burnSingle(bytes calldata data) public override lock returns (uint256 amount) {\\n        (address tokenOut, address recipient, bool unwrapBento, uint256 toBurn) = abi.decode(\\n            data,\\n            (address, address, bool, uint256)\\n        );\\n\\n        Record storage outRecord = records[tokenOut];\\n\\n        require(outRecord.set, \\\"NOT_SET\\\");\\n\\n        amount = _computeSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.weight,\\n            totalSupply,\\n            totalWeight,\\n            toBurn,\\n            swapFee\\n        );\\n\\n        require(amount <= mul(outRecord.balance, MAX_OUT_RATIO), \\\"MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance -= amount;\\n\\n        _burn(address(this), toBurn);\\n        _transfer(tokenOut, amount, recipient, unwrapBento);\\n\\n        emit Burn(msg.sender, tokenOut, amount, recipient);\\n    }\\n\\n    function swap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address tokenOut, address recipient, bool unwrapBento, uint256 amountIn) = abi.decode(\\n            data,\\n            (address, address, address, bool, uint256)\\n        );\\n\\n        require(records[tokenIn].set && records[tokenOut].set, \\\"NOT_SET\\\");\\n\\n        Record storage inRecord = records[tokenIn];\\n        Record storage outRecord = records[tokenOut];\\n\\n        require(amountIn <= mul(inRecord.balance, MAX_IN_RATIO), \\\"MAX_IN_RATIO\\\");\\n\\n        amountOut = _getAmountOut(inRecord.balance, inRecord.weight, outRecord.balance, outRecord.weight, amountIn);\\n        // @dev Check Trident router has sent amount for skim into pool.\\n        require(_balance(tokenIn) >= amountIn + inRecord.balance, \\\"NOT_RECEIVED\\\");\\n\\n        inRecord.balance += amountIn;\\n        outRecord.balance -= amountOut;\\n\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n\\n    function flashSwap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (\\n            address tokenIn,\\n            address tokenOut,\\n            address recipient,\\n            bool unwrapBento,\\n            uint256 amountIn,\\n            bytes memory context\\n        ) = abi.decode(data, (address, address, address, bool, uint256, bytes));\\n\\n        require(records[tokenIn].set && records[tokenOut].set, \\\"NOT_SET\\\");\\n\\n        Record storage inRecord = records[tokenIn];\\n        Record storage outRecord = records[tokenOut];\\n\\n        require(amountIn <= mul(inRecord.balance, MAX_IN_RATIO), \\\"MAX_IN_RATIO\\\");\\n\\n        amountOut = _getAmountOut(inRecord.balance, inRecord.weight, outRecord.balance, outRecord.weight, amountIn);\\n\\n        ITridentCallee(msg.sender).tridentSwapCallback(context);\\n        // @dev Check Trident router has sent amount for skim into pool.\\n        require(_balance(tokenIn) >= amountIn + inRecord.balance, \\\"NOT_RECEIVED\\\");\\n\\n        inRecord.balance += amountIn;\\n        outRecord.balance -= amountOut;\\n\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            // @dev withdraw(address,address,address,uint256,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0x97da6d30, token, address(this), to, 0, shares));\\n            require(success, \\\"WITHDRAW_FAILED\\\");\\n        } else {\\n            // @dev transfer(address,address,address,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0xf18d03cc, token, address(this), to, shares));\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function _balance(address token) internal view returns (uint256 balance) {\\n        // @dev balanceOf(address,address).\\n        (, bytes memory data) = bento.staticcall(abi.encodeWithSelector(0xf7888aec, token, address(this)));\\n        balance = abi.decode(data, (uint256));\\n    }\\n\\n    function _getAmountOut(\\n        uint256 tokenInBalance,\\n        uint256 tokenInWeight,\\n        uint256 tokenOutBalance,\\n        uint256 tokenOutWeight,\\n        uint256 tokenInAmount\\n    ) internal view returns (uint256 amountOut) {\\n        uint256 weightRatio = div(tokenInWeight, tokenOutWeight);\\n        uint256 adjustedIn = mul(tokenInAmount, (BASE - swapFee));\\n\\n        uint256 a = div(tokenInBalance, tokenInBalance + adjustedIn);\\n        uint256 b = _compute(a, weightRatio);\\n        uint256 c = BASE - b;\\n\\n        amountOut = mul(tokenOutBalance, c);\\n    }\\n\\n    function _compute(uint256 base, uint256 exp) internal pure returns (uint256 output) {\\n        require(MIN_POW_BASE <= base && base <= MAX_POW_BASE, \\\"INVALID_BASE\\\");\\n\\n        uint256 whole = (exp / BASE) * BASE;\\n        uint256 remain = exp - whole;\\n        uint256 wholePow = _pow(base, whole / BASE);\\n\\n        if (remain == 0) output = wholePow;\\n\\n        uint256 partialResult = _powApprox(base, remain, POW_PRECISION);\\n\\n        output = mul(wholePow, partialResult);\\n    }\\n\\n    function _computeSingleOutGivenPoolIn(\\n        uint256 tokenOutBalance,\\n        uint256 tokenOutWeight,\\n        uint256 _totalSupply,\\n        uint256 _totalWeight,\\n        uint256 toBurn,\\n        uint256 _swapFee\\n    ) internal pure returns (uint256 amountOut) {\\n        uint256 normalizedWeight = div(tokenOutWeight, _totalWeight);\\n        uint256 newPoolSupply = _totalSupply - toBurn;\\n        uint256 poolRatio = div(newPoolSupply, _totalSupply);\\n        uint256 tokenOutRatio = _pow(poolRatio, div(BASE, normalizedWeight));\\n        uint256 newBalanceOut = mul(tokenOutRatio, tokenOutBalance);\\n        uint256 tokenAmountOutBeforeSwapFee = tokenOutBalance - newBalanceOut;\\n        uint256 zaz = (BASE - normalizedWeight) * _swapFee;\\n        amountOut = mul(tokenAmountOutBeforeSwapFee, (BASE - zaz));\\n    }\\n\\n    function _pow(uint256 a, uint256 n) internal pure returns (uint256 output) {\\n        output = n % 2 != 0 ? a : BASE;\\n        for (n /= 2; n != 0; n /= 2) a = a * a;\\n        if (n % 2 != 0) output = output * a;\\n    }\\n\\n    function _powApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256 sum) {\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = subFlag(base, BASE);\\n        uint256 term = BASE;\\n        sum = term;\\n        bool negative;\\n\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BASE;\\n            (uint256 c, bool cneg) = subFlag(a, (bigK - BASE));\\n            term = mul(term, mul(c, x));\\n            term = div(term, bigK);\\n            if (term == 0) break;\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sum - term;\\n            } else {\\n                sum = sum + term;\\n            }\\n        }\\n    }\\n\\n    function subFlag(uint256 a, uint256 b) internal pure returns (uint256 difference, bool flag) {\\n        unchecked {\\n            if (a >= b) {\\n                (difference, flag) = (a - b, false);\\n            } else {\\n                (difference, flag) = (b - a, true);\\n            }\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c2) {\\n        unchecked {\\n            uint256 c0 = a * b;\\n            require(a == 0 || c0 / a == b, \\\"MUL_OVERFLOW\\\");\\n            uint256 c1 = c0 + (BASE / 2);\\n            require(c1 >= c0, \\\"MUL_OVERFLOW\\\");\\n            c2 = c1 / BASE;\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c2) {\\n        unchecked {\\n            require(b != 0, \\\"DIV_ZERO\\\");\\n            uint256 c0 = a * BASE;\\n            require(a == 0 || c0 / a == BASE, \\\"DIV_INTERNAL\\\");\\n            uint256 c1 = c0 + (b / 2);\\n            require(c1 >= c0, \\\"DIV_INTERNAL\\\");\\n            c2 = c1 / b;\\n        }\\n    }\\n\\n    function getAmountOut(bytes calldata data) public view override returns (uint256 amountOut) {\\n        (\\n            uint256 tokenInBalance,\\n            uint256 tokenInWeight,\\n            uint256 tokenOutBalance,\\n            uint256 tokenOutWeight,\\n            uint256 tokenInAmount\\n        ) = abi.decode(data, (uint256, uint256, uint256, uint256, uint256));\\n        amountOut = _getAmountOut(tokenInBalance, tokenInWeight, tokenOutBalance, tokenOutWeight, tokenInAmount);\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = tokens;\\n    }\\n}\\n\",\"keccak256\":\"0x7de71203701658acc1584c67057bb0890705a23fe4100a972549987f21d1b391\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/IndexPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IndexPool.sol\\\";\\nimport \\\"./ArrayPoolDeployer.sol\\\";\\n\\n/// @notice Contract for deploying Trident exchange Index Pool with configurations.\\n/// @author Mudit Gupta\\ncontract IndexPoolFactory is ArrayPoolDeployer {\\n    constructor(address _masterDeployer) ArrayPoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address[] memory _tokens, ,) = abi.decode(\\n            _deployData,\\n            (address[], uint256[], uint256)\\n        );\\n\\n        pool = _deployPool(_tokens, type(IndexPool).creationCode, _deployData);\\n    }\\n}\\n\",\"keccak256\":\"0xc158ab33dacf11fa72357fdbf05dd6afc346ec0da87efe60a9bc73564b5b908e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/TridentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool ERC-20 with EIP-2612 extension.\\n/// @author Adapted from RariCapital, https://github.com/Rari-Capital/solmate/blob/main/src/erc20/ERC20.sol,\\n/// License-Identifier: AGPL-3.0-only.\\ncontract TridentERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n\\n    string public constant name = \\\"Sushi LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    /// @notice owner -> balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner -> spender -> allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by this contract.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /// @notice The EIP-712 typehash for this contract's domain.\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    /// @notice owner -> nonce mapping used in {permit}.\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice Approves `amount` from `msg.sender` to be spent by `spender`.\\n    /// @param spender Address of the party that can draw tokens from `msg.sender`'s account.\\n    /// @param amount The maximum collective `amount` that `spender` can draw.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient`. Caller needs approval from `from`.\\n    /// @param sender Address to draw tokens `from`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[sender][msg.sender] != type(uint256).max) {\\n            allowance[sender][msg.sender] -= amount;\\n        }\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Triggers an approval from `owner` to `spender`.\\n    /// @param owner The address to approve from.\\n    /// @param spender The address to be approved.\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite).\\n    /// @param deadline The time at which to expire the signature.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n        // @dev This is reasonably safe from overflow - incrementing\\n        // beyond 'type(uint256).max' is exceedingly unlikely.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n        allowance[recoveredAddress][spender] = amount;\\n        }\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address recipient, uint256 amount) internal {\\n        totalSupply += amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burn(address sender, uint256 amount) internal {\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from underflow - users won't ever\\n        // have a balance larger than `totalSupply`.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n        emit Transfer(sender, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e68d5f71dadbf20472846e97fb2e315f4e765d2aa5d8e897d2831adbc6ecf1c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161442938038061442983398101604081905261002f9161008f565b806001600160a01b0381166100795760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640160405180910390fd5b60601b6001600160601b031916608052506100bf565b6000602082840312156100a157600080fd5b81516001600160a01b03811681146100b857600080fd5b9392505050565b60805160601c6143466100e36000396000818160d5015261034201526143466000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80630d617dfa146200004b57806327c3cae114620000b8578063cf58879a14620000cf575b600080fd5b6200008f6200005c366004620005c6565b805160208183018101805160008252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6200008f620000c9366004620005c6565b620000f7565b6200008f7f000000000000000000000000000000000000000000000000000000000000000081565b60008082806020019051810190620001109190620004cb565b505090506200016381604051806020016200012b9062000443565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052856200016a565b9392505050565b6000805b84518160ff161015620002765784816200018881620007f0565b925060ff1681518110620001a057620001a062000838565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858260ff1681518110620001d657620001d662000838565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161062000261576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f544f4b454e5f4f524445520000000000000000000000000060448201526064015b60405180910390fd5b806200026d81620007f0565b9150506200016e565b50600073ffffffffffffffffffffffffffffffffffffffff16600083604051620002a1919062000682565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff161462000330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f504f4f4c5f414c52454144595f4445504c4f5945440000000000000000000000604482015260640162000258565b600082805190602001209050600084847f000000000000000000000000000000000000000000000000000000000000000060405160200162000374929190620006d3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052620003b29291602001620006a0565b6040516020818303038152906040529050818151602083016000f59250823b620003db57600080fd5b82600085604051620003ee919062000682565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050509392505050565b613a7a806200089783390190565b600082601f8301126200046357600080fd5b815160206200047c620004768362000796565b62000744565b80838252828201915082860187848660051b89010111156200049d57600080fd5b60005b85811015620004be57815184529284019290840190600101620004a0565b5090979650505050505050565b600080600060608486031215620004e157600080fd5b835167ffffffffffffffff80821115620004fa57600080fd5b818601915086601f8301126200050f57600080fd5b8151602062000522620004768362000796565b8083825282820191508286018b848660051b89010111156200054357600080fd5b600096505b848710156200058b57805173ffffffffffffffffffffffffffffffffffffffff811681146200057657600080fd5b83526001969096019591830191830162000548565b5091890151919750909350505080821115620005a657600080fd5b50620005b58682870162000451565b925050604084015190509250925092565b60006020808385031215620005da57600080fd5b823567ffffffffffffffff80821115620005f357600080fd5b818501915085601f8301126200060857600080fd5b8135818111156200061d576200061d62000867565b6200064f847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000744565b915080825286848285010111156200066657600080fd5b8084840185840137600090820190930192909252509392505050565b6000825162000696818460208701620007bd565b9190910192915050565b60008351620006b4818460208801620007bd565b835190830190620006ca818360208801620007bd565b01949350505050565b6040815260008351806040840152620006f4816060850160208801620007bd565b73ffffffffffffffffffffffffffffffffffffffff93909316602083015250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156200078e576200078e62000867565b604052919050565b600067ffffffffffffffff821115620007b357620007b362000867565b5060051b60200190565b60005b83811015620007da578181015183820152602001620007c0565b83811115620007ea576000848401525b50505050565b600060ff821660ff8114156200082f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe6101206040523480156200001257600080fd5b5060405162003a7a38038062003a7a833981016040819052620000359162000962565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c00160405160208183030381529060405280519060200120608081815250505060008060008480602001905181019062000131919062000880565b92509250925081518351146200017f5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41525241595360901b60448201526064015b60405180910390fd5b8062000197620f4240670de0b6b3a764000062000aab565b11158015620001ba5750620001b6600a670de0b6b3a764000062000aab565b8111155b620001fb5760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b604482015260640162000176565b82516002111580156200021057506008835111155b6200025e5760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f544f4b454e535f4c454e4754480000000000000000000000604482015260640162000176565b60005b83518160ff1610156200056f5760006001600160a01b0316848260ff168151811062000291576200029162000b5c565b60200260200101516001600160a01b03161415620002e15760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000176565b60076000858360ff1681518110620002fd57620002fd62000b5c565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615620003595760405162461bcd60e51b815260206004820152600360248201526214d15560ea1b604482015260640162000176565b828160ff168151811062000371576200037162000b5c565b6020026020010151670de0b6b3a764000011158015620003c45750620003a1670de0b6b3a7640000603262000ace565b838260ff1681518110620003b957620003b962000b5c565b602002602001015111155b620004035760405162461bcd60e51b815260206004820152600e60248201526d1253959053125117d5d15251d21560921b604482015260640162000176565b60405180608001604052806001151581526020018260ff168152602001848360ff168151811062000438576200043862000b5c565b60200260200101518152602001600081525060076000868460ff168151811062000466576200046662000b5c565b6020908102919091018101516001600160a01b03168252818101929092526040908101600020835181549385015161ffff1990941690151561ff0019161761010060ff9485160217815590830151600182015560609092015160029092019190915584516004918691908416908110620004e457620004e462000b5c565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558251839060ff831690811062000539576200053962000b5c565b60200260200101516005600082825462000554919062000a90565b90915550819050620005668162000b23565b91505062000261565b5062000585670de0b6b3a7640000603262000ace565b6005541115620005cb5760405162461bcd60e51b815260206004820152601060248201526f13505617d513d5105317d5d15251d21560821b604482015260640162000176565b620005ec6000620005e6670de0b6b3a7640000606462000ace565b62000773565b60408051600481526024810182526020810180516001600160e01b0316634da3182760e01b17905290516000916001600160a01b0387169162000630919062000a19565b600060405180830381855afa9150503d80600081146200066d576040519150601f19603f3d011682016040523d82523d6000602084013e62000672565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03881691620006bb919062000a19565b600060405180830381855afa9150503d8060008114620006f8576040519150601f19603f3d011682016040523d82523d6000602084013e620006fd565b606091505b509150508180602001905181019062000717919062000859565b60601b6001600160601b03191660e05280516200073e906020908301810190830162000859565b6001600160601b0319606091821b811660c05260a0949094529590951b90911661010052505060016006555062000ba1915050565b8060008082825462000786919062000a90565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600082601f830112620007f157600080fd5b815160206200080a620008048362000a6a565b62000a37565b80838252828201915082860187848660051b89010111156200082b57600080fd5b60005b858110156200084c578151845292840192908401906001016200082e565b5090979650505050505050565b6000602082840312156200086c57600080fd5b8151620008798162000b88565b9392505050565b6000806000606084860312156200089657600080fd5b83516001600160401b0380821115620008ae57600080fd5b818601915086601f830112620008c357600080fd5b81516020620008d6620008048362000a6a565b8083825282820191508286018b848660051b8901011115620008f757600080fd5b600096505b8487101562000927578051620009128162000b88565b835260019690960195918301918301620008fc565b50918901519197509093505050808211156200094257600080fd5b506200095186828701620007df565b925050604084015190509250925092565b600080604083850312156200097657600080fd5b82516001600160401b03808211156200098e57600080fd5b818501915085601f830112620009a357600080fd5b815181811115620009b857620009b862000b72565b620009cd601f8201601f191660200162000a37565b9150808252866020828501011115620009e557600080fd5b620009f881602084016020860162000af0565b508093505050602083015162000a0e8162000b88565b809150509250929050565b6000825162000a2d81846020870162000af0565b9190910192915050565b604051601f8201601f191681016001600160401b038111828210171562000a625762000a6262000b72565b604052919050565b60006001600160401b0382111562000a865762000a8662000b72565b5060051b60200190565b6000821982111562000aa65762000aa662000b46565b500190565b60008262000ac957634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161562000aeb5762000aeb62000b46565b500290565b60005b8381101562000b0d57818101518382015260200162000af3565b8381111562000b1d576000848401525b50505050565b600060ff821660ff81141562000b3d5762000b3d62000b46565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000b9e57600080fd5b50565b60805160a05160c05160601c60e05160601c6101005160601c612e6162000c1960003960006104fe01526000818161039901528181611d9c01528181611ecb01526120410152600061024a0152600081816103c0015281816116d90152611c8c01526000818161031301526119510152612e616000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063627dd56a116100ee578063a69840a811610097578063af8c09bf11610071578063af8c09bf146104e6578063cf58879a146104f9578063d505accf14610520578063dd62ed3e1461053557600080fd5b8063a69840a814610499578063a8f1f52e146104c0578063a9059cbb146104d357600080fd5b80637ba0e2e7116100c85780637ba0e2e71461042a5780637ecebe001461043d57806395d89b411461045d57600080fd5b8063627dd56a146103e257806367e4ac2c146103f557806370a082311461040a57600080fd5b80632a07b6c71161015b5780633644e515116101355780633644e5151461030e578063469e9067146103355780634da318271461039457806354cf2aeb146103bb57600080fd5b80632a07b6c7146102ad57806330adf81f146102cd578063313ce567146102f457600080fd5b80630c0a0cd21161018c5780630c0a0cd21461024557806318160ddd1461029157806323b872dd1461029a57600080fd5b8063053da1c8146101b357806306fdde03146101d9578063095ea7b314610222575b600080fd5b6101c66101c1366004612a53565b610560565b6040519081526020015b60405180910390f35b6102156040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b6040516101d09190612c3e565b610235610230366004612936565b61095c565b60405190151581526020016101d0565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d0565b6101c660005481565b6102356102a836600461299b565b6109d6565b6102c06102bb366004612a53565b610b22565b6040516101d09190612bd9565b6101c67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102fc601281565b60405160ff90911681526020016101d0565b6101c67f000000000000000000000000000000000000000000000000000000000000000081565b61037061034336600461270a565b60076020526000908152604090208054600182015460029092015460ff8083169361010090930416919084565b60408051941515855260ff90931660208501529183015260608201526080016101d0565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b6101c67f000000000000000000000000000000000000000000000000000000000000000081565b6101c66103f0366004612a53565b610e36565b6103fd6111b6565b6040516101d09190612b7f565b6101c661041836600461270a565b60016020526000908152604090205481565b6101c6610438366004612a53565b611225565b6101c661044b36600461270a565b60036020526000908152604090205481565b6102156040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6101c67f54726964656e743a496e6465780000000000000000000000000000000000000081565b6101c66104ce366004612a53565b6114e8565b6102356104e1366004612936565b61151e565b6101c66104f4366004612a53565b6115a3565b61026c7f000000000000000000000000000000000000000000000000000000000000000081565b61053361052e3660046129dc565b611826565b005b6101c6610543366004612962565b600260209081526000928352604080842090915290825290205481565b60006006546001146105d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6002600655600080808080806105eb888a018a612789565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260076020526040902054959b5093995091975095509350915060ff168015610654575073ffffffffffffffffffffffffffffffffffffffff851660009081526007602052604090205460ff165b6106ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f545f5345540000000000000000000000000000000000000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260076020526040808220928816825290206002808301546107099161070490670de0b6b3a7640000612c69565b611b62565b841115610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f000000000000000000000000000000000000000060448201526064016105ca565b61078f826002015483600101548360020154846001015488611c72565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152909950339063bd50c7b1906107ce908690600401612c3e565b600060405180830381600087803b1580156107e857600080fd5b505af11580156107fc573d6000803e3d6000fd5b505050600283015461080f915085612c51565b61081889611d0f565b1015610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f5245434549564544000000000000000000000000000000000000000060448201526064016105ca565b838260020160008282546108949190612c51565b92505081905550888160020160008282546108af9190612cba565b909155506108c19050878a8888611e28565b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062878d604051610940929190918252602082015260400190565b60405180910390a4505060016006555094979650505050505050565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109c49086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610a735773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610a6d908490612cba565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610aa8908490612cba565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b109086815260200190565b60405180910390a35060019392505050565b6060600654600114610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064016105ca565b600260065560008080610ba5858701876128f8565b9250925092506000610bb982600054612120565b9050610bc5308361229c565b60045467ffffffffffffffff811115610be057610be0612dd7565b604051908082528060200260200182016040528015610c2557816020015b6040805180820190915260008082526020820152815260200190600190039081610bfe5790505b50945060005b600454811015610e2557600060048281548110610c4a57610c4a612da8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526007909152604082206002015490925090610c8c8583611b62565b905080610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d4154485f415050524f5800000000000000000000000000000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff831660009081526007602052604081206002018054839290610d2d908490612cba565b90915550610d3f905083828a8a611e28565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200182815250898581518110610d7c57610d7c612da8565b60200260200101819052508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc3738584604051610e0792919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a35050508080610e1d90612cfd565b915050610c2b565b505060016006555091949350505050565b6000600654600114610ea4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064016105ca565b6002600655600080808080610ebb87890189612727565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600760205260409020549499509297509095509350915060ff168015610f22575073ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205460ff165b610f88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f545f5345540000000000000000000000000000000000000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526007602052604080822092871682529020600280830154610fd29161070490670de0b6b3a7640000612c69565b83111561103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d41585f494e5f524154494f000000000000000000000000000000000000000060448201526064016105ca565b611058826002015483600101548360020154846001015487611c72565b975081600201548361106a9190612c51565b61107388611d0f565b10156110db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f5245434549564544000000000000000000000000000000000000000060448201526064016105ca565b828260020160008282546110ef9190612c51565b925050819055508781600201600082825461110a9190612cba565b9091555061111c905086898787611e28565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062868c60405161119b929190918252602082015260400190565b60405180910390a45050600160065550939695505050505050565b6060600480548060200260200160405190810160405280929190818152602001828054801561121b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111f0575b5050505050905090565b6000600654600114611293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064016105ca565b60026006556000806112a784860186612936565b9150915060006112b982600054612120565b905060005b6004548110156114cf576000600482815481106112dd576112dd612da8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600790915260408220600201549092509081611320578461132a565b61132a8583611b62565b905061134364e8d4a51000670de0b6b3a7640000612c69565b8110156113ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d494e5f42414c414e434500000000000000000000000000000000000000000060448201526064016105ca565b6113b68282612c51565b6113bf84611d0f565b1015611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e4f545f5245434549564544000000000000000000000000000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600760205260408120600201805483929061145f908490612c51565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff85811682526020820184905289169133917ff9403b28cc8805935e0ce6943ed646d5fde3d1e14f6b398e85bfa2851d1b85f7910160405180910390a350505080806114c790612cfd565b9150506112be565b506114da838361232f565b506001600655949350505050565b600080808080806114fb87890189612ade565b945094509450945094506115128585858585611c72565b98975050505050505050565b3360009081526001602052604081208054839190839061153f908490612cba565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109c49086815260200190565b6000600654600114611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064016105ca565b60026006556000808080611627868801886128a9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260409020805494985092965090945092509060ff166116c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4e4f545f5345540000000000000000000000000000000000000000000000000060448201526064016105ca565b6116fd81600201548260010154600054600554867f000000000000000000000000000000000000000000000000000000000000000061239f565b955061172781600201546003670de0b6b3a764000061171c9190612c69565b610704906001612c51565b861115611790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d41585f4f55545f524154494f0000000000000000000000000000000000000060448201526064016105ca565b858160020160008282546117a49190612cba565b909155506117b49050308361229c565b6117c085878686611e28565b6040805173ffffffffffffffffffffffffffffffffffffffff87811682526020820189905286169133917f3dd1df88dc92e2788892542d81f999d720a44b4c127065d45c128f4f59fdc373910160405180910390a3505060016006555091949350505050565b42841015611890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611a09573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611a8457508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611aea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e4154555245000000000000000060448201526064016105ca565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000828202831580611b82575082848281611b7f57611b7f612d79565b04145b611be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d554c5f4f564552464c4f57000000000000000000000000000000000000000060448201526064016105ca565b6706f05b59d3b20000810181811015611c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4d554c5f4f564552464c4f57000000000000000000000000000000000000000060448201526064016105ca565b670de0b6b3a7640000815b0495945050505050565b600080611c7f8685612120565b90506000611cb9846107047f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612cba565b90506000611cd089611ccb8482612c51565b612120565b90506000611cde828561244e565b90506000611cf482670de0b6b3a7640000612cba565b9050611d008982611b62565b9b9a5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff83811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec00000000000000000000000000000000000000000000000000000000179052915160009283927f000000000000000000000000000000000000000000000000000000000000000090911691611dc99190612b63565b600060405180830381855afa9150503d8060008114611e04576040519150601f19603f3d011682016040523d82523d6000602084013e611e09565b606091505b5091505080806020019051810190611e219190612ac5565b9392505050565b8015611faa576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f000000000000000000000000000000000000000000000000000000000000000090911691611ef791612b63565b6000604051808303816000865af19150503d8060008114611f34576040519150601f19603f3d011682016040523d82523d6000602084013e611f39565b606091505b5050905080611fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c4544000000000000000000000000000000000060448201526064016105ca565b5061211a565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f0000000000000000000000000000000000000000000000000000000000000000169161206b91612b63565b6000604051808303816000865af19150503d80600081146120a8576040519150601f19603f3d011682016040523d82523d6000602084013e6120ad565b606091505b5050905080612118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016105ca565b505b50505050565b600081612189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4449565f5a45524f00000000000000000000000000000000000000000000000060448201526064016105ca565b670de0b6b3a764000083028315806121b75750670de0b6b3a76400008482816121b4576121b4612d79565b04145b61221d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4449565f494e5445524e414c000000000000000000000000000000000000000060448201526064016105ca565b6002830481018181101561228d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4449565f494e5445524e414c000000000000000000000000000000000000000060448201526064016105ca565b838181611c6857611c68612d79565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906122d1908490612cba565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b806000808282546123409190612c51565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612323565b6000806123ac8786612120565b905060006123ba8588612cba565b905060006123c88289612120565b905060006123e7826123e2670de0b6b3a764000087612120565b612571565b905060006123f5828d611b62565b90506000612403828e612cba565b905060008861241a88670de0b6b3a7640000612cba565b6124249190612c7d565b905061243c8261070483670de0b6b3a7640000612cba565b9e9d5050505050505050505050505050565b60008260011115801561247f57506001612471670de0b6b3a76400006002612c7d565b61247b9190612cba565b8311155b6124e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f42415345000000000000000000000000000000000000000060448201526064016105ca565b6000670de0b6b3a76400006124fa8185612c69565b6125049190612c7d565b905060006125128285612cba565b9050600061252c866123e2670de0b6b3a764000086612c69565b905081612537578093505b600061255a87846125556402540be400670de0b6b3a7640000612c69565b6125e0565b90506125668282611b62565b979650505050505050565b600061257e600283612d36565b61259057670de0b6b3a7640000612592565b825b905061259f600283612c69565b91505b81156125c6576125b28380612c7d565b92506125bf600283612c69565b91506125a2565b6125d1600283612d36565b156109d057611e218382612c7d565b60008281806125f787670de0b6b3a76400006126d0565b670de0b6b3a76400009550909250905083600060015b8783106126c3576000612628670de0b6b3a764000083612c7d565b905060008061264889612643670de0b6b3a764000086612cba565b6126d0565b9150915061265a86610704848b611b62565b95506126668684612120565b955085612675575050506126c3565b861561267f579315935b8015612689579315935b84156126a057612699868b612cba565b99506126ad565b6126aa868b612c51565b99505b50505080806126bb90612cfd565b91505061260d565b5050505050509392505050565b6000808284106126e657505080820360006126ee565b505081810360015b9250929050565b8035801515811461270557600080fd5b919050565b60006020828403121561271c57600080fd5b8135611e2181612e06565b600080600080600060a0868803121561273f57600080fd5b853561274a81612e06565b9450602086013561275a81612e06565b9350604086013561276a81612e06565b9250612778606087016126f5565b949793965091946080013592915050565b60008060008060008060c087890312156127a257600080fd5b86356127ad81612e06565b955060208701356127bd81612e06565b945060408701356127cd81612e06565b93506127db606088016126f5565b92506080870135915060a087013567ffffffffffffffff808211156127ff57600080fd5b818901915089601f83011261281357600080fd5b81358181111561282557612825612dd7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561286b5761286b612dd7565b816040528281528c602084870101111561288457600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600080600080608085870312156128bf57600080fd5b84356128ca81612e06565b935060208501356128da81612e06565b92506128e8604086016126f5565b9396929550929360600135925050565b60008060006060848603121561290d57600080fd5b833561291881612e06565b9250612926602085016126f5565b9150604084013590509250925092565b6000806040838503121561294957600080fd5b823561295481612e06565b946020939093013593505050565b6000806040838503121561297557600080fd5b823561298081612e06565b9150602083013561299081612e06565b809150509250929050565b6000806000606084860312156129b057600080fd5b83356129bb81612e06565b925060208401356129cb81612e06565b929592945050506040919091013590565b600080600080600080600060e0888a0312156129f757600080fd5b8735612a0281612e06565b96506020880135612a1281612e06565b95506040880135945060608801359350608088013560ff81168114612a3657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060208385031215612a6657600080fd5b823567ffffffffffffffff80821115612a7e57600080fd5b818501915085601f830112612a9257600080fd5b813581811115612aa157600080fd5b866020828501011115612ab357600080fd5b60209290920196919550909350505050565b600060208284031215612ad757600080fd5b5051919050565b600080600080600060a08688031215612af657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008151808452612b31816020860160208601612cd1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612b75818460208701612cd1565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612bcd57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612b9b565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612c31578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612bf6565b5091979650505050505050565b602081526000611e216020830184612b19565b60008219821115612c6457612c64612d4a565b500190565b600082612c7857612c78612d79565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cb557612cb5612d4a565b500290565b600082821015612ccc57612ccc612d4a565b500390565b60005b83811015612cec578181015183820152602001612cd4565b8381111561211a5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2f57612d2f612d4a565b5060010190565b600082612d4557612d45612d79565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612e2857600080fd5b5056fea2646970667358221220de16923b6f237d1d436740e66d26df8d0dd357682a3c13eb51bd7109be99fbb164736f6c63430008070033a2646970667358221220965e27ce295e2a48de6ffe77ee670712f370e4959772a9b377bae11d9679c17364736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mudit Gupta",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident exchange Index Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2052,
        "contract": "contracts/pool/IndexPoolFactory.sol:IndexPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}