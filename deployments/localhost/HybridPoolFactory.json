{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "configAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "poolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ef1c36b11fad2f93cc8123a93bf146fd093ce2520aed4e56a4f581d4432e61a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "4824974",
    "logsBloom": "0x
    "blockHash": "0x1ba67c21c5f22c8147f1f0cce7ea1d555d593bb9b027549f4eaa6f51960c4972",
    "transactionHash": "0x7ef1c36b11fad2f93cc8123a93bf146fd093ce2520aed4e56a4f581d4432e61a",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "4824974",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "solcInputHash": "8aefef22c63fcc2a1730a774a4a7414a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mudit Gupta.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for deploying Trident exchange Hybrid Pool with configurations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/HybridPoolFactory.sol\":\"HybridPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/deployer/MasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IPoolFactory.sol\\\";\\nimport \\\"../utils/TridentOwnable.sol\\\";\\n\\n/// @notice Trident pool deployer contract with template factory whitelist.\\n/// @author Mudit Gupta.\\ncontract MasterDeployer is TridentOwnable {\\n    event DeployPool(address indexed _factory, address indexed pool);\\n\\n    uint256 public barFee;\\n    address public migrator;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n\\n    address[] public pools;\\n\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    constructor(\\n        uint256 _barFee,\\n        address _barFeeTo,\\n        address _bento\\n    ) {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        require(_barFeeTo != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_bento != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        barFee = _barFee;\\n        barFeeTo = _barFeeTo;\\n        bento = _bento;\\n    }\\n\\n    function deployPool(address _factory, bytes calldata _deployData) external returns (address pool) {\\n        require(whitelistedFactories[_factory], \\\"FACTORY_NOT_WHITELISTED\\\");\\n        pool = IPoolFactory(_factory).deployPool(_deployData);\\n        pools.push(pool);\\n        emit DeployPool(_factory, pool);\\n    }\\n\\n    function addToWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = true;\\n    }\\n\\n    function removeFromWhitelist(address _factory) external onlyOwner {\\n        whitelistedFactories[_factory] = false;\\n    }\\n\\n    function setBarFee(uint256 _barFee) external onlyOwner {\\n        require(_barFee <= MAX_FEE, \\\"INVALID_BAR_FEE\\\");\\n        barFee = _barFee;\\n    }\\n\\n    function setMigrator(address _migrator) external onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    function poolsCount() external view returns (uint256 count) {\\n        count = pools.length;\\n    }\\n}\\n\",\"keccak256\":\"0x33c2d3101bb271d721b6ef1835631dba59e63444b1510f87a2b46575864f7270\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimal BentoBox vault interface. \\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n    \\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n    \\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n    \\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n}\\n\",\"keccak256\":\"0x17c0d71c95bc369805bad3d93a59ead6588bf5e48232f1bc6b3064d193c12b67\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer interface.\\ninterface IMasterDeployer {\\n    function barFee() external view returns (uint256);\\n    \\n    function barFeeTo() external view returns (address);\\n    \\n    function bento() external view returns (address);\\n    \\n    function migrator() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ed802a5e6005128dbee0885153b3d07fea3dfb8cf2b5544d8bc208cce2fb328\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    \\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xabe7c92de39e405012bd89d614fe4107a7323f8ed4bdc9a8dad5c2429c14fbcb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployment interface.\\ninterface IPoolFactory {\\n    function deployPool(bytes calldata _deployData) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x4310b83f8e22e0f9997f8deca08a921d961df64ac7c4ace4f7a00e9d188384fe\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool callback interface.\\ninterface ITridentCallee {\\n    function tridentSwapCallback(bytes calldata data) external;\\n\\n    function tridentMintCallback(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x256e838362a3064201b37b3b7c08bc1421b173a6fea633176123f0b827b868c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice A library that contains functions for calculating differences between two uint256.\\n/// @author Adapted from https://github.com/saddle-finance/saddle-contract/blob/master/contracts/MathUtils.sol.\\nlibrary MathUtils {\\n    /// @notice Compares a and b and returns 'true' if the difference between a and b\\n    /// is less than 1 or equal to each other.\\n    /// @param a uint256 to compare with.\\n    /// @param b uint256 to compare with.\\n    /// @return wn 'True' if the difference between a and b is less than 1 or equal,\\n    /// otherwise return 'false'.\\n    function within1(uint256 a, uint256 b) internal pure returns (bool wn) {\\n        wn = difference(a, b) <= 1;\\n    }\\n\\n    /// @notice Calculates absolute difference between a and b.\\n    /// @param a uint256 to compare with.\\n    /// @param b uint256 to compare with.\\n    /// @return diff Difference between a and b.\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256 diff) {\\n        unchecked {\\n            if (a > b) {\\n                diff = a - b;\\n            }\\n            diff = b - a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d68e1b7c4b7579e8ae6e7a92175e3931126f5c264b30cabf7f1677b9b6dad1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TridentMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident sqrt helper library.\\nlibrary TridentMath {\\n    /// @notice Calculate sqrt (x) rounding down, where `x` is unsigned 256-bit integer number.\\n    /// @dev Adapted from https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol, \\n    /// \\u00a9 2019 ABDK Consulting, License-Identifier: BSD-4-Clause.\\n    /// @param x Unsigned 256-bit integer number.\\n    /// @return result Sqrt result.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x == 0) result = 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x8) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // @dev Seven iterations should be enough.\\n                uint256 r1 = x / r;\\n                result = r < r1 ? r : r1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccbada517ace78149a4602ce782e6faf408404ee300569b8adf76e0eb7f0dd3b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/ConstantProductPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IMasterDeployer.sol\\\";\\nimport \\\"../workInProgress/IMigrator.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"../libraries/TridentMath.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\n\\n/// @notice Trident exchange pool template with constant product formula for swapping between an ERC-20 token pair.\\n/// @dev The reserves are stored as bento shares.\\n///      The curve is applied to shares as well. This pool does not care about the underlying amounts.\\ncontract ConstantProductPool is IPool, TridentERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    uint256 internal constant MINIMUM_LIQUIDITY = 1000;\\n\\n    uint8 internal constant PRECISION = 112;\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n    uint256 internal constant MAX_FEE_SQUARE = 100000000;\\n    uint256 internal constant E18 = uint256(10)**18;\\n    uint256 public immutable swapFee;\\n    uint256 internal immutable MAX_FEE_MINUS_SWAP_FEE;\\n\\n    address public immutable barFeeTo;\\n    address public immutable bento;\\n    address public immutable masterDeployer;\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    uint256 public barFee;\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast;\\n\\n    uint112 internal reserve0;\\n    uint112 internal reserve1;\\n    uint32 internal blockTimestampLast;\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:ConstantProduct\\\";\\n\\n    uint256 internal unlocked;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address _token0, address _token1, uint256 _swapFee, bool _twapSupport) = abi.decode(_deployData, (address, address, uint256, bool));\\n\\n        require(_token0 != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_token0 != _token1, \\\"IDENTICAL_ADDRESSES\\\");\\n        require(_swapFee <= MAX_FEE, \\\"INVALID_SWAP_FEE\\\");\\n\\n        (, bytes memory _barFee) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFee.selector));\\n        (, bytes memory _barFeeTo) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFeeTo.selector));\\n        (, bytes memory _bento) = _masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.bento.selector));\\n\\n        token0 = _token0;\\n        token1 = _token1;\\n        swapFee = _swapFee;\\n        // @dev This is safe from underflow - `swapFee` cannot exceed `MAX_FEE` per previous check.\\n        unchecked {\\n            MAX_FEE_MINUS_SWAP_FEE = MAX_FEE - _swapFee;\\n        }\\n        barFee = abi.decode(_barFee, (uint256));\\n        barFeeTo = abi.decode(_barFeeTo, (address));\\n        bento = abi.decode(_bento, (address));\\n        masterDeployer = _masterDeployer;\\n        unlocked = 1;\\n        if (_twapSupport) blockTimestampLast = 1;\\n    }\\n\\n    /// @dev Mints LP tokens - should be called via the router after transferring `bento` tokens.\\n    /// The router must ensure that sufficient LP tokens are minted by using the return value.\\n    function mint(bytes calldata data) public override lock returns (uint256 liquidity) {\\n        address recipient = abi.decode(data, (address));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n\\n        unchecked {\\n            _totalSupply += _mintFee(_reserve0, _reserve1, _totalSupply);\\n        }\\n\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        (uint256 fee0, uint256 fee1) = _nonOptimalMintFee(amount0, amount1, _reserve0, _reserve1);\\n        uint256 computed = TridentMath.sqrt((balance0 - fee0) * (balance1 - fee1));\\n\\n        if (_totalSupply == 0) {\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            address migrator = IMasterDeployer(masterDeployer).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity != 0 && liquidity != type(uint256).max, \\\"BAD_DESIRED_LIQUIDITY\\\");\\n            } else {\\n                require(migrator == address(0), \\\"ONLY_MIGRATOR\\\");\\n                liquidity = computed - MINIMUM_LIQUIDITY;\\n            }\\n        } else {\\n            uint256 k = TridentMath.sqrt(uint256(_reserve0) * _reserve1);\\n            liquidity = ((computed - k) * _totalSupply) / k;\\n        }\\n        require(liquidity != 0, \\\"INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(recipient, liquidity);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = TridentMath.sqrt(balance0 * balance1);\\n        emit Mint(msg.sender, amount0, amount1, recipient);\\n    }\\n\\n    /// @dev Burns LP tokens sent to this contract. The router must ensure that the user gets sufficient output tokens.\\n    function burn(bytes calldata data) public override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address recipient, bool unwrapBento) = abi.decode(data, (address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        unchecked {\\n            _totalSupply += _mintFee(_reserve0, _reserve1, _totalSupply);\\n        }\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n        _transfer(token0, amount0, recipient, unwrapBento);\\n        _transfer(token1, amount1, recipient, unwrapBento);\\n        // @dev This is safe from underflow - amounts are lesser figures derived from balances.\\n        unchecked {\\n            balance0 -= amount0;\\n            balance1 -= amount1;\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = TridentMath.sqrt(balance0 * balance1);\\n\\n        withdrawnAmounts = new TokenAmount[](2);\\n        withdrawnAmounts[0] = TokenAmount({token: address(token0), amount: amount0});\\n        withdrawnAmounts[1] = TokenAmount({token: address(token1), amount: amount1});\\n        emit Burn(msg.sender, amount0, amount1, recipient);\\n    }\\n\\n    /// @dev Burns LP tokens sent to this contract and swaps one of the output tokens for another\\n    /// - i.e., the user gets a single token out by burning LP tokens.\\n    function burnSingle(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenOut, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        unchecked {\\n            _totalSupply += _mintFee(_reserve0, _reserve1, _totalSupply);\\n        }\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n        unchecked {\\n            if (tokenOut == token1) {\\n                // @dev Swap `token0` for `token1`\\n                // - calculate `amountOut` as if the user first withdrew balanced liquidity and then swapped `token0` for `token1`.\\n                amount1 += _getAmountOut(amount0, _reserve0 - amount0, _reserve1 - amount1);\\n                _transfer(token1, amount1, recipient, unwrapBento);\\n                balance1 -= amount1;\\n                amountOut = amount1;\\n                amount0 = 0;\\n            } else {\\n                // @dev Swap `token1` for `token0`.\\n                require(tokenOut == token0, \\\"INVALID_OUTPUT_TOKEN\\\");\\n                amount0 += _getAmountOut(amount1, _reserve1 - amount1, _reserve0 - amount0);\\n                _transfer(token0, amount0, recipient, unwrapBento);\\n                balance0 -= amount0;\\n                amountOut = amount0;\\n                amount1 = 0;\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        kLast = TridentMath.sqrt(balance0 * balance1);\\n        emit Burn(msg.sender, amount0, amount1, recipient);\\n    }\\n\\n    /// @dev Swaps one token for another. The router must prefund this contract and ensure there isn't too much slippage.\\n    function swap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amountIn;\\n        address tokenOut;\\n        unchecked {\\n            if (tokenIn == token0) {\\n                tokenOut = token1;\\n                amountIn = balance0 - _reserve0;\\n                amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n                balance1 -= amountOut;\\n            } else {\\n                require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n                tokenOut = token0;\\n                amountIn = balance1 - reserve1;\\n                amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n                balance0 -= amountOut;\\n            }\\n        }\\n        _transfer(tokenOut, amountOut, recipient, unwrapBento);\\n        _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n        emit Swap(recipient, tokenIn, tokenOut, amountIn, amountOut);\\n    }\\n\\n    /// @dev Swaps one token for another. The router must support swap callbacks and ensure there isn't too much slippage.\\n    function flashSwap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento, uint256 amountIn, bytes memory context) = abi.decode(\\n            data,\\n            (address, address, bool, uint256, bytes)\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _getReserves();\\n        unchecked {\\n            if (tokenIn == token0) {\\n                amountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n                _transfer(token1, amountOut, recipient, unwrapBento);\\n                ITridentCallee(msg.sender).tridentSwapCallback(context);\\n                (uint256 balance0, uint256 balance1) = _balance();\\n                require(balance0 - _reserve0 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n                _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n                emit Swap(recipient, tokenIn, token1, amountIn, amountOut);\\n            } else {\\n                require(tokenIn == token1, \\\"INVALID_INPUT_TOKEN\\\");\\n                amountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n                _transfer(token0, amountOut, recipient, unwrapBento);\\n                ITridentCallee(msg.sender).tridentSwapCallback(context);\\n                (uint256 balance0, uint256 balance1) = _balance();\\n                require(balance1 - _reserve1 >= amountIn, \\\"INSUFFICIENT_AMOUNT_IN\\\");\\n                _update(balance0, balance1, _reserve0, _reserve1, _blockTimestampLast);\\n                emit Swap(recipient, tokenIn, token0, amountIn, amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev Updates `barFee` for Trident protocol.\\n    function updateBarFee() public {\\n        (, bytes memory _barFee) = masterDeployer.staticcall(abi.encodeWithSelector(IMasterDeployer.barFee.selector));\\n        barFee = abi.decode(_barFee, (uint256));\\n    }\\n\\n    function _getReserves()\\n        internal\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _balance() internal view returns (uint256 balance0, uint256 balance1) {\\n        // @dev balanceOf(address,address).\\n        (, bytes memory _balance0) = bento.staticcall(abi.encodeWithSelector(0xf7888aec, token0, address(this)));\\n        balance0 = abi.decode(_balance0, (uint256));\\n        // @dev balanceOf(address,address).\\n        (, bytes memory _balance1) = bento.staticcall(abi.encodeWithSelector(0xf7888aec, token1, address(this)));\\n        balance1 = abi.decode(_balance1, (uint256));\\n    }\\n\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _blockTimestampLast\\n    ) internal {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"OVERFLOW\\\");\\n        if (blockTimestampLast == 0) {\\n            // @dev TWAP support is disabled for gas efficiency.\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n        } else {\\n            uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n            if (blockTimestamp != _blockTimestampLast && _reserve0 != 0 && _reserve1 != 0) {\\n                unchecked {\\n                    uint32 timeElapsed = blockTimestamp - _blockTimestampLast;\\n                    uint256 price0 = (uint256(_reserve1) << PRECISION) / _reserve0;\\n                    price0CumulativeLast += price0 * timeElapsed;\\n                    uint256 price1 = (uint256(_reserve0) << PRECISION) / _reserve1;\\n                    price1CumulativeLast += price1 * timeElapsed;\\n                }\\n            }\\n            reserve0 = uint112(balance0);\\n            reserve1 = uint112(balance1);\\n            blockTimestampLast = blockTimestamp;\\n        }\\n        emit Sync(balance0, balance1);\\n    }\\n\\n    function _mintFee(\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint256 _totalSupply\\n    ) internal returns (uint256 liquidity) {\\n        uint256 _kLast = kLast;\\n        if (_kLast != 0) {\\n            uint256 computed = TridentMath.sqrt(uint256(_reserve0) * _reserve1);\\n            if (computed > _kLast) {\\n                // @dev `barFee` % of increase in liquidity.\\n                // It's going to be slightly less than `barFee` % in reality due to the math.\\n                liquidity = (_totalSupply * (computed - _kLast) * barFee) / computed / MAX_FEE;\\n                if (liquidity != 0) {\\n                    _mint(barFeeTo, liquidity);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveAmountIn,\\n        uint256 reserveAmountOut\\n    ) internal view returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * MAX_FEE_MINUS_SWAP_FEE;\\n        amountOut = (amountInWithFee * reserveAmountOut) / (reserveAmountIn * MAX_FEE + amountInWithFee);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        uint256 shares,\\n        address to,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            // @dev withdraw(address,address,address,uint256,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0x97da6d30, token, address(this), to, 0, shares));\\n            require(success, \\\"WITHDRAW_FAILED\\\");\\n        } else {\\n            // @dev transfer(address,address,address,uint256).\\n            (bool success, ) = bento.call(abi.encodeWithSelector(0xf18d03cc, token, address(this), to, shares));\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    /// @dev This fee is charged to cover for `swapFee` when users add unbalanced liquidity.\\n    function _nonOptimalMintFee(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) internal view returns (uint256 token0Fee, uint256 token1Fee) {\\n        if (_reserve0 == 0 || _reserve1 == 0) return (0, 0);\\n        uint256 amount1Optimal = (_amount0 * _reserve1) / _reserve0;\\n        if (amount1Optimal <= _amount1) {\\n            token1Fee = (swapFee * (_amount1 - amount1Optimal)) / (2 * MAX_FEE);\\n        } else {\\n            uint256 amount0Optimal = (_amount1 * _reserve0) / _reserve1;\\n            token0Fee = (swapFee * (_amount0 - amount0Optimal)) / (2 * MAX_FEE);\\n        }\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = token0;\\n        assets[1] = token1;\\n    }\\n\\n    function getAmountOut(bytes calldata data) public view override returns (uint256 finalAmountOut) {\\n        (address tokenIn, uint256 amountIn) = abi.decode(data, (address, uint256));\\n        (uint112 _reserve0, uint112 _reserve1, ) = _getReserves();\\n        if (tokenIn == token0) {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve0, _reserve1);\\n        } else {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve1, _reserve0);\\n        }\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        return _getReserves();\\n    }\\n}\\n\",\"keccak256\":\"0x35514daf83c7de865246fdf52c5c37f4a176df6532612b74db5d239c9697454a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/HybridPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../deployer/MasterDeployer.sol\\\";\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ITridentCallee.sol\\\";\\nimport \\\"../libraries/MathUtils.sol\\\";\\nimport \\\"./TridentERC20.sol\\\";\\n\\n/// @notice Trident exchange pool template with hybrid like-kind formula for swapping between an ERC-20 token pair.\\n/// @dev The reserves are stored as bento shares. However, the stabeswap invariant is applied to the underlying amounts.\\n///      The API uses the underlying amounts.\\ncontract HybridPool is IPool, TridentERC20 {\\n    using MathUtils for uint256;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed recipient);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    uint256 internal constant MINIMUM_LIQUIDITY = 10**3;\\n    uint8 internal constant PRECISION = 112;\\n\\n    /// @dev Constant value used as max loop limit.\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n    uint256 internal constant MAX_FEE = 10000; // @dev 100%.\\n    uint256 public immutable swapFee;\\n\\n    address public immutable barFeeTo;\\n    IBentoBoxMinimal public immutable bento;\\n    MasterDeployer public immutable masterDeployer;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n    uint256 public immutable A;\\n    uint256 internal immutable N_A; // @dev 2 * A.\\n    uint256 internal constant A_PRECISION = 100;\\n\\n    /// @dev Multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS.\\n    /// For example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n    /// has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10.\\n    uint256 public immutable token0PrecisionMultiplier;\\n    uint256 public immutable token1PrecisionMultiplier;\\n\\n    uint128 internal reserve0;\\n    uint128 internal reserve1;\\n\\n    bytes32 public constant override poolIdentifier = \\\"Trident:HybridPair\\\";\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"HybridPool: LOCKED\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    /// @dev Only set immutable variables here - state changes made here will not be used.\\n    constructor(bytes memory _deployData, address _masterDeployer) {\\n        (address tokenA, address tokenB, uint256 _swapFee, uint256 a) = abi.decode(_deployData, (address, address, uint256, uint256));\\n\\n        require(tokenA != address(0), \\\"HybridPool: ZERO_ADDRESS\\\");\\n        require(tokenA != tokenB, \\\"HybridPool: IDENTICAL_ADDRESSES\\\");\\n        require(_swapFee <= MAX_FEE, \\\"HybridPool: INVALID_SWAP_FEE\\\");\\n        require(a != 0, \\\"HybridPool: ZERO_A\\\");\\n\\n        token0 = tokenA;\\n        token1 = tokenB;\\n        swapFee = _swapFee;\\n        bento = IBentoBoxMinimal(MasterDeployer(_masterDeployer).bento());\\n        barFeeTo = MasterDeployer(_masterDeployer).barFeeTo();\\n        masterDeployer = MasterDeployer(_masterDeployer);\\n        A = a;\\n        N_A = 2 * a;\\n        token0PrecisionMultiplier = uint256(10)**(decimals - TridentERC20(tokenA).decimals());\\n        token1PrecisionMultiplier = uint256(10)**(decimals - TridentERC20(tokenB).decimals());\\n        unlocked = 1;\\n    }\\n\\n    function mint(bytes calldata data) public override lock returns (uint256 liquidity) {\\n        address to = abi.decode(data, (address));\\n        (uint256 _reserve0, uint256 _reserve1) = _reserve();\\n        uint256 _totalSupply = totalSupply;\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        (uint256 fee0, uint256 fee1) = _unoptimalMintFee(amount0, amount1, _reserve0, _reserve1);\\n\\n        uint256 newLiq = _computeLiquidity(balance0 - fee0, balance1 - fee1);\\n        if (_totalSupply == 0) {\\n            liquidity = newLiq - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        } else {\\n            uint256 oldLiq = _computeLiquidity(_reserve0, _reserve1);\\n            liquidity = ((newLiq - oldLiq) * _totalSupply) / oldLiq;\\n        }\\n        require(liquidity > 0, \\\"HybridPool: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n        _updateReserves();\\n        emit Mint(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function burn(bytes calldata data) public override lock returns (IPool.TokenAmount[] memory withdrawnAmounts) {\\n        (address to, bool unwrapBento) = abi.decode(data, (address, bool));\\n        uint256 _totalSupply = totalSupply;\\n\\n        uint256 liquidity = balanceOf[address(this)];\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        _burn(address(this), liquidity);\\n\\n        _transferAmount(token0, to, amount0, unwrapBento);\\n        _transferAmount(token1, to, amount1, unwrapBento);\\n\\n        balance0 -= bento.toShare(token0, amount0, false);\\n        balance1 -= bento.toShare(token1, amount1, false);\\n\\n        withdrawnAmounts = new TokenAmount[](2);\\n        withdrawnAmounts[0] = TokenAmount({token: address(token0), amount: amount0});\\n        withdrawnAmounts[1] = TokenAmount({token: address(token1), amount: amount1});\\n\\n        _updateReserves();\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function burnSingle(bytes calldata data) public override lock returns (uint256 amount) {\\n        (address tokenOut, address to, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint256 _reserve0, uint256 _reserve1) = _reserve();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        uint256 _totalSupply = totalSupply;\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        _burn(address(this), liquidity);\\n\\n        uint256 amount0 = (liquidity * balance0) / _totalSupply;\\n        uint256 amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        if (tokenOut == address(token1)) {\\n            // @dev Swap token0 for token1.\\n            // @dev Calculate amountOut as if the user first withdrew balanced liquidity and then swapped token0 for token1.\\n            uint256 fee = _handleFee(token0, amount0);\\n            amount1 += _getAmountOut(amount0 - fee, _reserve0 - amount0, _reserve1 - amount1, true);\\n            _transferAmount(token1, to, amount1, unwrapBento);\\n            balance0 -= bento.toShare(token0, amount0, false);\\n            amount = amount1;\\n            amount0 = 0;\\n        } else {\\n            // @dev Swap token1 for token0.\\n            require(tokenOut == address(token0), \\\"INVALID_OUTPUT_TOKEN\\\");\\n            uint256 fee = _handleFee(token1, amount1);\\n            amount0 += _getAmountOut(amount1 - fee, _reserve0 - amount0, _reserve1 - amount1, false);\\n            _transferAmount(token0, to, amount0, unwrapBento);\\n            balance1 -= bento.toShare(token1, amount1, false);\\n            amount = amount0;\\n            amount1 = 0;\\n        }\\n\\n        _updateReserves();\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    function swap(bytes calldata data) public override lock returns (uint256 finalAmountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento) = abi.decode(data, (address, address, bool));\\n        (uint256 _reserve0, uint256 _reserve1) = _reserve();\\n        (uint256 balance0, uint256 balance1) = _balance();\\n        address tokenOut;\\n\\n        if (tokenIn == address(token0)) {\\n            uint256 amountIn = balance0 - _reserve0;\\n            uint256 fee = _handleFee(tokenIn, amountIn);\\n            finalAmountOut = _getAmountOut(amountIn - fee, _reserve0, _reserve1, true);\\n            tokenOut = token1;\\n        } else {\\n            require(tokenIn == address(token1), \\\"HybridPool: Invalid input token\\\");\\n            uint256 amountIn = balance1 - _reserve1;\\n            uint256 fee = _handleFee(tokenIn, amountIn);\\n            finalAmountOut = _getAmountOut(amountIn - fee, _reserve0, _reserve1, false);\\n            tokenOut = token0;\\n        }\\n\\n        _transferAmount(tokenOut, recipient, finalAmountOut, unwrapBento);\\n        _updateReserves();\\n    }\\n\\n    function flashSwap(bytes calldata data) public override lock returns (uint256 amountOut) {\\n        (address tokenIn, address recipient, bool unwrapBento, uint256 amountIn, bytes memory context) = abi.decode(\\n            data,\\n            (address, address, bool, uint256, bytes)\\n        );\\n        (uint256 _reserve0, uint256 _reserve1) = _reserve();\\n        uint256 fee;\\n\\n        if (tokenIn == address(token0)) {\\n            amountIn = bento.toAmount(token0, amountIn, false);\\n            fee = (amountIn * swapFee) / MAX_FEE;\\n            amountOut = _getAmountOut(amountIn - fee, _reserve0, _reserve1, true);\\n            _processSwap(token1, recipient, amountOut, context, unwrapBento);\\n            uint256 balance0 = bento.toAmount(token0, bento.balanceOf(token0, address(this)), false);\\n            require(balance0 - _reserve0 >= amountIn, \\\"HybridPool: Insuffficient amount in\\\");\\n        } else {\\n            require(tokenIn == address(token1), \\\"HybridPool: Invalid input token\\\");\\n            amountIn = bento.toAmount(token1, amountIn, false);\\n            fee = (amountIn * swapFee) / MAX_FEE;\\n            amountOut = _getAmountOut(amountIn - fee, _reserve0, _reserve1, false);\\n            _processSwap(token0, recipient, amountOut, context, unwrapBento);\\n            uint256 balance1 = bento.toAmount(token1, bento.balanceOf(token0, address(this)), false);\\n            require(balance1 - _reserve1 >= amountIn, \\\"HybridPool: Insufficient amount in\\\");\\n        }\\n\\n        _transferAmount(tokenIn, barFeeTo, fee, false);\\n        _updateReserves();\\n    }\\n\\n    function _transferAmount(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bento.withdraw(token, address(this), to, amount, 0);\\n        } else {\\n            bento.transfer(token, address(this), to, bento.toShare(token, amount, false));\\n        }\\n    }\\n\\n    function _transferShares(\\n        address token,\\n        address to,\\n        uint256 shares,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bento.withdraw(token, address(this), to, 0, shares);\\n        } else {\\n            bento.transfer(token, address(this), to, shares);\\n        }\\n    }\\n\\n    function _processSwap(\\n        address tokenOut,\\n        address to,\\n        uint256 amountOut,\\n        bytes memory data,\\n        bool unwrapBento\\n    ) internal {\\n        _transferAmount(tokenOut, to, amountOut, unwrapBento);\\n        if (data.length != 0) ITridentCallee(msg.sender).tridentSwapCallback(data);\\n    }\\n\\n    function _handleFee(address tokenIn, uint256 amountIn) internal returns (uint256 fee) {\\n        fee = (amountIn * swapFee) / MAX_FEE;\\n        uint256 barFee = (fee * masterDeployer.barFee()) / MAX_FEE;\\n        _transferAmount(tokenIn, barFeeTo, barFee, false);\\n    }\\n\\n    function _updateReserves() internal {\\n        uint256 _reserve0 = bento.balanceOf(token0, address(this));\\n        uint256 _reserve1 = bento.balanceOf(token1, address(this));\\n        require(_reserve0 < type(uint128).max && _reserve1 < type(uint128).max, \\\"HybridPool: OVERFLOW\\\");\\n        reserve0 = uint128(_reserve0);\\n        reserve1 = uint128(_reserve1);\\n        emit Sync(_reserve0, _reserve1);\\n    }\\n\\n    function _balance() internal view returns (uint256 balance0, uint256 balance1) {\\n        balance0 = bento.toAmount(token0, bento.balanceOf(token0, address(this)), false);\\n        balance1 = bento.toAmount(token1, bento.balanceOf(token1, address(this)), false);\\n    }\\n\\n    function _reserve() internal view returns (uint256 _reserve0, uint256 _reserve1) {\\n        (_reserve0, _reserve1) = (reserve0, reserve1);\\n        _reserve0 = bento.toAmount(token0, _reserve0, false);\\n        _reserve1 = bento.toAmount(token1, _reserve1, false);\\n    }\\n\\n    function getAmountOut(bytes calldata data) public view override returns (uint256 finalAmountOut) {\\n        (address tokenIn, uint256 amountIn) = abi.decode(data, (address, uint256));\\n        (uint256 _reserve0, uint256 _reserve1) = _reserve();\\n        amountIn = bento.toAmount(tokenIn, amountIn, false);\\n        amountIn -= (amountIn * swapFee) / MAX_FEE;\\n        if (tokenIn == token0) {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve0, _reserve1, true);\\n        } else {\\n            finalAmountOut = _getAmountOut(amountIn, _reserve0, _reserve1, false);\\n        }\\n    }\\n\\n    function getAssets() public view override returns (address[] memory assets) {\\n        assets = new address[](2);\\n        assets[0] = token0;\\n        assets[1] = token1;\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * See the StableSwap paper for details\\n     *\\n     * @dev Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L319\\n     *\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function _computeLiquidity(uint256 _reserve0, uint256 _reserve1) internal view returns (uint256) {\\n        uint256 xp0 = _reserve0 * token0PrecisionMultiplier;\\n        uint256 xp1 = _reserve1 * token1PrecisionMultiplier;\\n\\n        return _computeLiquidityFromAdjustedBalances(xp0, xp1);\\n    }\\n\\n    function _computeLiquidityFromAdjustedBalances(uint256 xp0, uint256 xp1) internal view returns (uint256) {\\n        uint256 s = xp0 + xp1;\\n\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 D = s;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = (((D * D) / xp0) * D) / xp1 / 4;\\n            prevD = D;\\n            D = (((N_A * s) / A_PRECISION + 2 * dP) * D) / ((N_A / A_PRECISION - 1) * D + 3 * dP);\\n            if (D.within1(prevD)) {\\n                break;\\n            }\\n        }\\n        return D;\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 _reserve0,\\n        uint256 _reserve1,\\n        bool token0In\\n    ) public view returns (uint256) {\\n        uint256 xpIn;\\n        uint256 xpOut;\\n\\n        if (token0In) {\\n            xpIn = _reserve0 * token0PrecisionMultiplier;\\n            xpOut = _reserve1 * token1PrecisionMultiplier;\\n            amountIn *= token0PrecisionMultiplier;\\n        } else {\\n            xpIn = _reserve1 * token1PrecisionMultiplier;\\n            xpOut = _reserve0 * token0PrecisionMultiplier;\\n            amountIn *= token1PrecisionMultiplier;\\n        }\\n\\n        uint256 d = _computeLiquidityFromAdjustedBalances(xpIn, xpOut);\\n        uint256 x = xpIn + amountIn;\\n        uint256 y = _getY(x, d);\\n        uint256 dy = xpOut - y - 1;\\n        //console.log(\\\"D, y\\\", d, y);\\n        //console.log(\\\"out\\\", dy);\\n        dy /= (token0In ? token1PrecisionMultiplier : token0PrecisionMultiplier);\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given the indexes of the token\\n     * that is swapped from (FROM) and the token that is swapped to (TO).\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @dev Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L432\\n     *\\n     * @param x the new total amount of FROM token\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function _getY(uint256 x, uint256 D) private view returns (uint256) {\\n        uint256 c = (D * D) / (x * 2);\\n        c = (c * D) / ((N_A * 2) / A_PRECISION);\\n        uint256 b = x + ((D * A_PRECISION) / N_A);\\n        uint256 yPrev;\\n        uint256 y = D;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (y * 2 + b - D);\\n            if (y.within1(yPrev)) {\\n                break;\\n            }\\n        }\\n        return y;\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool given\\n     * precision-adjusted balances and a particular D and precision-adjusted\\n     * array of balances.\\n     *\\n     * @dev This is accomplished via solving the quadratic equation iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @dev Originally https://github.com/saddle-finance/saddle-contract/blob/0b76f7fb519e34b878aa1d58cffc8d8dc0572c12/contracts/SwapUtils.sol#L276\\n     *\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function _getYD(\\n        uint256 s, //xpOut\\n        uint256 d\\n    ) internal view returns (uint256) {\\n        uint256 c = (d * d) / (s * 2);\\n        c = (c * d) / ((N_A * 2) / A_PRECISION);\\n\\n        uint256 b = s + ((d * A_PRECISION) / N_A);\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (y * 2 + b - d);\\n            if (y.within1(yPrev)) {\\n                break;\\n            }\\n        }\\n        return y;\\n    }\\n\\n    // @dev this fee is charged to cover for swap fee when people add unbalanced liquidity.\\n    function _unoptimalMintFee(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) internal view returns (uint256 token0Fee, uint256 token1Fee) {\\n        if (_reserve0 == 0 || _reserve1 == 0) return (0, 0);\\n\\n        uint256 amount1Optimal = (_amount0 * _reserve1) / _reserve0;\\n        if (amount1Optimal <= _amount1) {\\n            token1Fee = (swapFee * (_amount1 - amount1Optimal)) / (2 * MAX_FEE);\\n        } else {\\n            uint256 amount0Optimal = (_amount1 * _reserve0) / _reserve1;\\n            token0Fee = (swapFee * (_amount0 - amount0Optimal)) / (2 * MAX_FEE);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c377dd997da775561b32b8a3050a83c1643056dfed2018df76b860393bce43b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/HybridPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./HybridPool.sol\\\";\\nimport \\\"./PairPoolDeployer.sol\\\";\\n\\n/// @notice Contract for deploying Trident exchange Hybrid Pool with configurations.\\n/// @author Mudit Gupta.\\ncontract HybridPoolFactory is PairPoolDeployer {\\n    constructor(address _masterDeployer) PairPoolDeployer(_masterDeployer) {}\\n\\n    function deployPool(bytes memory _deployData) external returns (address pool) {\\n        (address tokenA, address tokenB, uint256 swapFee, uint256 a) = abi.decode(\\n            _deployData,\\n            (address, address, uint256, uint256)\\n        );\\n        if (tokenA > tokenB) {\\n            (tokenA, tokenB) = (tokenB, tokenA);\\n            _deployData = abi.encode(tokenA, tokenB, swapFee, a);\\n        }\\n        pool = _deployPool(tokenA, tokenB, type(HybridPool).creationCode, _deployData);\\n    }\\n}\\n\",\"keccak256\":\"0xa4279f8d06472bb391498c71f892a486e87cf8d328a4bbc620951368d2fa7c7e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/PairPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ConstantProductPool.sol\\\";\\n\\n/// @notice Trident exchange pool deployer for whitelisted pair template factories.\\n/// @author Mudit Gupta.\\ncontract PairPoolDeployer {\\n    address public immutable masterDeployer;\\n    \\n    mapping(address => mapping(address => address[])) public pools;\\n    mapping(bytes => address) public configAddress;\\n\\n    constructor(address _masterDeployer) {\\n        require(_masterDeployer != address(0), \\\"ZERO_ADDRESS\\\");\\n        masterDeployer = _masterDeployer;\\n    }\\n\\n    function _deployPool(\\n        address token0,\\n        address token1,\\n        bytes memory creationCode,\\n        bytes memory deployData\\n    ) internal returns (address pair) {\\n        require(token0 < token1, \\\"INVALID_TOKEN_ORDER\\\");\\n        require(configAddress[deployData] == address(0), \\\"POOL_ALREADY_DEPLOYED\\\");\\n        // @dev Salt is not actually needed since `creationCodeWithConfig` already contains the salt.\\n        bytes32 salt = keccak256(deployData);\\n        // @dev Data padded after the creation code becomes input to the contructor of the deployed contract.\\n        bytes memory creationCodeWithConfig = abi.encodePacked(creationCode, abi.encode(deployData, masterDeployer));\\n        // @dev Deploy the contract - revert if deployment fails.\\n        assembly {\\n            pair := create2(0, add(creationCodeWithConfig, 32), mload(creationCodeWithConfig), salt)\\n            if iszero(extcodesize(pair)) {\\n                revert(0, 0)\\n            }\\n        }\\n        // @dev Store the address of the deployed contract.\\n        pools[token0][token1].push(pair);\\n        configAddress[deployData] = pair;\\n    }\\n\\n    function poolsCount(address token0, address token1) external view returns (uint256 count) {\\n        count = pools[token0][token1].length;\\n    }\\n\\n    function getPools(\\n        address token0,\\n        address token1,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory pairPools) {\\n        pairPools = new address[](endIndex - startIndex);\\n        for (uint256 i = 0; startIndex < endIndex; i++) {\\n            pairPools[i] = pools[token0][token1][startIndex];\\n            startIndex++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7fa1ac1c483f322767839d50f4bb8794b2b0fa3fa878fc97b7f1fcc69f4fe681\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pool/TridentERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool ERC-20 with EIP-2612 extension.\\n/// @author Adapted from RariCapital, https://github.com/Rari-Capital/solmate/blob/main/src/erc20/ERC20.sol,\\n/// License-Identifier: AGPL-3.0-only.\\ncontract TridentERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n\\n    string public constant name = \\\"Sushi LP Token\\\";\\n    string public constant symbol = \\\"SLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    /// @notice owner -> balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner -> spender -> allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by this contract.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /// @notice The EIP-712 typehash for this contract's domain.\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n    /// @notice owner -> nonce mapping used in {permit}.\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice Approves `amount` from `msg.sender` to be spent by `spender`.\\n    /// @param spender Address of the party that can draw tokens from `msg.sender`'s account.\\n    /// @param amount The maximum collective `amount` that `spender` can draw.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient`. Caller needs approval from `from`.\\n    /// @param sender Address to draw tokens `from`.\\n    /// @param recipient The address to move tokens to.\\n    /// @param amount The token `amount` to move.\\n    /// @return (bool) Returns 'true' if succeeded.\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[sender][msg.sender] != type(uint256).max) {\\n            allowance[sender][msg.sender] -= amount;\\n        }\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Triggers an approval from `owner` to `spender`.\\n    /// @param owner The address to approve from.\\n    /// @param spender The address to be approved.\\n    /// @param amount The number of tokens that are approved (2^256-1 means infinite).\\n    /// @param deadline The time at which to expire the signature.\\n    /// @param v The recovery byte of the signature.\\n    /// @param r Half of the ECDSA signature pair.\\n    /// @param s Half of the ECDSA signature pair.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n        // @dev This is reasonably safe from overflow - incrementing\\n        // beyond 'type(uint256).max' is exceedingly unlikely.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n        allowance[recoveredAddress][spender] = amount;\\n        }\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address recipient, uint256 amount) internal {\\n        totalSupply += amount;\\n        // @dev This is safe from overflow - the sum of all user\\n        // balances can't exceed 'type(uint256).max'.\\n        unchecked {\\n            balanceOf[recipient] += amount;\\n        }\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burn(address sender, uint256 amount) internal {\\n        balanceOf[sender] -= amount;\\n        // @dev This is safe from underflow - users won't ever\\n        // have a balance larger than `totalSupply`.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n        emit Transfer(sender, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5e68d5f71dadbf20472846e97fb2e315f4e765d2aa5d8e897d2831adbc6ecf1c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TridentOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident access control contract.\\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\\ncontract TridentOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event TransferOwner(address indexed sender, address indexed recipient);\\n    event TransferOwnerClaim(address indexed sender, address indexed recipient);\\n\\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\\n    constructor() {\\n        owner = msg.sender;\\n        emit TransferOwner(address(0), msg.sender);\\n    }\\n\\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    /// @notice `pendingOwner` can claim `owner` account.\\n    function claimOwner() external {\\n        require(msg.sender == pendingOwner, \\\"NOT_PENDING_OWNER\\\");\\n        emit TransferOwner(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Transfer `owner` account.\\n    /// @param recipient Account granted `owner` access control.\\n    /// @param direct If 'true', ownership is directly transferred.\\n    function transferOwner(address recipient, bool direct) external onlyOwner {\\n        if (direct) {\\n            owner = recipient;\\n            emit TransferOwner(msg.sender, recipient);\\n        } else {\\n            pendingOwner = recipient;\\n            emit TransferOwnerClaim(msg.sender, recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba548d2b837574da94342865861750bc58b0d947fb085937885708f279b21bb4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/workInProgress/IMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x90784cbfa52a13cc4b29bb700adc9e6204199543edcf7adc61eb879dee19ac88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mudit Gupta.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for deploying Trident exchange Hybrid Pool with configurations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7763,
        "contract": "contracts/pool/HybridPoolFactory.sol:HybridPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 7767,
        "contract": "contracts/pool/HybridPoolFactory.sol:HybridPoolFactory",
        "label": "configAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}